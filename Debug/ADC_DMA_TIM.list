
ADC_DMA_TIM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08006dc0  08006dc0  00016dc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800720c  0800720c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800720c  0800720c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800720c  0800720c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800720c  0800720c  0001720c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007210  08007210  00017210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007214  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  200001dc  080073f0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  080073f0  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb4b  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002163  00000000  00000000  0002bd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  0002deb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000910  00000000  00000000  0002e8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018956  00000000  00000000  0002f1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb2a  00000000  00000000  00047b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088b8d  00000000  00000000  00054638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dd1c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003998  00000000  00000000  000dd218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08006da4 	.word	0x08006da4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08006da4 	.word	0x08006da4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	f023 030f 	bic.w	r3, r3, #15
 8000ff4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	011b      	lsls	r3, r3, #4
 8000ffa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	f043 030c 	orr.w	r3, r3, #12
 8001002:	b2db      	uxtb	r3, r3
 8001004:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	f043 0308 	orr.w	r3, r3, #8
 800100c:	b2db      	uxtb	r3, r3
 800100e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001010:	7bbb      	ldrb	r3, [r7, #14]
 8001012:	f043 030c 	orr.w	r3, r3, #12
 8001016:	b2db      	uxtb	r3, r3
 8001018:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800101a:	7bbb      	ldrb	r3, [r7, #14]
 800101c:	f043 0308 	orr.w	r3, r3, #8
 8001020:	b2db      	uxtb	r3, r3
 8001022:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001024:	f107 0208 	add.w	r2, r7, #8
 8001028:	2364      	movs	r3, #100	; 0x64
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2304      	movs	r3, #4
 800102e:	214e      	movs	r1, #78	; 0x4e
 8001030:	4803      	ldr	r0, [pc, #12]	; (8001040 <lcd_send_cmd+0x5c>)
 8001032:	f001 ff51 	bl	8002ed8 <HAL_I2C_Master_Transmit>
}
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000294 	.word	0x20000294

08001044 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af02      	add	r7, sp, #8
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	f023 030f 	bic.w	r3, r3, #15
 8001054:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	011b      	lsls	r3, r3, #4
 800105a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	f043 030d 	orr.w	r3, r3, #13
 8001062:	b2db      	uxtb	r3, r3
 8001064:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	f043 0309 	orr.w	r3, r3, #9
 800106c:	b2db      	uxtb	r3, r3
 800106e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001070:	7bbb      	ldrb	r3, [r7, #14]
 8001072:	f043 030d 	orr.w	r3, r3, #13
 8001076:	b2db      	uxtb	r3, r3
 8001078:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800107a:	7bbb      	ldrb	r3, [r7, #14]
 800107c:	f043 0309 	orr.w	r3, r3, #9
 8001080:	b2db      	uxtb	r3, r3
 8001082:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001084:	f107 0208 	add.w	r2, r7, #8
 8001088:	2364      	movs	r3, #100	; 0x64
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2304      	movs	r3, #4
 800108e:	214e      	movs	r1, #78	; 0x4e
 8001090:	4803      	ldr	r0, [pc, #12]	; (80010a0 <lcd_send_data+0x5c>)
 8001092:	f001 ff21 	bl	8002ed8 <HAL_I2C_Master_Transmit>
}
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000294 	.word	0x20000294

080010a4 <lcd_clear>:

void lcd_clear (void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	f7ff ff9a 	bl	8000fe4 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80010b0:	2300      	movs	r3, #0
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	e005      	b.n	80010c2 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80010b6:	2020      	movs	r0, #32
 80010b8:	f7ff ffc4 	bl	8001044 <lcd_send_data>
	for (int i=0; i<70; i++)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3301      	adds	r3, #1
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b45      	cmp	r3, #69	; 0x45
 80010c6:	ddf6      	ble.n	80010b6 <lcd_clear+0x12>
	}
}
 80010c8:	bf00      	nop
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	6039      	str	r1, [r7, #0]
    switch (row)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <lcd_put_cur+0x18>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d005      	beq.n	80010f4 <lcd_put_cur+0x22>
 80010e8:	e009      	b.n	80010fe <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010f0:	603b      	str	r3, [r7, #0]
            break;
 80010f2:	e004      	b.n	80010fe <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80010fa:	603b      	str	r3, [r7, #0]
            break;
 80010fc:	bf00      	nop
    }

    lcd_send_cmd (col);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ff6e 	bl	8000fe4 <lcd_send_cmd>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <lcd_init>:


void lcd_init (void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001114:	2032      	movs	r0, #50	; 0x32
 8001116:	f000 fca9 	bl	8001a6c <HAL_Delay>
	lcd_send_cmd (0x30);
 800111a:	2030      	movs	r0, #48	; 0x30
 800111c:	f7ff ff62 	bl	8000fe4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001120:	2005      	movs	r0, #5
 8001122:	f000 fca3 	bl	8001a6c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001126:	2030      	movs	r0, #48	; 0x30
 8001128:	f7ff ff5c 	bl	8000fe4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800112c:	2001      	movs	r0, #1
 800112e:	f000 fc9d 	bl	8001a6c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001132:	2030      	movs	r0, #48	; 0x30
 8001134:	f7ff ff56 	bl	8000fe4 <lcd_send_cmd>
	HAL_Delay(10);
 8001138:	200a      	movs	r0, #10
 800113a:	f000 fc97 	bl	8001a6c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800113e:	2020      	movs	r0, #32
 8001140:	f7ff ff50 	bl	8000fe4 <lcd_send_cmd>
	HAL_Delay(10);
 8001144:	200a      	movs	r0, #10
 8001146:	f000 fc91 	bl	8001a6c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800114a:	2028      	movs	r0, #40	; 0x28
 800114c:	f7ff ff4a 	bl	8000fe4 <lcd_send_cmd>
	HAL_Delay(1);
 8001150:	2001      	movs	r0, #1
 8001152:	f000 fc8b 	bl	8001a6c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001156:	2008      	movs	r0, #8
 8001158:	f7ff ff44 	bl	8000fe4 <lcd_send_cmd>
	HAL_Delay(1);
 800115c:	2001      	movs	r0, #1
 800115e:	f000 fc85 	bl	8001a6c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001162:	2001      	movs	r0, #1
 8001164:	f7ff ff3e 	bl	8000fe4 <lcd_send_cmd>
	HAL_Delay(1);
 8001168:	2001      	movs	r0, #1
 800116a:	f000 fc7f 	bl	8001a6c <HAL_Delay>
	HAL_Delay(1);
 800116e:	2001      	movs	r0, #1
 8001170:	f000 fc7c 	bl	8001a6c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001174:	2006      	movs	r0, #6
 8001176:	f7ff ff35 	bl	8000fe4 <lcd_send_cmd>
	HAL_Delay(1);
 800117a:	2001      	movs	r0, #1
 800117c:	f000 fc76 	bl	8001a6c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001180:	200c      	movs	r0, #12
 8001182:	f7ff ff2f 	bl	8000fe4 <lcd_send_cmd>
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}

0800118a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001192:	e006      	b.n	80011a2 <lcd_send_string+0x18>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	1c5a      	adds	r2, r3, #1
 8001198:	607a      	str	r2, [r7, #4]
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff51 	bl	8001044 <lcd_send_data>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1f4      	bne.n	8001194 <lcd_send_string+0xa>
}
 80011aa:	bf00      	nop
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b8:	f000 fbf6 	bl	80019a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011bc:	f000 f82c 	bl	8001218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c0:	f000 f914 	bl	80013ec <MX_GPIO_Init>
  MX_DMA_Init();
 80011c4:	f000 f8f4 	bl	80013b0 <MX_DMA_Init>
  MX_ADC1_Init();
 80011c8:	f000 f876 	bl	80012b8 <MX_ADC1_Init>
  MX_I2C1_Init();
 80011cc:	f000 f8c2 	bl	8001354 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80011d0:	f7ff ff9e 	bl	8001110 <lcd_init>
  HAL_Delay(100);
 80011d4:	2064      	movs	r0, #100	; 0x64
 80011d6:	f000 fc49 	bl	8001a6c <HAL_Delay>
  lcd_clear();
 80011da:	f7ff ff63 	bl	80010a4 <lcd_clear>
  HAL_Delay(100);
 80011de:	2064      	movs	r0, #100	; 0x64
 80011e0:	f000 fc44 	bl	8001a6c <HAL_Delay>
  lcd_send_string("    Welcome!");
 80011e4:	4809      	ldr	r0, [pc, #36]	; (800120c <main+0x58>)
 80011e6:	f7ff ffd0 	bl	800118a <lcd_send_string>
  HAL_Delay(2800);
 80011ea:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 80011ee:	f000 fc3d 	bl	8001a6c <HAL_Delay>
  lcd_clear();
 80011f2:	f7ff ff57 	bl	80010a4 <lcd_clear>

  HAL_ADCEx_Calibration_Start(&hadc1);
 80011f6:	4806      	ldr	r0, [pc, #24]	; (8001210 <main+0x5c>)
 80011f8:	f001 f80e 	bl	8002218 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc, 64);
 80011fc:	2240      	movs	r2, #64	; 0x40
 80011fe:	4905      	ldr	r1, [pc, #20]	; (8001214 <main+0x60>)
 8001200:	4803      	ldr	r0, [pc, #12]	; (8001210 <main+0x5c>)
 8001202:	f000 fd2f 	bl	8001c64 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ADC_Display_Result();
 8001206:	f000 f92b 	bl	8001460 <ADC_Display_Result>
 800120a:	e7fc      	b.n	8001206 <main+0x52>
 800120c:	08006dc0 	.word	0x08006dc0
 8001210:	200002fc 	.word	0x200002fc
 8001214:	200001f8 	.word	0x200001f8

08001218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b094      	sub	sp, #80	; 0x50
 800121c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001222:	2228      	movs	r2, #40	; 0x28
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f002 ff1a 	bl	8004060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001248:	2302      	movs	r3, #2
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800124c:	2301      	movs	r3, #1
 800124e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001250:	2310      	movs	r3, #16
 8001252:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001254:	2300      	movs	r3, #0
 8001256:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001258:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800125c:	4618      	mov	r0, r3
 800125e:	f002 f941 	bl	80034e4 <HAL_RCC_OscConfig>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001268:	f000 f9a0 	bl	80015ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126c:	230f      	movs	r3, #15
 800126e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001270:	2300      	movs	r3, #0
 8001272:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001278:	2300      	movs	r3, #0
 800127a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f002 fbac 	bl	80039e4 <HAL_RCC_ClockConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001292:	f000 f98b 	bl	80015ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001296:	2302      	movs	r3, #2
 8001298:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	4618      	mov	r0, r3
 80012a2:	f002 fd39 	bl	8003d18 <HAL_RCCEx_PeriphCLKConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012ac:	f000 f97e 	bl	80015ac <Error_Handler>
  }
}
 80012b0:	bf00      	nop
 80012b2:	3750      	adds	r7, #80	; 0x50
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80012c8:	4b20      	ldr	r3, [pc, #128]	; (800134c <MX_ADC1_Init+0x94>)
 80012ca:	4a21      	ldr	r2, [pc, #132]	; (8001350 <MX_ADC1_Init+0x98>)
 80012cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012ce:	4b1f      	ldr	r3, [pc, #124]	; (800134c <MX_ADC1_Init+0x94>)
 80012d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012d6:	4b1d      	ldr	r3, [pc, #116]	; (800134c <MX_ADC1_Init+0x94>)
 80012d8:	2201      	movs	r2, #1
 80012da:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012dc:	4b1b      	ldr	r3, [pc, #108]	; (800134c <MX_ADC1_Init+0x94>)
 80012de:	2200      	movs	r2, #0
 80012e0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012e2:	4b1a      	ldr	r3, [pc, #104]	; (800134c <MX_ADC1_Init+0x94>)
 80012e4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80012e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012ea:	4b18      	ldr	r3, [pc, #96]	; (800134c <MX_ADC1_Init+0x94>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80012f0:	4b16      	ldr	r3, [pc, #88]	; (800134c <MX_ADC1_Init+0x94>)
 80012f2:	2202      	movs	r2, #2
 80012f4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012f6:	4815      	ldr	r0, [pc, #84]	; (800134c <MX_ADC1_Init+0x94>)
 80012f8:	f000 fbdc 	bl	8001ab4 <HAL_ADC_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001302:	f000 f953 	bl	80015ac <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800130a:	2301      	movs	r3, #1
 800130c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800130e:	2307      	movs	r3, #7
 8001310:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	4619      	mov	r1, r3
 8001316:	480d      	ldr	r0, [pc, #52]	; (800134c <MX_ADC1_Init+0x94>)
 8001318:	f000 fd94 	bl	8001e44 <HAL_ADC_ConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001322:	f000 f943 	bl	80015ac <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001326:	2301      	movs	r3, #1
 8001328:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800132a:	2302      	movs	r3, #2
 800132c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	4619      	mov	r1, r3
 8001332:	4806      	ldr	r0, [pc, #24]	; (800134c <MX_ADC1_Init+0x94>)
 8001334:	f000 fd86 	bl	8001e44 <HAL_ADC_ConfigChannel>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800133e:	f000 f935 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200002fc 	.word	0x200002fc
 8001350:	40012400 	.word	0x40012400

08001354 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <MX_I2C1_Init+0x50>)
 800135a:	4a13      	ldr	r2, [pc, #76]	; (80013a8 <MX_I2C1_Init+0x54>)
 800135c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <MX_I2C1_Init+0x50>)
 8001360:	4a12      	ldr	r2, [pc, #72]	; (80013ac <MX_I2C1_Init+0x58>)
 8001362:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <MX_I2C1_Init+0x50>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <MX_I2C1_Init+0x50>)
 800136c:	2200      	movs	r2, #0
 800136e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <MX_I2C1_Init+0x50>)
 8001372:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001376:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001378:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <MX_I2C1_Init+0x50>)
 800137a:	2200      	movs	r2, #0
 800137c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <MX_I2C1_Init+0x50>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001384:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <MX_I2C1_Init+0x50>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <MX_I2C1_Init+0x50>)
 800138c:	2200      	movs	r2, #0
 800138e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001390:	4804      	ldr	r0, [pc, #16]	; (80013a4 <MX_I2C1_Init+0x50>)
 8001392:	f001 fc5d 	bl	8002c50 <HAL_I2C_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800139c:	f000 f906 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000294 	.word	0x20000294
 80013a8:	40005400 	.word	0x40005400
 80013ac:	000186a0 	.word	0x000186a0

080013b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_DMA_Init+0x38>)
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <MX_DMA_Init+0x38>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6153      	str	r3, [r2, #20]
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_DMA_Init+0x38>)
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	200b      	movs	r0, #11
 80013d4:	f001 f893 	bl	80024fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013d8:	200b      	movs	r0, #11
 80013da:	f001 f8ac 	bl	8002536 <HAL_NVIC_EnableIRQ>

}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000

080013ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <MX_GPIO_Init+0x40>)
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	4a0d      	ldr	r2, [pc, #52]	; (800142c <MX_GPIO_Init+0x40>)
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	6193      	str	r3, [r2, #24]
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <MX_GPIO_Init+0x40>)
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	f003 0304 	and.w	r3, r3, #4
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140a:	4b08      	ldr	r3, [pc, #32]	; (800142c <MX_GPIO_Init+0x40>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	4a07      	ldr	r2, [pc, #28]	; (800142c <MX_GPIO_Init+0x40>)
 8001410:	f043 0308 	orr.w	r3, r3, #8
 8001414:	6193      	str	r3, [r2, #24]
 8001416:	4b05      	ldr	r3, [pc, #20]	; (800142c <MX_GPIO_Init+0x40>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	683b      	ldr	r3, [r7, #0]

}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr
 800142c:	40021000 	.word	0x40021000

08001430 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a05      	ldr	r2, [pc, #20]	; (8001454 <HAL_ADC_ConvCpltCallback+0x24>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d102      	bne.n	8001448 <HAL_ADC_ConvCpltCallback+0x18>
    {
        flag = 1;
 8001442:	4b05      	ldr	r3, [pc, #20]	; (8001458 <HAL_ADC_ConvCpltCallback+0x28>)
 8001444:	2201      	movs	r2, #1
 8001446:	701a      	strb	r2, [r3, #0]
    }
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40012400 	.word	0x40012400
 8001458:	20000278 	.word	0x20000278
 800145c:	00000000 	.word	0x00000000

08001460 <ADC_Display_Result>:

void ADC_Display_Result(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
	if(flag)
 8001466:	4b46      	ldr	r3, [pc, #280]	; (8001580 <ADC_Display_Result+0x120>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b00      	cmp	r3, #0
 800146e:	d07e      	beq.n	800156e <ADC_Display_Result+0x10e>
	  {
	        flag = 0;
 8001470:	4b43      	ldr	r3, [pc, #268]	; (8001580 <ADC_Display_Result+0x120>)
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
	        adc_measure = 0;
 8001476:	4b43      	ldr	r3, [pc, #268]	; (8001584 <ADC_Display_Result+0x124>)
 8001478:	f04f 0200 	mov.w	r2, #0
 800147c:	601a      	str	r2, [r3, #0]

	        for (int i = 0; i<64; i++)
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	e015      	b.n	80014b0 <ADC_Display_Result+0x50>
	        {
	        	adc_measure += adc[i];
 8001484:	4a40      	ldr	r2, [pc, #256]	; (8001588 <ADC_Display_Result+0x128>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800148c:	b29b      	uxth	r3, r3
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fc04 	bl	8000c9c <__aeabi_i2f>
 8001494:	4602      	mov	r2, r0
 8001496:	4b3b      	ldr	r3, [pc, #236]	; (8001584 <ADC_Display_Result+0x124>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4619      	mov	r1, r3
 800149c:	4610      	mov	r0, r2
 800149e:	f7ff fb49 	bl	8000b34 <__addsf3>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b37      	ldr	r3, [pc, #220]	; (8001584 <ADC_Display_Result+0x124>)
 80014a8:	601a      	str	r2, [r3, #0]
	        for (int i = 0; i<64; i++)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3301      	adds	r3, #1
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b3f      	cmp	r3, #63	; 0x3f
 80014b4:	dde6      	ble.n	8001484 <ADC_Display_Result+0x24>
	        }
	        adc_measure = adc_measure / 64.0;
 80014b6:	4b33      	ldr	r3, [pc, #204]	; (8001584 <ADC_Display_Result+0x124>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f04f 4185 	mov.w	r1, #1115684864	; 0x42800000
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fcf4 	bl	8000eac <__aeabi_fdiv>
 80014c4:	4603      	mov	r3, r0
 80014c6:	461a      	mov	r2, r3
 80014c8:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <ADC_Display_Result+0x124>)
 80014ca:	601a      	str	r2, [r3, #0]

	        voltage = adc_measure * (3.3/4096);
 80014cc:	4b2d      	ldr	r3, [pc, #180]	; (8001584 <ADC_Display_Result+0x124>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7fe ffa9 	bl	8000428 <__aeabi_f2d>
 80014d6:	a328      	add	r3, pc, #160	; (adr r3, 8001578 <ADC_Display_Result+0x118>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	f7fe fffc 	bl	80004d8 <__aeabi_dmul>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4610      	mov	r0, r2
 80014e6:	4619      	mov	r1, r3
 80014e8:	f7ff face 	bl	8000a88 <__aeabi_d2f>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4a27      	ldr	r2, [pc, #156]	; (800158c <ADC_Display_Result+0x12c>)
 80014f0:	6013      	str	r3, [r2, #0]

	        end_temp = (voltage * 1000 - 500) / 10.0;
 80014f2:	4b26      	ldr	r3, [pc, #152]	; (800158c <ADC_Display_Result+0x12c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4926      	ldr	r1, [pc, #152]	; (8001590 <ADC_Display_Result+0x130>)
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fc23 	bl	8000d44 <__aeabi_fmul>
 80014fe:	4603      	mov	r3, r0
 8001500:	4924      	ldr	r1, [pc, #144]	; (8001594 <ADC_Display_Result+0x134>)
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fb14 	bl	8000b30 <__aeabi_fsub>
 8001508:	4603      	mov	r3, r0
 800150a:	4923      	ldr	r1, [pc, #140]	; (8001598 <ADC_Display_Result+0x138>)
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fccd 	bl	8000eac <__aeabi_fdiv>
 8001512:	4603      	mov	r3, r0
 8001514:	461a      	mov	r2, r3
 8001516:	4b21      	ldr	r3, [pc, #132]	; (800159c <ADC_Display_Result+0x13c>)
 8001518:	601a      	str	r2, [r3, #0]

	        HAL_Delay(1);
 800151a:	2001      	movs	r0, #1
 800151c:	f000 faa6 	bl	8001a6c <HAL_Delay>

	        lcd_put_cur(0,0);
 8001520:	2100      	movs	r1, #0
 8001522:	2000      	movs	r0, #0
 8001524:	f7ff fdd5 	bl	80010d2 <lcd_put_cur>
	        sprintf(number, "Volt:  %.4f V", voltage);
 8001528:	4b18      	ldr	r3, [pc, #96]	; (800158c <ADC_Display_Result+0x12c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe ff7b 	bl	8000428 <__aeabi_f2d>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	491a      	ldr	r1, [pc, #104]	; (80015a0 <ADC_Display_Result+0x140>)
 8001538:	481a      	ldr	r0, [pc, #104]	; (80015a4 <ADC_Display_Result+0x144>)
 800153a:	f003 f9f9 	bl	8004930 <siprintf>
	        lcd_send_string(number);
 800153e:	4819      	ldr	r0, [pc, #100]	; (80015a4 <ADC_Display_Result+0x144>)
 8001540:	f7ff fe23 	bl	800118a <lcd_send_string>

	        HAL_Delay(1);
 8001544:	2001      	movs	r0, #1
 8001546:	f000 fa91 	bl	8001a6c <HAL_Delay>
	        lcd_put_cur(1,0);
 800154a:	2100      	movs	r1, #0
 800154c:	2001      	movs	r0, #1
 800154e:	f7ff fdc0 	bl	80010d2 <lcd_put_cur>

	        sprintf(number, "Temp:  %.2f *C",  end_temp);
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <ADC_Display_Result+0x13c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f7fe ff66 	bl	8000428 <__aeabi_f2d>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4911      	ldr	r1, [pc, #68]	; (80015a8 <ADC_Display_Result+0x148>)
 8001562:	4810      	ldr	r0, [pc, #64]	; (80015a4 <ADC_Display_Result+0x144>)
 8001564:	f003 f9e4 	bl	8004930 <siprintf>
	        lcd_send_string(number);
 8001568:	480e      	ldr	r0, [pc, #56]	; (80015a4 <ADC_Display_Result+0x144>)
 800156a:	f7ff fe0e 	bl	800118a <lcd_send_string>
	  }
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	66666666 	.word	0x66666666
 800157c:	3f4a6666 	.word	0x3f4a6666
 8001580:	20000278 	.word	0x20000278
 8001584:	2000027c 	.word	0x2000027c
 8001588:	200001f8 	.word	0x200001f8
 800158c:	20000284 	.word	0x20000284
 8001590:	447a0000 	.word	0x447a0000
 8001594:	43fa0000 	.word	0x43fa0000
 8001598:	41200000 	.word	0x41200000
 800159c:	20000280 	.word	0x20000280
 80015a0:	08006dd0 	.word	0x08006dd0
 80015a4:	200002e8 	.word	0x200002e8
 80015a8:	08006de0 	.word	0x08006de0

080015ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b0:	b672      	cpsid	i
}
 80015b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <Error_Handler+0x8>
	...

080015b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <HAL_MspInit+0x5c>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	4a14      	ldr	r2, [pc, #80]	; (8001614 <HAL_MspInit+0x5c>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6193      	str	r3, [r2, #24]
 80015ca:	4b12      	ldr	r3, [pc, #72]	; (8001614 <HAL_MspInit+0x5c>)
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <HAL_MspInit+0x5c>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	4a0e      	ldr	r2, [pc, #56]	; (8001614 <HAL_MspInit+0x5c>)
 80015dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e0:	61d3      	str	r3, [r2, #28]
 80015e2:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <HAL_MspInit+0x5c>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015ee:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <HAL_MspInit+0x60>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	4a04      	ldr	r2, [pc, #16]	; (8001618 <HAL_MspInit+0x60>)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800160a:	bf00      	nop
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	40021000 	.word	0x40021000
 8001618:	40010000 	.word	0x40010000

0800161c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 0310 	add.w	r3, r7, #16
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a29      	ldr	r2, [pc, #164]	; (80016dc <HAL_ADC_MspInit+0xc0>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d14a      	bne.n	80016d2 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800163c:	4b28      	ldr	r3, [pc, #160]	; (80016e0 <HAL_ADC_MspInit+0xc4>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	4a27      	ldr	r2, [pc, #156]	; (80016e0 <HAL_ADC_MspInit+0xc4>)
 8001642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001646:	6193      	str	r3, [r2, #24]
 8001648:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <HAL_ADC_MspInit+0xc4>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001654:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <HAL_ADC_MspInit+0xc4>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	4a21      	ldr	r2, [pc, #132]	; (80016e0 <HAL_ADC_MspInit+0xc4>)
 800165a:	f043 0304 	orr.w	r3, r3, #4
 800165e:	6193      	str	r3, [r2, #24]
 8001660:	4b1f      	ldr	r3, [pc, #124]	; (80016e0 <HAL_ADC_MspInit+0xc4>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800166c:	2303      	movs	r3, #3
 800166e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001670:	2303      	movs	r3, #3
 8001672:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001674:	f107 0310 	add.w	r3, r7, #16
 8001678:	4619      	mov	r1, r3
 800167a:	481a      	ldr	r0, [pc, #104]	; (80016e4 <HAL_ADC_MspInit+0xc8>)
 800167c:	f001 f964 	bl	8002948 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001680:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <HAL_ADC_MspInit+0xcc>)
 8001682:	4a1a      	ldr	r2, [pc, #104]	; (80016ec <HAL_ADC_MspInit+0xd0>)
 8001684:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001686:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <HAL_ADC_MspInit+0xcc>)
 8001688:	2200      	movs	r2, #0
 800168a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800168c:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <HAL_ADC_MspInit+0xcc>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <HAL_ADC_MspInit+0xcc>)
 8001694:	2280      	movs	r2, #128	; 0x80
 8001696:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001698:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <HAL_ADC_MspInit+0xcc>)
 800169a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800169e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <HAL_ADC_MspInit+0xcc>)
 80016a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016a6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016a8:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <HAL_ADC_MspInit+0xcc>)
 80016aa:	2220      	movs	r2, #32
 80016ac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <HAL_ADC_MspInit+0xcc>)
 80016b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016b4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016b6:	480c      	ldr	r0, [pc, #48]	; (80016e8 <HAL_ADC_MspInit+0xcc>)
 80016b8:	f000 ff58 	bl	800256c <HAL_DMA_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 80016c2:	f7ff ff73 	bl	80015ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a07      	ldr	r2, [pc, #28]	; (80016e8 <HAL_ADC_MspInit+0xcc>)
 80016ca:	621a      	str	r2, [r3, #32]
 80016cc:	4a06      	ldr	r2, [pc, #24]	; (80016e8 <HAL_ADC_MspInit+0xcc>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016d2:	bf00      	nop
 80016d4:	3720      	adds	r7, #32
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40012400 	.word	0x40012400
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40010800 	.word	0x40010800
 80016e8:	2000032c 	.word	0x2000032c
 80016ec:	40020008 	.word	0x40020008

080016f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a15      	ldr	r2, [pc, #84]	; (8001760 <HAL_I2C_MspInit+0x70>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d123      	bne.n	8001758 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001710:	4b14      	ldr	r3, [pc, #80]	; (8001764 <HAL_I2C_MspInit+0x74>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	4a13      	ldr	r2, [pc, #76]	; (8001764 <HAL_I2C_MspInit+0x74>)
 8001716:	f043 0308 	orr.w	r3, r3, #8
 800171a:	6193      	str	r3, [r2, #24]
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <HAL_I2C_MspInit+0x74>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001728:	23c0      	movs	r3, #192	; 0xc0
 800172a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800172c:	2312      	movs	r3, #18
 800172e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001730:	2303      	movs	r3, #3
 8001732:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001734:	f107 0310 	add.w	r3, r7, #16
 8001738:	4619      	mov	r1, r3
 800173a:	480b      	ldr	r0, [pc, #44]	; (8001768 <HAL_I2C_MspInit+0x78>)
 800173c:	f001 f904 	bl	8002948 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <HAL_I2C_MspInit+0x74>)
 8001742:	69db      	ldr	r3, [r3, #28]
 8001744:	4a07      	ldr	r2, [pc, #28]	; (8001764 <HAL_I2C_MspInit+0x74>)
 8001746:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800174a:	61d3      	str	r3, [r2, #28]
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <HAL_I2C_MspInit+0x74>)
 800174e:	69db      	ldr	r3, [r3, #28]
 8001750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001758:	bf00      	nop
 800175a:	3720      	adds	r7, #32
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40005400 	.word	0x40005400
 8001764:	40021000 	.word	0x40021000
 8001768:	40010c00 	.word	0x40010c00

0800176c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001770:	e7fe      	b.n	8001770 <NMI_Handler+0x4>

08001772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001776:	e7fe      	b.n	8001776 <HardFault_Handler+0x4>

08001778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800177c:	e7fe      	b.n	800177c <MemManage_Handler+0x4>

0800177e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001782:	e7fe      	b.n	8001782 <BusFault_Handler+0x4>

08001784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001788:	e7fe      	b.n	8001788 <UsageFault_Handler+0x4>

0800178a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr

08001796 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr

080017a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr

080017ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b2:	f000 f93f 	bl	8001a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <DMA1_Channel1_IRQHandler+0x10>)
 80017c2:	f000 ff8d 	bl	80026e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	2000032c 	.word	0x2000032c

080017d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
	return 1;
 80017d4:	2301      	movs	r3, #1
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr

080017de <_kill>:

int _kill(int pid, int sig)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017e8:	f002 fc10 	bl	800400c <__errno>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2216      	movs	r2, #22
 80017f0:	601a      	str	r2, [r3, #0]
	return -1;
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <_exit>:

void _exit (int status)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001806:	f04f 31ff 	mov.w	r1, #4294967295
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff ffe7 	bl	80017de <_kill>
	while (1) {}		/* Make sure we hang here */
 8001810:	e7fe      	b.n	8001810 <_exit+0x12>

08001812 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	60f8      	str	r0, [r7, #12]
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	e00a      	b.n	800183a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001824:	f3af 8000 	nop.w
 8001828:	4601      	mov	r1, r0
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	1c5a      	adds	r2, r3, #1
 800182e:	60ba      	str	r2, [r7, #8]
 8001830:	b2ca      	uxtb	r2, r1
 8001832:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	3301      	adds	r3, #1
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	429a      	cmp	r2, r3
 8001840:	dbf0      	blt.n	8001824 <_read+0x12>
	}

return len;
 8001842:	687b      	ldr	r3, [r7, #4]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	e009      	b.n	8001872 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	60ba      	str	r2, [r7, #8]
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	3301      	adds	r3, #1
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	429a      	cmp	r2, r3
 8001878:	dbf1      	blt.n	800185e <_write+0x12>
	}
	return len;
 800187a:	687b      	ldr	r3, [r7, #4]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <_close>:

int _close(int file)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	return -1;
 800188c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr

0800189a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018aa:	605a      	str	r2, [r3, #4]
	return 0;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <_isatty>:

int _isatty(int file)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	return 1;
 80018c0:	2301      	movs	r3, #1
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
	return 0;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018ec:	4a14      	ldr	r2, [pc, #80]	; (8001940 <_sbrk+0x5c>)
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <_sbrk+0x60>)
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018f8:	4b13      	ldr	r3, [pc, #76]	; (8001948 <_sbrk+0x64>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d102      	bne.n	8001906 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001900:	4b11      	ldr	r3, [pc, #68]	; (8001948 <_sbrk+0x64>)
 8001902:	4a12      	ldr	r2, [pc, #72]	; (800194c <_sbrk+0x68>)
 8001904:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <_sbrk+0x64>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4413      	add	r3, r2
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	429a      	cmp	r2, r3
 8001912:	d207      	bcs.n	8001924 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001914:	f002 fb7a 	bl	800400c <__errno>
 8001918:	4603      	mov	r3, r0
 800191a:	220c      	movs	r2, #12
 800191c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800191e:	f04f 33ff 	mov.w	r3, #4294967295
 8001922:	e009      	b.n	8001938 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <_sbrk+0x64>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800192a:	4b07      	ldr	r3, [pc, #28]	; (8001948 <_sbrk+0x64>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	4a05      	ldr	r2, [pc, #20]	; (8001948 <_sbrk+0x64>)
 8001934:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001936:	68fb      	ldr	r3, [r7, #12]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20005000 	.word	0x20005000
 8001944:	00000400 	.word	0x00000400
 8001948:	20000288 	.word	0x20000288
 800194c:	20000388 	.word	0x20000388

08001950 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800195c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800195e:	e003      	b.n	8001968 <LoopCopyDataInit>

08001960 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001962:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001964:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001966:	3104      	adds	r1, #4

08001968 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001968:	480a      	ldr	r0, [pc, #40]	; (8001994 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800196a:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800196c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800196e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001970:	d3f6      	bcc.n	8001960 <CopyDataInit>
  ldr r2, =_sbss
 8001972:	4a0a      	ldr	r2, [pc, #40]	; (800199c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001974:	e002      	b.n	800197c <LoopFillZerobss>

08001976 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001978:	f842 3b04 	str.w	r3, [r2], #4

0800197c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800197e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001980:	d3f9      	bcc.n	8001976 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001982:	f7ff ffe5 	bl	8001950 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001986:	f002 fb47 	bl	8004018 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800198a:	f7ff fc13 	bl	80011b4 <main>
  bx lr
 800198e:	4770      	bx	lr
  ldr r3, =_sidata
 8001990:	08007214 	.word	0x08007214
  ldr r0, =_sdata
 8001994:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001998:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 800199c:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 80019a0:	20000384 	.word	0x20000384

080019a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019a4:	e7fe      	b.n	80019a4 <ADC1_2_IRQHandler>
	...

080019a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <HAL_Init+0x28>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a07      	ldr	r2, [pc, #28]	; (80019d0 <HAL_Init+0x28>)
 80019b2:	f043 0310 	orr.w	r3, r3, #16
 80019b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b8:	2003      	movs	r0, #3
 80019ba:	f000 fd95 	bl	80024e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019be:	2000      	movs	r0, #0
 80019c0:	f000 f808 	bl	80019d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c4:	f7ff fdf8 	bl	80015b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40022000 	.word	0x40022000

080019d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_InitTick+0x54>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_InitTick+0x58>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 fdad 	bl	8002552 <HAL_SYSTICK_Config>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e00e      	b.n	8001a20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b0f      	cmp	r3, #15
 8001a06:	d80a      	bhi.n	8001a1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a10:	f000 fd75 	bl	80024fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a14:	4a06      	ldr	r2, [pc, #24]	; (8001a30 <HAL_InitTick+0x5c>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e000      	b.n	8001a20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000000 	.word	0x20000000
 8001a2c:	20000008 	.word	0x20000008
 8001a30:	20000004 	.word	0x20000004

08001a34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_IncTick+0x1c>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_IncTick+0x20>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	4a03      	ldr	r2, [pc, #12]	; (8001a54 <HAL_IncTick+0x20>)
 8001a46:	6013      	str	r3, [r2, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr
 8001a50:	20000008 	.word	0x20000008
 8001a54:	20000370 	.word	0x20000370

08001a58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a5c:	4b02      	ldr	r3, [pc, #8]	; (8001a68 <HAL_GetTick+0x10>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr
 8001a68:	20000370 	.word	0x20000370

08001a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a74:	f7ff fff0 	bl	8001a58 <HAL_GetTick>
 8001a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a84:	d005      	beq.n	8001a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a86:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <HAL_Delay+0x44>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4413      	add	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a92:	bf00      	nop
 8001a94:	f7ff ffe0 	bl	8001a58 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d8f7      	bhi.n	8001a94 <HAL_Delay+0x28>
  {
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	bf00      	nop
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000008 	.word	0x20000008

08001ab4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e0be      	b.n	8001c54 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d109      	bne.n	8001af8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff fd92 	bl	800161c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 faed 	bl	80020d8 <ADC_ConversionStop_Disable>
 8001afe:	4603      	mov	r3, r0
 8001b00:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	f003 0310 	and.w	r3, r3, #16
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f040 8099 	bne.w	8001c42 <HAL_ADC_Init+0x18e>
 8001b10:	7dfb      	ldrb	r3, [r7, #23]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f040 8095 	bne.w	8001c42 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b20:	f023 0302 	bic.w	r3, r3, #2
 8001b24:	f043 0202 	orr.w	r2, r3, #2
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b34:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	7b1b      	ldrb	r3, [r3, #12]
 8001b3a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b3c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b4c:	d003      	beq.n	8001b56 <HAL_ADC_Init+0xa2>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d102      	bne.n	8001b5c <HAL_ADC_Init+0xa8>
 8001b56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b5a:	e000      	b.n	8001b5e <HAL_ADC_Init+0xaa>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	7d1b      	ldrb	r3, [r3, #20]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d119      	bne.n	8001ba0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	7b1b      	ldrb	r3, [r3, #12]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d109      	bne.n	8001b88 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	035a      	lsls	r2, r3, #13
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	e00b      	b.n	8001ba0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8c:	f043 0220 	orr.w	r2, r3, #32
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b98:	f043 0201 	orr.w	r2, r3, #1
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	4b28      	ldr	r3, [pc, #160]	; (8001c5c <HAL_ADC_Init+0x1a8>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	68b9      	ldr	r1, [r7, #8]
 8001bc4:	430b      	orrs	r3, r1
 8001bc6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bd0:	d003      	beq.n	8001bda <HAL_ADC_Init+0x126>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d104      	bne.n	8001be4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	051b      	lsls	r3, r3, #20
 8001be2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <HAL_ADC_Init+0x1ac>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d10b      	bne.n	8001c20 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c12:	f023 0303 	bic.w	r3, r3, #3
 8001c16:	f043 0201 	orr.w	r2, r3, #1
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c1e:	e018      	b.n	8001c52 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c24:	f023 0312 	bic.w	r3, r3, #18
 8001c28:	f043 0210 	orr.w	r2, r3, #16
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c34:	f043 0201 	orr.w	r2, r3, #1
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c40:	e007      	b.n	8001c52 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c46:	f043 0210 	orr.w	r2, r3, #16
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	ffe1f7fd 	.word	0xffe1f7fd
 8001c60:	ff1f0efe 	.word	0xff1f0efe

08001c64 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c70:	2300      	movs	r3, #0
 8001c72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a64      	ldr	r2, [pc, #400]	; (8001e0c <HAL_ADC_Start_DMA+0x1a8>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d004      	beq.n	8001c88 <HAL_ADC_Start_DMA+0x24>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a63      	ldr	r2, [pc, #396]	; (8001e10 <HAL_ADC_Start_DMA+0x1ac>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d106      	bne.n	8001c96 <HAL_ADC_Start_DMA+0x32>
 8001c88:	4b60      	ldr	r3, [pc, #384]	; (8001e0c <HAL_ADC_Start_DMA+0x1a8>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f040 80b3 	bne.w	8001dfc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d101      	bne.n	8001ca4 <HAL_ADC_Start_DMA+0x40>
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e0ae      	b.n	8001e02 <HAL_ADC_Start_DMA+0x19e>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 f9c1 	bl	8002034 <ADC_Enable>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001cb6:	7dfb      	ldrb	r3, [r7, #23]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f040 809a 	bne.w	8001df2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cc6:	f023 0301 	bic.w	r3, r3, #1
 8001cca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a4e      	ldr	r2, [pc, #312]	; (8001e10 <HAL_ADC_Start_DMA+0x1ac>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d105      	bne.n	8001ce8 <HAL_ADC_Start_DMA+0x84>
 8001cdc:	4b4b      	ldr	r3, [pc, #300]	; (8001e0c <HAL_ADC_Start_DMA+0x1a8>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d115      	bne.n	8001d14 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d026      	beq.n	8001d50 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d06:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d0a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d12:	e01d      	b.n	8001d50 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d18:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a39      	ldr	r2, [pc, #228]	; (8001e0c <HAL_ADC_Start_DMA+0x1a8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d004      	beq.n	8001d34 <HAL_ADC_Start_DMA+0xd0>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a38      	ldr	r2, [pc, #224]	; (8001e10 <HAL_ADC_Start_DMA+0x1ac>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d10d      	bne.n	8001d50 <HAL_ADC_Start_DMA+0xec>
 8001d34:	4b35      	ldr	r3, [pc, #212]	; (8001e0c <HAL_ADC_Start_DMA+0x1a8>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d007      	beq.n	8001d50 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d48:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d006      	beq.n	8001d6a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d60:	f023 0206 	bic.w	r2, r3, #6
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d68:	e002      	b.n	8001d70 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	4a25      	ldr	r2, [pc, #148]	; (8001e14 <HAL_ADC_Start_DMA+0x1b0>)
 8001d7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	4a24      	ldr	r2, [pc, #144]	; (8001e18 <HAL_ADC_Start_DMA+0x1b4>)
 8001d86:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	4a23      	ldr	r2, [pc, #140]	; (8001e1c <HAL_ADC_Start_DMA+0x1b8>)
 8001d8e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f06f 0202 	mvn.w	r2, #2
 8001d98:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001da8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6a18      	ldr	r0, [r3, #32]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	334c      	adds	r3, #76	; 0x4c
 8001db4:	4619      	mov	r1, r3
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f000 fc31 	bl	8002620 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001dc8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001dcc:	d108      	bne.n	8001de0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001ddc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001dde:	e00f      	b.n	8001e00 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001dee:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001df0:	e006      	b.n	8001e00 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001dfa:	e001      	b.n	8001e00 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40012400 	.word	0x40012400
 8001e10:	40012800 	.word	0x40012800
 8001e14:	0800214d 	.word	0x0800214d
 8001e18:	080021c9 	.word	0x080021c9
 8001e1c:	080021e5 	.word	0x080021e5

08001e20 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr

08001e32 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr

08001e44 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d101      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x20>
 8001e60:	2302      	movs	r3, #2
 8001e62:	e0dc      	b.n	800201e <HAL_ADC_ConfigChannel+0x1da>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b06      	cmp	r3, #6
 8001e72:	d81c      	bhi.n	8001eae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	3b05      	subs	r3, #5
 8001e86:	221f      	movs	r2, #31
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	4019      	ands	r1, r3
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	6818      	ldr	r0, [r3, #0]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3b05      	subs	r3, #5
 8001ea0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	635a      	str	r2, [r3, #52]	; 0x34
 8001eac:	e03c      	b.n	8001f28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b0c      	cmp	r3, #12
 8001eb4:	d81c      	bhi.n	8001ef0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	3b23      	subs	r3, #35	; 0x23
 8001ec8:	221f      	movs	r2, #31
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	4019      	ands	r1, r3
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	6818      	ldr	r0, [r3, #0]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	3b23      	subs	r3, #35	; 0x23
 8001ee2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	631a      	str	r2, [r3, #48]	; 0x30
 8001eee:	e01b      	b.n	8001f28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	3b41      	subs	r3, #65	; 0x41
 8001f02:	221f      	movs	r2, #31
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	4019      	ands	r1, r3
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	6818      	ldr	r0, [r3, #0]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	4613      	mov	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	3b41      	subs	r3, #65	; 0x41
 8001f1c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b09      	cmp	r3, #9
 8001f2e:	d91c      	bls.n	8001f6a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68d9      	ldr	r1, [r3, #12]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	4413      	add	r3, r2
 8001f40:	3b1e      	subs	r3, #30
 8001f42:	2207      	movs	r2, #7
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	4019      	ands	r1, r3
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	6898      	ldr	r0, [r3, #8]
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4613      	mov	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4413      	add	r3, r2
 8001f5a:	3b1e      	subs	r3, #30
 8001f5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	60da      	str	r2, [r3, #12]
 8001f68:	e019      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6919      	ldr	r1, [r3, #16]
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4613      	mov	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4413      	add	r3, r2
 8001f7a:	2207      	movs	r2, #7
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	4019      	ands	r1, r3
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	6898      	ldr	r0, [r3, #8]
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4413      	add	r3, r2
 8001f92:	fa00 f203 	lsl.w	r2, r0, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2b10      	cmp	r3, #16
 8001fa4:	d003      	beq.n	8001fae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001faa:	2b11      	cmp	r3, #17
 8001fac:	d132      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a1d      	ldr	r2, [pc, #116]	; (8002028 <HAL_ADC_ConfigChannel+0x1e4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d125      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d126      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001fd4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b10      	cmp	r3, #16
 8001fdc:	d11a      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fde:	4b13      	ldr	r3, [pc, #76]	; (800202c <HAL_ADC_ConfigChannel+0x1e8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a13      	ldr	r2, [pc, #76]	; (8002030 <HAL_ADC_ConfigChannel+0x1ec>)
 8001fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe8:	0c9a      	lsrs	r2, r3, #18
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ff4:	e002      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f9      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x1b2>
 8002002:	e007      	b.n	8002014 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002008:	f043 0220 	orr.w	r2, r3, #32
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800201c:	7bfb      	ldrb	r3, [r7, #15]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr
 8002028:	40012400 	.word	0x40012400
 800202c:	20000000 	.word	0x20000000
 8002030:	431bde83 	.word	0x431bde83

08002034 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800203c:	2300      	movs	r3, #0
 800203e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002040:	2300      	movs	r3, #0
 8002042:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b01      	cmp	r3, #1
 8002050:	d039      	beq.n	80020c6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f042 0201 	orr.w	r2, r2, #1
 8002060:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002062:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <ADC_Enable+0x9c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a1b      	ldr	r2, [pc, #108]	; (80020d4 <ADC_Enable+0xa0>)
 8002068:	fba2 2303 	umull	r2, r3, r2, r3
 800206c:	0c9b      	lsrs	r3, r3, #18
 800206e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002070:	e002      	b.n	8002078 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	3b01      	subs	r3, #1
 8002076:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f9      	bne.n	8002072 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800207e:	f7ff fceb 	bl	8001a58 <HAL_GetTick>
 8002082:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002084:	e018      	b.n	80020b8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002086:	f7ff fce7 	bl	8001a58 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d911      	bls.n	80020b8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002098:	f043 0210 	orr.w	r2, r3, #16
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a4:	f043 0201 	orr.w	r2, r3, #1
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e007      	b.n	80020c8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d1df      	bne.n	8002086 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20000000 	.word	0x20000000
 80020d4:	431bde83 	.word	0x431bde83

080020d8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d127      	bne.n	8002142 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0201 	bic.w	r2, r2, #1
 8002100:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002102:	f7ff fca9 	bl	8001a58 <HAL_GetTick>
 8002106:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002108:	e014      	b.n	8002134 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800210a:	f7ff fca5 	bl	8001a58 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d90d      	bls.n	8002134 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211c:	f043 0210 	orr.w	r2, r3, #16
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002128:	f043 0201 	orr.w	r2, r3, #1
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e007      	b.n	8002144 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b01      	cmp	r3, #1
 8002140:	d0e3      	beq.n	800210a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002162:	2b00      	cmp	r3, #0
 8002164:	d127      	bne.n	80021b6 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800217c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002180:	d115      	bne.n	80021ae <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002186:	2b00      	cmp	r3, #0
 8002188:	d111      	bne.n	80021ae <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d105      	bne.n	80021ae <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a6:	f043 0201 	orr.w	r2, r3, #1
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f7ff f93e 	bl	8001430 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80021b4:	e004      	b.n	80021c0 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	4798      	blx	r3
}
 80021c0:	bf00      	nop
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f7ff fe22 	bl	8001e20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021dc:	bf00      	nop
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002202:	f043 0204 	orr.w	r2, r3, #4
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f7ff fe11 	bl	8001e32 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002210:	bf00      	nop
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002218:	b590      	push	{r4, r7, lr}
 800221a:	b087      	sub	sp, #28
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002220:	2300      	movs	r3, #0
 8002222:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800222e:	2b01      	cmp	r3, #1
 8002230:	d101      	bne.n	8002236 <HAL_ADCEx_Calibration_Start+0x1e>
 8002232:	2302      	movs	r3, #2
 8002234:	e086      	b.n	8002344 <HAL_ADCEx_Calibration_Start+0x12c>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff ff4a 	bl	80020d8 <ADC_ConversionStop_Disable>
 8002244:	4603      	mov	r3, r0
 8002246:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002248:	7dfb      	ldrb	r3, [r7, #23]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d175      	bne.n	800233a <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002252:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002256:	f023 0302 	bic.w	r3, r3, #2
 800225a:	f043 0202 	orr.w	r2, r3, #2
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002262:	4b3a      	ldr	r3, [pc, #232]	; (800234c <HAL_ADCEx_Calibration_Start+0x134>)
 8002264:	681c      	ldr	r4, [r3, #0]
 8002266:	2002      	movs	r0, #2
 8002268:	f001 fe0c 	bl	8003e84 <HAL_RCCEx_GetPeriphCLKFreq>
 800226c:	4603      	mov	r3, r0
 800226e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002272:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002274:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002276:	e002      	b.n	800227e <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	3b01      	subs	r3, #1
 800227c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1f9      	bne.n	8002278 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff fed5 	bl	8002034 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 0208 	orr.w	r2, r2, #8
 8002298:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800229a:	f7ff fbdd 	bl	8001a58 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80022a0:	e014      	b.n	80022cc <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80022a2:	f7ff fbd9 	bl	8001a58 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b0a      	cmp	r3, #10
 80022ae:	d90d      	bls.n	80022cc <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	f023 0312 	bic.w	r3, r3, #18
 80022b8:	f043 0210 	orr.w	r2, r3, #16
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e03b      	b.n	8002344 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1e3      	bne.n	80022a2 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f042 0204 	orr.w	r2, r2, #4
 80022e8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80022ea:	f7ff fbb5 	bl	8001a58 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80022f0:	e014      	b.n	800231c <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80022f2:	f7ff fbb1 	bl	8001a58 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b0a      	cmp	r3, #10
 80022fe:	d90d      	bls.n	800231c <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002304:	f023 0312 	bic.w	r3, r3, #18
 8002308:	f043 0210 	orr.w	r2, r3, #16
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e013      	b.n	8002344 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 0304 	and.w	r3, r3, #4
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1e3      	bne.n	80022f2 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232e:	f023 0303 	bic.w	r3, r3, #3
 8002332:	f043 0201 	orr.w	r2, r3, #1
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002342:	7dfb      	ldrb	r3, [r7, #23]
}
 8002344:	4618      	mov	r0, r3
 8002346:	371c      	adds	r7, #28
 8002348:	46bd      	mov	sp, r7
 800234a:	bd90      	pop	{r4, r7, pc}
 800234c:	20000000 	.word	0x20000000

08002350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <__NVIC_SetPriorityGrouping+0x44>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800236c:	4013      	ands	r3, r2
 800236e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002378:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800237c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002382:	4a04      	ldr	r2, [pc, #16]	; (8002394 <__NVIC_SetPriorityGrouping+0x44>)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	60d3      	str	r3, [r2, #12]
}
 8002388:	bf00      	nop
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800239c:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <__NVIC_GetPriorityGrouping+0x18>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	0a1b      	lsrs	r3, r3, #8
 80023a2:	f003 0307 	and.w	r3, r3, #7
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	db0b      	blt.n	80023de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	f003 021f 	and.w	r2, r3, #31
 80023cc:	4906      	ldr	r1, [pc, #24]	; (80023e8 <__NVIC_EnableIRQ+0x34>)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	2001      	movs	r0, #1
 80023d6:	fa00 f202 	lsl.w	r2, r0, r2
 80023da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	e000e100 	.word	0xe000e100

080023ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	6039      	str	r1, [r7, #0]
 80023f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	db0a      	blt.n	8002416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	b2da      	uxtb	r2, r3
 8002404:	490c      	ldr	r1, [pc, #48]	; (8002438 <__NVIC_SetPriority+0x4c>)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	0112      	lsls	r2, r2, #4
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	440b      	add	r3, r1
 8002410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002414:	e00a      	b.n	800242c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4908      	ldr	r1, [pc, #32]	; (800243c <__NVIC_SetPriority+0x50>)
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	3b04      	subs	r3, #4
 8002424:	0112      	lsls	r2, r2, #4
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	440b      	add	r3, r1
 800242a:	761a      	strb	r2, [r3, #24]
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	e000e100 	.word	0xe000e100
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002440:	b480      	push	{r7}
 8002442:	b089      	sub	sp, #36	; 0x24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f1c3 0307 	rsb	r3, r3, #7
 800245a:	2b04      	cmp	r3, #4
 800245c:	bf28      	it	cs
 800245e:	2304      	movcs	r3, #4
 8002460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3304      	adds	r3, #4
 8002466:	2b06      	cmp	r3, #6
 8002468:	d902      	bls.n	8002470 <NVIC_EncodePriority+0x30>
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3b03      	subs	r3, #3
 800246e:	e000      	b.n	8002472 <NVIC_EncodePriority+0x32>
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002474:	f04f 32ff 	mov.w	r2, #4294967295
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43da      	mvns	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	401a      	ands	r2, r3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002488:	f04f 31ff 	mov.w	r1, #4294967295
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	fa01 f303 	lsl.w	r3, r1, r3
 8002492:	43d9      	mvns	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002498:	4313      	orrs	r3, r2
         );
}
 800249a:	4618      	mov	r0, r3
 800249c:	3724      	adds	r7, #36	; 0x24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024b4:	d301      	bcc.n	80024ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024b6:	2301      	movs	r3, #1
 80024b8:	e00f      	b.n	80024da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ba:	4a0a      	ldr	r2, [pc, #40]	; (80024e4 <SysTick_Config+0x40>)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3b01      	subs	r3, #1
 80024c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024c2:	210f      	movs	r1, #15
 80024c4:	f04f 30ff 	mov.w	r0, #4294967295
 80024c8:	f7ff ff90 	bl	80023ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <SysTick_Config+0x40>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024d2:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <SysTick_Config+0x40>)
 80024d4:	2207      	movs	r2, #7
 80024d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	e000e010 	.word	0xe000e010

080024e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff ff2d 	bl	8002350 <__NVIC_SetPriorityGrouping>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024fe:	b580      	push	{r7, lr}
 8002500:	b086      	sub	sp, #24
 8002502:	af00      	add	r7, sp, #0
 8002504:	4603      	mov	r3, r0
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
 800250a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002510:	f7ff ff42 	bl	8002398 <__NVIC_GetPriorityGrouping>
 8002514:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	68b9      	ldr	r1, [r7, #8]
 800251a:	6978      	ldr	r0, [r7, #20]
 800251c:	f7ff ff90 	bl	8002440 <NVIC_EncodePriority>
 8002520:	4602      	mov	r2, r0
 8002522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002526:	4611      	mov	r1, r2
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff5f 	bl	80023ec <__NVIC_SetPriority>
}
 800252e:	bf00      	nop
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	4603      	mov	r3, r0
 800253e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ff35 	bl	80023b4 <__NVIC_EnableIRQ>
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff ffa2 	bl	80024a4 <SysTick_Config>
 8002560:	4603      	mov	r3, r0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e043      	b.n	800260a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	4b22      	ldr	r3, [pc, #136]	; (8002614 <HAL_DMA_Init+0xa8>)
 800258a:	4413      	add	r3, r2
 800258c:	4a22      	ldr	r2, [pc, #136]	; (8002618 <HAL_DMA_Init+0xac>)
 800258e:	fba2 2303 	umull	r2, r3, r2, r3
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	009a      	lsls	r2, r3, #2
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a1f      	ldr	r2, [pc, #124]	; (800261c <HAL_DMA_Init+0xb0>)
 800259e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2202      	movs	r2, #2
 80025a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80025b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80025ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80025c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr
 8002614:	bffdfff8 	.word	0xbffdfff8
 8002618:	cccccccd 	.word	0xcccccccd
 800261c:	40020000 	.word	0x40020000

08002620 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
 800262c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d101      	bne.n	8002640 <HAL_DMA_Start_IT+0x20>
 800263c:	2302      	movs	r3, #2
 800263e:	e04a      	b.n	80026d6 <HAL_DMA_Start_IT+0xb6>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800264e:	2b01      	cmp	r3, #1
 8002650:	d13a      	bne.n	80026c8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2202      	movs	r2, #2
 8002656:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0201 	bic.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68b9      	ldr	r1, [r7, #8]
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 f938 	bl	80028ec <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002680:	2b00      	cmp	r3, #0
 8002682:	d008      	beq.n	8002696 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 020e 	orr.w	r2, r2, #14
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	e00f      	b.n	80026b6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0204 	bic.w	r2, r2, #4
 80026a4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f042 020a 	orr.w	r2, r2, #10
 80026b4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f042 0201 	orr.w	r2, r2, #1
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	e005      	b.n	80026d4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80026d0:	2302      	movs	r3, #2
 80026d2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80026d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	2204      	movs	r2, #4
 80026fe:	409a      	lsls	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4013      	ands	r3, r2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d04f      	beq.n	80027a8 <HAL_DMA_IRQHandler+0xc8>
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f003 0304 	and.w	r3, r3, #4
 800270e:	2b00      	cmp	r3, #0
 8002710:	d04a      	beq.n	80027a8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0320 	and.w	r3, r3, #32
 800271c:	2b00      	cmp	r3, #0
 800271e:	d107      	bne.n	8002730 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 0204 	bic.w	r2, r2, #4
 800272e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a66      	ldr	r2, [pc, #408]	; (80028d0 <HAL_DMA_IRQHandler+0x1f0>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d029      	beq.n	800278e <HAL_DMA_IRQHandler+0xae>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a65      	ldr	r2, [pc, #404]	; (80028d4 <HAL_DMA_IRQHandler+0x1f4>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d022      	beq.n	800278a <HAL_DMA_IRQHandler+0xaa>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a63      	ldr	r2, [pc, #396]	; (80028d8 <HAL_DMA_IRQHandler+0x1f8>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d01a      	beq.n	8002784 <HAL_DMA_IRQHandler+0xa4>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a62      	ldr	r2, [pc, #392]	; (80028dc <HAL_DMA_IRQHandler+0x1fc>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d012      	beq.n	800277e <HAL_DMA_IRQHandler+0x9e>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a60      	ldr	r2, [pc, #384]	; (80028e0 <HAL_DMA_IRQHandler+0x200>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d00a      	beq.n	8002778 <HAL_DMA_IRQHandler+0x98>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a5f      	ldr	r2, [pc, #380]	; (80028e4 <HAL_DMA_IRQHandler+0x204>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d102      	bne.n	8002772 <HAL_DMA_IRQHandler+0x92>
 800276c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002770:	e00e      	b.n	8002790 <HAL_DMA_IRQHandler+0xb0>
 8002772:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002776:	e00b      	b.n	8002790 <HAL_DMA_IRQHandler+0xb0>
 8002778:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800277c:	e008      	b.n	8002790 <HAL_DMA_IRQHandler+0xb0>
 800277e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002782:	e005      	b.n	8002790 <HAL_DMA_IRQHandler+0xb0>
 8002784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002788:	e002      	b.n	8002790 <HAL_DMA_IRQHandler+0xb0>
 800278a:	2340      	movs	r3, #64	; 0x40
 800278c:	e000      	b.n	8002790 <HAL_DMA_IRQHandler+0xb0>
 800278e:	2304      	movs	r3, #4
 8002790:	4a55      	ldr	r2, [pc, #340]	; (80028e8 <HAL_DMA_IRQHandler+0x208>)
 8002792:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 8094 	beq.w	80028c6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80027a6:	e08e      	b.n	80028c6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	2202      	movs	r2, #2
 80027ae:	409a      	lsls	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4013      	ands	r3, r2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d056      	beq.n	8002866 <HAL_DMA_IRQHandler+0x186>
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d051      	beq.n	8002866 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0320 	and.w	r3, r3, #32
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10b      	bne.n	80027e8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 020a 	bic.w	r2, r2, #10
 80027de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a38      	ldr	r2, [pc, #224]	; (80028d0 <HAL_DMA_IRQHandler+0x1f0>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d029      	beq.n	8002846 <HAL_DMA_IRQHandler+0x166>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a37      	ldr	r2, [pc, #220]	; (80028d4 <HAL_DMA_IRQHandler+0x1f4>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d022      	beq.n	8002842 <HAL_DMA_IRQHandler+0x162>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a35      	ldr	r2, [pc, #212]	; (80028d8 <HAL_DMA_IRQHandler+0x1f8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d01a      	beq.n	800283c <HAL_DMA_IRQHandler+0x15c>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a34      	ldr	r2, [pc, #208]	; (80028dc <HAL_DMA_IRQHandler+0x1fc>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d012      	beq.n	8002836 <HAL_DMA_IRQHandler+0x156>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a32      	ldr	r2, [pc, #200]	; (80028e0 <HAL_DMA_IRQHandler+0x200>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d00a      	beq.n	8002830 <HAL_DMA_IRQHandler+0x150>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a31      	ldr	r2, [pc, #196]	; (80028e4 <HAL_DMA_IRQHandler+0x204>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d102      	bne.n	800282a <HAL_DMA_IRQHandler+0x14a>
 8002824:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002828:	e00e      	b.n	8002848 <HAL_DMA_IRQHandler+0x168>
 800282a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800282e:	e00b      	b.n	8002848 <HAL_DMA_IRQHandler+0x168>
 8002830:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002834:	e008      	b.n	8002848 <HAL_DMA_IRQHandler+0x168>
 8002836:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800283a:	e005      	b.n	8002848 <HAL_DMA_IRQHandler+0x168>
 800283c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002840:	e002      	b.n	8002848 <HAL_DMA_IRQHandler+0x168>
 8002842:	2320      	movs	r3, #32
 8002844:	e000      	b.n	8002848 <HAL_DMA_IRQHandler+0x168>
 8002846:	2302      	movs	r3, #2
 8002848:	4a27      	ldr	r2, [pc, #156]	; (80028e8 <HAL_DMA_IRQHandler+0x208>)
 800284a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002858:	2b00      	cmp	r3, #0
 800285a:	d034      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002864:	e02f      	b.n	80028c6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	2208      	movs	r2, #8
 800286c:	409a      	lsls	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4013      	ands	r3, r2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d028      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x1e8>
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b00      	cmp	r3, #0
 800287e:	d023      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 020e 	bic.w	r2, r2, #14
 800288e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002898:	2101      	movs	r1, #1
 800289a:	fa01 f202 	lsl.w	r2, r1, r2
 800289e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d004      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	4798      	blx	r3
    }
  }
  return;
 80028c6:	bf00      	nop
 80028c8:	bf00      	nop
}
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40020008 	.word	0x40020008
 80028d4:	4002001c 	.word	0x4002001c
 80028d8:	40020030 	.word	0x40020030
 80028dc:	40020044 	.word	0x40020044
 80028e0:	40020058 	.word	0x40020058
 80028e4:	4002006c 	.word	0x4002006c
 80028e8:	40020000 	.word	0x40020000

080028ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
 80028f8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002902:	2101      	movs	r1, #1
 8002904:	fa01 f202 	lsl.w	r2, r1, r2
 8002908:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b10      	cmp	r3, #16
 8002918:	d108      	bne.n	800292c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800292a:	e007      	b.n	800293c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	60da      	str	r2, [r3, #12]
}
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr
	...

08002948 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002948:	b480      	push	{r7}
 800294a:	b08b      	sub	sp, #44	; 0x2c
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002952:	2300      	movs	r3, #0
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002956:	2300      	movs	r3, #0
 8002958:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800295a:	e169      	b.n	8002c30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800295c:	2201      	movs	r2, #1
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	69fa      	ldr	r2, [r7, #28]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	429a      	cmp	r2, r3
 8002976:	f040 8158 	bne.w	8002c2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	4a9a      	ldr	r2, [pc, #616]	; (8002be8 <HAL_GPIO_Init+0x2a0>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d05e      	beq.n	8002a42 <HAL_GPIO_Init+0xfa>
 8002984:	4a98      	ldr	r2, [pc, #608]	; (8002be8 <HAL_GPIO_Init+0x2a0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d875      	bhi.n	8002a76 <HAL_GPIO_Init+0x12e>
 800298a:	4a98      	ldr	r2, [pc, #608]	; (8002bec <HAL_GPIO_Init+0x2a4>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d058      	beq.n	8002a42 <HAL_GPIO_Init+0xfa>
 8002990:	4a96      	ldr	r2, [pc, #600]	; (8002bec <HAL_GPIO_Init+0x2a4>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d86f      	bhi.n	8002a76 <HAL_GPIO_Init+0x12e>
 8002996:	4a96      	ldr	r2, [pc, #600]	; (8002bf0 <HAL_GPIO_Init+0x2a8>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d052      	beq.n	8002a42 <HAL_GPIO_Init+0xfa>
 800299c:	4a94      	ldr	r2, [pc, #592]	; (8002bf0 <HAL_GPIO_Init+0x2a8>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d869      	bhi.n	8002a76 <HAL_GPIO_Init+0x12e>
 80029a2:	4a94      	ldr	r2, [pc, #592]	; (8002bf4 <HAL_GPIO_Init+0x2ac>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d04c      	beq.n	8002a42 <HAL_GPIO_Init+0xfa>
 80029a8:	4a92      	ldr	r2, [pc, #584]	; (8002bf4 <HAL_GPIO_Init+0x2ac>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d863      	bhi.n	8002a76 <HAL_GPIO_Init+0x12e>
 80029ae:	4a92      	ldr	r2, [pc, #584]	; (8002bf8 <HAL_GPIO_Init+0x2b0>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d046      	beq.n	8002a42 <HAL_GPIO_Init+0xfa>
 80029b4:	4a90      	ldr	r2, [pc, #576]	; (8002bf8 <HAL_GPIO_Init+0x2b0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d85d      	bhi.n	8002a76 <HAL_GPIO_Init+0x12e>
 80029ba:	2b12      	cmp	r3, #18
 80029bc:	d82a      	bhi.n	8002a14 <HAL_GPIO_Init+0xcc>
 80029be:	2b12      	cmp	r3, #18
 80029c0:	d859      	bhi.n	8002a76 <HAL_GPIO_Init+0x12e>
 80029c2:	a201      	add	r2, pc, #4	; (adr r2, 80029c8 <HAL_GPIO_Init+0x80>)
 80029c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c8:	08002a43 	.word	0x08002a43
 80029cc:	08002a1d 	.word	0x08002a1d
 80029d0:	08002a2f 	.word	0x08002a2f
 80029d4:	08002a71 	.word	0x08002a71
 80029d8:	08002a77 	.word	0x08002a77
 80029dc:	08002a77 	.word	0x08002a77
 80029e0:	08002a77 	.word	0x08002a77
 80029e4:	08002a77 	.word	0x08002a77
 80029e8:	08002a77 	.word	0x08002a77
 80029ec:	08002a77 	.word	0x08002a77
 80029f0:	08002a77 	.word	0x08002a77
 80029f4:	08002a77 	.word	0x08002a77
 80029f8:	08002a77 	.word	0x08002a77
 80029fc:	08002a77 	.word	0x08002a77
 8002a00:	08002a77 	.word	0x08002a77
 8002a04:	08002a77 	.word	0x08002a77
 8002a08:	08002a77 	.word	0x08002a77
 8002a0c:	08002a25 	.word	0x08002a25
 8002a10:	08002a39 	.word	0x08002a39
 8002a14:	4a79      	ldr	r2, [pc, #484]	; (8002bfc <HAL_GPIO_Init+0x2b4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d013      	beq.n	8002a42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a1a:	e02c      	b.n	8002a76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	623b      	str	r3, [r7, #32]
          break;
 8002a22:	e029      	b.n	8002a78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	3304      	adds	r3, #4
 8002a2a:	623b      	str	r3, [r7, #32]
          break;
 8002a2c:	e024      	b.n	8002a78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	3308      	adds	r3, #8
 8002a34:	623b      	str	r3, [r7, #32]
          break;
 8002a36:	e01f      	b.n	8002a78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	330c      	adds	r3, #12
 8002a3e:	623b      	str	r3, [r7, #32]
          break;
 8002a40:	e01a      	b.n	8002a78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d102      	bne.n	8002a50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a4a:	2304      	movs	r3, #4
 8002a4c:	623b      	str	r3, [r7, #32]
          break;
 8002a4e:	e013      	b.n	8002a78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d105      	bne.n	8002a64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a58:	2308      	movs	r3, #8
 8002a5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69fa      	ldr	r2, [r7, #28]
 8002a60:	611a      	str	r2, [r3, #16]
          break;
 8002a62:	e009      	b.n	8002a78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a64:	2308      	movs	r3, #8
 8002a66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	69fa      	ldr	r2, [r7, #28]
 8002a6c:	615a      	str	r2, [r3, #20]
          break;
 8002a6e:	e003      	b.n	8002a78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a70:	2300      	movs	r3, #0
 8002a72:	623b      	str	r3, [r7, #32]
          break;
 8002a74:	e000      	b.n	8002a78 <HAL_GPIO_Init+0x130>
          break;
 8002a76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	2bff      	cmp	r3, #255	; 0xff
 8002a7c:	d801      	bhi.n	8002a82 <HAL_GPIO_Init+0x13a>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	e001      	b.n	8002a86 <HAL_GPIO_Init+0x13e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3304      	adds	r3, #4
 8002a86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	2bff      	cmp	r3, #255	; 0xff
 8002a8c:	d802      	bhi.n	8002a94 <HAL_GPIO_Init+0x14c>
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	e002      	b.n	8002a9a <HAL_GPIO_Init+0x152>
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	3b08      	subs	r3, #8
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	210f      	movs	r1, #15
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	401a      	ands	r2, r3
 8002aac:	6a39      	ldr	r1, [r7, #32]
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 80b1 	beq.w	8002c2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ac8:	4b4d      	ldr	r3, [pc, #308]	; (8002c00 <HAL_GPIO_Init+0x2b8>)
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	4a4c      	ldr	r2, [pc, #304]	; (8002c00 <HAL_GPIO_Init+0x2b8>)
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	6193      	str	r3, [r2, #24]
 8002ad4:	4b4a      	ldr	r3, [pc, #296]	; (8002c00 <HAL_GPIO_Init+0x2b8>)
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ae0:	4a48      	ldr	r2, [pc, #288]	; (8002c04 <HAL_GPIO_Init+0x2bc>)
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	089b      	lsrs	r3, r3, #2
 8002ae6:	3302      	adds	r3, #2
 8002ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	220f      	movs	r2, #15
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	4013      	ands	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a40      	ldr	r2, [pc, #256]	; (8002c08 <HAL_GPIO_Init+0x2c0>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d013      	beq.n	8002b34 <HAL_GPIO_Init+0x1ec>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a3f      	ldr	r2, [pc, #252]	; (8002c0c <HAL_GPIO_Init+0x2c4>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d00d      	beq.n	8002b30 <HAL_GPIO_Init+0x1e8>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a3e      	ldr	r2, [pc, #248]	; (8002c10 <HAL_GPIO_Init+0x2c8>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d007      	beq.n	8002b2c <HAL_GPIO_Init+0x1e4>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a3d      	ldr	r2, [pc, #244]	; (8002c14 <HAL_GPIO_Init+0x2cc>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d101      	bne.n	8002b28 <HAL_GPIO_Init+0x1e0>
 8002b24:	2303      	movs	r3, #3
 8002b26:	e006      	b.n	8002b36 <HAL_GPIO_Init+0x1ee>
 8002b28:	2304      	movs	r3, #4
 8002b2a:	e004      	b.n	8002b36 <HAL_GPIO_Init+0x1ee>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	e002      	b.n	8002b36 <HAL_GPIO_Init+0x1ee>
 8002b30:	2301      	movs	r3, #1
 8002b32:	e000      	b.n	8002b36 <HAL_GPIO_Init+0x1ee>
 8002b34:	2300      	movs	r3, #0
 8002b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b38:	f002 0203 	and.w	r2, r2, #3
 8002b3c:	0092      	lsls	r2, r2, #2
 8002b3e:	4093      	lsls	r3, r2
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b46:	492f      	ldr	r1, [pc, #188]	; (8002c04 <HAL_GPIO_Init+0x2bc>)
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	089b      	lsrs	r3, r3, #2
 8002b4c:	3302      	adds	r3, #2
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d006      	beq.n	8002b6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b60:	4b2d      	ldr	r3, [pc, #180]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	492c      	ldr	r1, [pc, #176]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	600b      	str	r3, [r1, #0]
 8002b6c:	e006      	b.n	8002b7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b6e:	4b2a      	ldr	r3, [pc, #168]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	4928      	ldr	r1, [pc, #160]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d006      	beq.n	8002b96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b88:	4b23      	ldr	r3, [pc, #140]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	4922      	ldr	r1, [pc, #136]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	604b      	str	r3, [r1, #4]
 8002b94:	e006      	b.n	8002ba4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b96:	4b20      	ldr	r3, [pc, #128]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	491e      	ldr	r1, [pc, #120]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d006      	beq.n	8002bbe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bb0:	4b19      	ldr	r3, [pc, #100]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	4918      	ldr	r1, [pc, #96]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	608b      	str	r3, [r1, #8]
 8002bbc:	e006      	b.n	8002bcc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bbe:	4b16      	ldr	r3, [pc, #88]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	4914      	ldr	r1, [pc, #80]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d021      	beq.n	8002c1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bd8:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	490e      	ldr	r1, [pc, #56]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60cb      	str	r3, [r1, #12]
 8002be4:	e021      	b.n	8002c2a <HAL_GPIO_Init+0x2e2>
 8002be6:	bf00      	nop
 8002be8:	10320000 	.word	0x10320000
 8002bec:	10310000 	.word	0x10310000
 8002bf0:	10220000 	.word	0x10220000
 8002bf4:	10210000 	.word	0x10210000
 8002bf8:	10120000 	.word	0x10120000
 8002bfc:	10110000 	.word	0x10110000
 8002c00:	40021000 	.word	0x40021000
 8002c04:	40010000 	.word	0x40010000
 8002c08:	40010800 	.word	0x40010800
 8002c0c:	40010c00 	.word	0x40010c00
 8002c10:	40011000 	.word	0x40011000
 8002c14:	40011400 	.word	0x40011400
 8002c18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <HAL_GPIO_Init+0x304>)
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	43db      	mvns	r3, r3
 8002c24:	4909      	ldr	r1, [pc, #36]	; (8002c4c <HAL_GPIO_Init+0x304>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f47f ae8e 	bne.w	800295c <HAL_GPIO_Init+0x14>
  }
}
 8002c40:	bf00      	nop
 8002c42:	bf00      	nop
 8002c44:	372c      	adds	r7, #44	; 0x2c
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr
 8002c4c:	40010400 	.word	0x40010400

08002c50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e12b      	b.n	8002eba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d106      	bne.n	8002c7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7fe fd3a 	bl	80016f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2224      	movs	r2, #36	; 0x24
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 0201 	bic.w	r2, r2, #1
 8002c92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ca2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cb4:	f000 ffea 	bl	8003c8c <HAL_RCC_GetPCLK1Freq>
 8002cb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	4a81      	ldr	r2, [pc, #516]	; (8002ec4 <HAL_I2C_Init+0x274>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d807      	bhi.n	8002cd4 <HAL_I2C_Init+0x84>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4a80      	ldr	r2, [pc, #512]	; (8002ec8 <HAL_I2C_Init+0x278>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	bf94      	ite	ls
 8002ccc:	2301      	movls	r3, #1
 8002cce:	2300      	movhi	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	e006      	b.n	8002ce2 <HAL_I2C_Init+0x92>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4a7d      	ldr	r2, [pc, #500]	; (8002ecc <HAL_I2C_Init+0x27c>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	bf94      	ite	ls
 8002cdc:	2301      	movls	r3, #1
 8002cde:	2300      	movhi	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e0e7      	b.n	8002eba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4a78      	ldr	r2, [pc, #480]	; (8002ed0 <HAL_I2C_Init+0x280>)
 8002cee:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf2:	0c9b      	lsrs	r3, r3, #18
 8002cf4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	4a6a      	ldr	r2, [pc, #424]	; (8002ec4 <HAL_I2C_Init+0x274>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d802      	bhi.n	8002d24 <HAL_I2C_Init+0xd4>
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	3301      	adds	r3, #1
 8002d22:	e009      	b.n	8002d38 <HAL_I2C_Init+0xe8>
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d2a:	fb02 f303 	mul.w	r3, r2, r3
 8002d2e:	4a69      	ldr	r2, [pc, #420]	; (8002ed4 <HAL_I2C_Init+0x284>)
 8002d30:	fba2 2303 	umull	r2, r3, r2, r3
 8002d34:	099b      	lsrs	r3, r3, #6
 8002d36:	3301      	adds	r3, #1
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6812      	ldr	r2, [r2, #0]
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	495c      	ldr	r1, [pc, #368]	; (8002ec4 <HAL_I2C_Init+0x274>)
 8002d54:	428b      	cmp	r3, r1
 8002d56:	d819      	bhi.n	8002d8c <HAL_I2C_Init+0x13c>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	1e59      	subs	r1, r3, #1
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d66:	1c59      	adds	r1, r3, #1
 8002d68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d6c:	400b      	ands	r3, r1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00a      	beq.n	8002d88 <HAL_I2C_Init+0x138>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	1e59      	subs	r1, r3, #1
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d80:	3301      	adds	r3, #1
 8002d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d86:	e051      	b.n	8002e2c <HAL_I2C_Init+0x1dc>
 8002d88:	2304      	movs	r3, #4
 8002d8a:	e04f      	b.n	8002e2c <HAL_I2C_Init+0x1dc>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d111      	bne.n	8002db8 <HAL_I2C_Init+0x168>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	1e58      	subs	r0, r3, #1
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6859      	ldr	r1, [r3, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	440b      	add	r3, r1
 8002da2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002da6:	3301      	adds	r3, #1
 8002da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	bf0c      	ite	eq
 8002db0:	2301      	moveq	r3, #1
 8002db2:	2300      	movne	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	e012      	b.n	8002dde <HAL_I2C_Init+0x18e>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	1e58      	subs	r0, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6859      	ldr	r1, [r3, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	0099      	lsls	r1, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dce:	3301      	adds	r3, #1
 8002dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	bf0c      	ite	eq
 8002dd8:	2301      	moveq	r3, #1
 8002dda:	2300      	movne	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_I2C_Init+0x196>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e022      	b.n	8002e2c <HAL_I2C_Init+0x1dc>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10e      	bne.n	8002e0c <HAL_I2C_Init+0x1bc>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	1e58      	subs	r0, r3, #1
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6859      	ldr	r1, [r3, #4]
 8002df6:	460b      	mov	r3, r1
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	440b      	add	r3, r1
 8002dfc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e00:	3301      	adds	r3, #1
 8002e02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e0a:	e00f      	b.n	8002e2c <HAL_I2C_Init+0x1dc>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	1e58      	subs	r0, r3, #1
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6859      	ldr	r1, [r3, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	0099      	lsls	r1, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e22:	3301      	adds	r3, #1
 8002e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	6809      	ldr	r1, [r1, #0]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69da      	ldr	r2, [r3, #28]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6911      	ldr	r1, [r2, #16]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	68d2      	ldr	r2, [r2, #12]
 8002e66:	4311      	orrs	r1, r2
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	430b      	orrs	r3, r1
 8002e6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	695a      	ldr	r2, [r3, #20]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0201 	orr.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	000186a0 	.word	0x000186a0
 8002ec8:	001e847f 	.word	0x001e847f
 8002ecc:	003d08ff 	.word	0x003d08ff
 8002ed0:	431bde83 	.word	0x431bde83
 8002ed4:	10624dd3 	.word	0x10624dd3

08002ed8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b088      	sub	sp, #32
 8002edc:	af02      	add	r7, sp, #8
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	607a      	str	r2, [r7, #4]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	817b      	strh	r3, [r7, #10]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002eec:	f7fe fdb4 	bl	8001a58 <HAL_GetTick>
 8002ef0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b20      	cmp	r3, #32
 8002efc:	f040 80e0 	bne.w	80030c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	2319      	movs	r3, #25
 8002f06:	2201      	movs	r2, #1
 8002f08:	4970      	ldr	r1, [pc, #448]	; (80030cc <HAL_I2C_Master_Transmit+0x1f4>)
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 f964 	bl	80031d8 <I2C_WaitOnFlagUntilTimeout>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f16:	2302      	movs	r3, #2
 8002f18:	e0d3      	b.n	80030c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <HAL_I2C_Master_Transmit+0x50>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e0cc      	b.n	80030c2 <HAL_I2C_Master_Transmit+0x1ea>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d007      	beq.n	8002f4e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f042 0201 	orr.w	r2, r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2221      	movs	r2, #33	; 0x21
 8002f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2210      	movs	r2, #16
 8002f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	893a      	ldrh	r2, [r7, #8]
 8002f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4a50      	ldr	r2, [pc, #320]	; (80030d0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f90:	8979      	ldrh	r1, [r7, #10]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	6a3a      	ldr	r2, [r7, #32]
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 f89c 	bl	80030d4 <I2C_MasterRequestWrite>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e08d      	b.n	80030c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	613b      	str	r3, [r7, #16]
 8002fba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002fbc:	e066      	b.n	800308c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	6a39      	ldr	r1, [r7, #32]
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 f9de 	bl	8003384 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00d      	beq.n	8002fea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d107      	bne.n	8002fe6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e06b      	b.n	80030c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	781a      	ldrb	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003004:	b29b      	uxth	r3, r3
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003012:	3b01      	subs	r3, #1
 8003014:	b29a      	uxth	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b04      	cmp	r3, #4
 8003026:	d11b      	bne.n	8003060 <HAL_I2C_Master_Transmit+0x188>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302c:	2b00      	cmp	r3, #0
 800302e:	d017      	beq.n	8003060 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	781a      	ldrb	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304a:	b29b      	uxth	r3, r3
 800304c:	3b01      	subs	r3, #1
 800304e:	b29a      	uxth	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	6a39      	ldr	r1, [r7, #32]
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 f9ce 	bl	8003406 <I2C_WaitOnBTFFlagUntilTimeout>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00d      	beq.n	800308c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	2b04      	cmp	r3, #4
 8003076:	d107      	bne.n	8003088 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003086:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e01a      	b.n	80030c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003090:	2b00      	cmp	r3, #0
 8003092:	d194      	bne.n	8002fbe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2220      	movs	r2, #32
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030bc:	2300      	movs	r3, #0
 80030be:	e000      	b.n	80030c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030c0:	2302      	movs	r3, #2
  }
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	00100002 	.word	0x00100002
 80030d0:	ffff0000 	.word	0xffff0000

080030d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b088      	sub	sp, #32
 80030d8:	af02      	add	r7, sp, #8
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	607a      	str	r2, [r7, #4]
 80030de:	603b      	str	r3, [r7, #0]
 80030e0:	460b      	mov	r3, r1
 80030e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d006      	beq.n	80030fe <I2C_MasterRequestWrite+0x2a>
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d003      	beq.n	80030fe <I2C_MasterRequestWrite+0x2a>
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030fc:	d108      	bne.n	8003110 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	e00b      	b.n	8003128 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	2b12      	cmp	r3, #18
 8003116:	d107      	bne.n	8003128 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003126:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 f84f 	bl	80031d8 <I2C_WaitOnFlagUntilTimeout>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00d      	beq.n	800315c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800314e:	d103      	bne.n	8003158 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003156:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e035      	b.n	80031c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003164:	d108      	bne.n	8003178 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003166:	897b      	ldrh	r3, [r7, #10]
 8003168:	b2db      	uxtb	r3, r3
 800316a:	461a      	mov	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003174:	611a      	str	r2, [r3, #16]
 8003176:	e01b      	b.n	80031b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003178:	897b      	ldrh	r3, [r7, #10]
 800317a:	11db      	asrs	r3, r3, #7
 800317c:	b2db      	uxtb	r3, r3
 800317e:	f003 0306 	and.w	r3, r3, #6
 8003182:	b2db      	uxtb	r3, r3
 8003184:	f063 030f 	orn	r3, r3, #15
 8003188:	b2da      	uxtb	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	490e      	ldr	r1, [pc, #56]	; (80031d0 <I2C_MasterRequestWrite+0xfc>)
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 f875 	bl	8003286 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e010      	b.n	80031c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80031a6:	897b      	ldrh	r3, [r7, #10]
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	4907      	ldr	r1, [pc, #28]	; (80031d4 <I2C_MasterRequestWrite+0x100>)
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f865 	bl	8003286 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	00010008 	.word	0x00010008
 80031d4:	00010002 	.word	0x00010002

080031d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	4613      	mov	r3, r2
 80031e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031e8:	e025      	b.n	8003236 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f0:	d021      	beq.n	8003236 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f2:	f7fe fc31 	bl	8001a58 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d302      	bcc.n	8003208 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d116      	bne.n	8003236 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f043 0220 	orr.w	r2, r3, #32
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e023      	b.n	800327e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	0c1b      	lsrs	r3, r3, #16
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b01      	cmp	r3, #1
 800323e:	d10d      	bne.n	800325c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	43da      	mvns	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	4013      	ands	r3, r2
 800324c:	b29b      	uxth	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	bf0c      	ite	eq
 8003252:	2301      	moveq	r3, #1
 8003254:	2300      	movne	r3, #0
 8003256:	b2db      	uxtb	r3, r3
 8003258:	461a      	mov	r2, r3
 800325a:	e00c      	b.n	8003276 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	43da      	mvns	r2, r3
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	4013      	ands	r3, r2
 8003268:	b29b      	uxth	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	bf0c      	ite	eq
 800326e:	2301      	moveq	r3, #1
 8003270:	2300      	movne	r3, #0
 8003272:	b2db      	uxtb	r3, r3
 8003274:	461a      	mov	r2, r3
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	429a      	cmp	r2, r3
 800327a:	d0b6      	beq.n	80031ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b084      	sub	sp, #16
 800328a:	af00      	add	r7, sp, #0
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	607a      	str	r2, [r7, #4]
 8003292:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003294:	e051      	b.n	800333a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a4:	d123      	bne.n	80032ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f043 0204 	orr.w	r2, r3, #4
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e046      	b.n	800337c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f4:	d021      	beq.n	800333a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f6:	f7fe fbaf 	bl	8001a58 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	429a      	cmp	r2, r3
 8003304:	d302      	bcc.n	800330c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d116      	bne.n	800333a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2220      	movs	r2, #32
 8003316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	f043 0220 	orr.w	r2, r3, #32
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e020      	b.n	800337c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	0c1b      	lsrs	r3, r3, #16
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b01      	cmp	r3, #1
 8003342:	d10c      	bne.n	800335e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	43da      	mvns	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	4013      	ands	r3, r2
 8003350:	b29b      	uxth	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	bf14      	ite	ne
 8003356:	2301      	movne	r3, #1
 8003358:	2300      	moveq	r3, #0
 800335a:	b2db      	uxtb	r3, r3
 800335c:	e00b      	b.n	8003376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	43da      	mvns	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	4013      	ands	r3, r2
 800336a:	b29b      	uxth	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	bf14      	ite	ne
 8003370:	2301      	movne	r3, #1
 8003372:	2300      	moveq	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d18d      	bne.n	8003296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003390:	e02d      	b.n	80033ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 f878 	bl	8003488 <I2C_IsAcknowledgeFailed>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e02d      	b.n	80033fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a8:	d021      	beq.n	80033ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033aa:	f7fe fb55 	bl	8001a58 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d302      	bcc.n	80033c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d116      	bne.n	80033ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	f043 0220 	orr.w	r2, r3, #32
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e007      	b.n	80033fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f8:	2b80      	cmp	r3, #128	; 0x80
 80033fa:	d1ca      	bne.n	8003392 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b084      	sub	sp, #16
 800340a:	af00      	add	r7, sp, #0
 800340c:	60f8      	str	r0, [r7, #12]
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003412:	e02d      	b.n	8003470 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 f837 	bl	8003488 <I2C_IsAcknowledgeFailed>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e02d      	b.n	8003480 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800342a:	d021      	beq.n	8003470 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800342c:	f7fe fb14 	bl	8001a58 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	429a      	cmp	r2, r3
 800343a:	d302      	bcc.n	8003442 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d116      	bne.n	8003470 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	f043 0220 	orr.w	r2, r3, #32
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e007      	b.n	8003480 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	f003 0304 	and.w	r3, r3, #4
 800347a:	2b04      	cmp	r3, #4
 800347c:	d1ca      	bne.n	8003414 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800349a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800349e:	d11b      	bne.n	80034d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	f043 0204 	orr.w	r2, r3, #4
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e000      	b.n	80034da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr

080034e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e26c      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 8087 	beq.w	8003612 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003504:	4b92      	ldr	r3, [pc, #584]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 030c 	and.w	r3, r3, #12
 800350c:	2b04      	cmp	r3, #4
 800350e:	d00c      	beq.n	800352a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003510:	4b8f      	ldr	r3, [pc, #572]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 030c 	and.w	r3, r3, #12
 8003518:	2b08      	cmp	r3, #8
 800351a:	d112      	bne.n	8003542 <HAL_RCC_OscConfig+0x5e>
 800351c:	4b8c      	ldr	r3, [pc, #560]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003528:	d10b      	bne.n	8003542 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800352a:	4b89      	ldr	r3, [pc, #548]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d06c      	beq.n	8003610 <HAL_RCC_OscConfig+0x12c>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d168      	bne.n	8003610 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e246      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800354a:	d106      	bne.n	800355a <HAL_RCC_OscConfig+0x76>
 800354c:	4b80      	ldr	r3, [pc, #512]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a7f      	ldr	r2, [pc, #508]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003556:	6013      	str	r3, [r2, #0]
 8003558:	e02e      	b.n	80035b8 <HAL_RCC_OscConfig+0xd4>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10c      	bne.n	800357c <HAL_RCC_OscConfig+0x98>
 8003562:	4b7b      	ldr	r3, [pc, #492]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a7a      	ldr	r2, [pc, #488]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	4b78      	ldr	r3, [pc, #480]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a77      	ldr	r2, [pc, #476]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003574:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	e01d      	b.n	80035b8 <HAL_RCC_OscConfig+0xd4>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003584:	d10c      	bne.n	80035a0 <HAL_RCC_OscConfig+0xbc>
 8003586:	4b72      	ldr	r3, [pc, #456]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a71      	ldr	r2, [pc, #452]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800358c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	4b6f      	ldr	r3, [pc, #444]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a6e      	ldr	r2, [pc, #440]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	e00b      	b.n	80035b8 <HAL_RCC_OscConfig+0xd4>
 80035a0:	4b6b      	ldr	r3, [pc, #428]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a6a      	ldr	r2, [pc, #424]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 80035a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035aa:	6013      	str	r3, [r2, #0]
 80035ac:	4b68      	ldr	r3, [pc, #416]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a67      	ldr	r2, [pc, #412]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 80035b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d013      	beq.n	80035e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c0:	f7fe fa4a 	bl	8001a58 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c8:	f7fe fa46 	bl	8001a58 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b64      	cmp	r3, #100	; 0x64
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e1fa      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035da:	4b5d      	ldr	r3, [pc, #372]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0f0      	beq.n	80035c8 <HAL_RCC_OscConfig+0xe4>
 80035e6:	e014      	b.n	8003612 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e8:	f7fe fa36 	bl	8001a58 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f0:	f7fe fa32 	bl	8001a58 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b64      	cmp	r3, #100	; 0x64
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e1e6      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003602:	4b53      	ldr	r3, [pc, #332]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x10c>
 800360e:	e000      	b.n	8003612 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d063      	beq.n	80036e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800361e:	4b4c      	ldr	r3, [pc, #304]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f003 030c 	and.w	r3, r3, #12
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00b      	beq.n	8003642 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800362a:	4b49      	ldr	r3, [pc, #292]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f003 030c 	and.w	r3, r3, #12
 8003632:	2b08      	cmp	r3, #8
 8003634:	d11c      	bne.n	8003670 <HAL_RCC_OscConfig+0x18c>
 8003636:	4b46      	ldr	r3, [pc, #280]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d116      	bne.n	8003670 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003642:	4b43      	ldr	r3, [pc, #268]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d005      	beq.n	800365a <HAL_RCC_OscConfig+0x176>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d001      	beq.n	800365a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e1ba      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800365a:	4b3d      	ldr	r3, [pc, #244]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4939      	ldr	r1, [pc, #228]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800366a:	4313      	orrs	r3, r2
 800366c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800366e:	e03a      	b.n	80036e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d020      	beq.n	80036ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003678:	4b36      	ldr	r3, [pc, #216]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 800367a:	2201      	movs	r2, #1
 800367c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367e:	f7fe f9eb 	bl	8001a58 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003686:	f7fe f9e7 	bl	8001a58 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e19b      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003698:	4b2d      	ldr	r3, [pc, #180]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0f0      	beq.n	8003686 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a4:	4b2a      	ldr	r3, [pc, #168]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	4927      	ldr	r1, [pc, #156]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	600b      	str	r3, [r1, #0]
 80036b8:	e015      	b.n	80036e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ba:	4b26      	ldr	r3, [pc, #152]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c0:	f7fe f9ca 	bl	8001a58 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c8:	f7fe f9c6 	bl	8001a58 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e17a      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036da:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d03a      	beq.n	8003768 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d019      	beq.n	800372e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036fa:	4b17      	ldr	r3, [pc, #92]	; (8003758 <HAL_RCC_OscConfig+0x274>)
 80036fc:	2201      	movs	r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003700:	f7fe f9aa 	bl	8001a58 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003708:	f7fe f9a6 	bl	8001a58 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e15a      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800371a:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003726:	2001      	movs	r0, #1
 8003728:	f000 fad8 	bl	8003cdc <RCC_Delay>
 800372c:	e01c      	b.n	8003768 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800372e:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <HAL_RCC_OscConfig+0x274>)
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003734:	f7fe f990 	bl	8001a58 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800373a:	e00f      	b.n	800375c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800373c:	f7fe f98c 	bl	8001a58 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d908      	bls.n	800375c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e140      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>
 800374e:	bf00      	nop
 8003750:	40021000 	.word	0x40021000
 8003754:	42420000 	.word	0x42420000
 8003758:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800375c:	4b9e      	ldr	r3, [pc, #632]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1e9      	bne.n	800373c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 80a6 	beq.w	80038c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003776:	2300      	movs	r3, #0
 8003778:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800377a:	4b97      	ldr	r3, [pc, #604]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10d      	bne.n	80037a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003786:	4b94      	ldr	r3, [pc, #592]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	4a93      	ldr	r2, [pc, #588]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 800378c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003790:	61d3      	str	r3, [r2, #28]
 8003792:	4b91      	ldr	r3, [pc, #580]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379a:	60bb      	str	r3, [r7, #8]
 800379c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800379e:	2301      	movs	r3, #1
 80037a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a2:	4b8e      	ldr	r3, [pc, #568]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d118      	bne.n	80037e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ae:	4b8b      	ldr	r3, [pc, #556]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a8a      	ldr	r2, [pc, #552]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 80037b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ba:	f7fe f94d 	bl	8001a58 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c2:	f7fe f949 	bl	8001a58 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b64      	cmp	r3, #100	; 0x64
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e0fd      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d4:	4b81      	ldr	r3, [pc, #516]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0f0      	beq.n	80037c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d106      	bne.n	80037f6 <HAL_RCC_OscConfig+0x312>
 80037e8:	4b7b      	ldr	r3, [pc, #492]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	4a7a      	ldr	r2, [pc, #488]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	6213      	str	r3, [r2, #32]
 80037f4:	e02d      	b.n	8003852 <HAL_RCC_OscConfig+0x36e>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10c      	bne.n	8003818 <HAL_RCC_OscConfig+0x334>
 80037fe:	4b76      	ldr	r3, [pc, #472]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	4a75      	ldr	r2, [pc, #468]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 8003804:	f023 0301 	bic.w	r3, r3, #1
 8003808:	6213      	str	r3, [r2, #32]
 800380a:	4b73      	ldr	r3, [pc, #460]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	4a72      	ldr	r2, [pc, #456]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 8003810:	f023 0304 	bic.w	r3, r3, #4
 8003814:	6213      	str	r3, [r2, #32]
 8003816:	e01c      	b.n	8003852 <HAL_RCC_OscConfig+0x36e>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	2b05      	cmp	r3, #5
 800381e:	d10c      	bne.n	800383a <HAL_RCC_OscConfig+0x356>
 8003820:	4b6d      	ldr	r3, [pc, #436]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	4a6c      	ldr	r2, [pc, #432]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 8003826:	f043 0304 	orr.w	r3, r3, #4
 800382a:	6213      	str	r3, [r2, #32]
 800382c:	4b6a      	ldr	r3, [pc, #424]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	4a69      	ldr	r2, [pc, #420]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 8003832:	f043 0301 	orr.w	r3, r3, #1
 8003836:	6213      	str	r3, [r2, #32]
 8003838:	e00b      	b.n	8003852 <HAL_RCC_OscConfig+0x36e>
 800383a:	4b67      	ldr	r3, [pc, #412]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	4a66      	ldr	r2, [pc, #408]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 8003840:	f023 0301 	bic.w	r3, r3, #1
 8003844:	6213      	str	r3, [r2, #32]
 8003846:	4b64      	ldr	r3, [pc, #400]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	4a63      	ldr	r2, [pc, #396]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 800384c:	f023 0304 	bic.w	r3, r3, #4
 8003850:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d015      	beq.n	8003886 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800385a:	f7fe f8fd 	bl	8001a58 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003860:	e00a      	b.n	8003878 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003862:	f7fe f8f9 	bl	8001a58 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003870:	4293      	cmp	r3, r2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e0ab      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003878:	4b57      	ldr	r3, [pc, #348]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0ee      	beq.n	8003862 <HAL_RCC_OscConfig+0x37e>
 8003884:	e014      	b.n	80038b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003886:	f7fe f8e7 	bl	8001a58 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800388c:	e00a      	b.n	80038a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388e:	f7fe f8e3 	bl	8001a58 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	f241 3288 	movw	r2, #5000	; 0x1388
 800389c:	4293      	cmp	r3, r2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e095      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a4:	4b4c      	ldr	r3, [pc, #304]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1ee      	bne.n	800388e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038b0:	7dfb      	ldrb	r3, [r7, #23]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d105      	bne.n	80038c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038b6:	4b48      	ldr	r3, [pc, #288]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	4a47      	ldr	r2, [pc, #284]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 80038bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 8081 	beq.w	80039ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038cc:	4b42      	ldr	r3, [pc, #264]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f003 030c 	and.w	r3, r3, #12
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d061      	beq.n	800399c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d146      	bne.n	800396e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e0:	4b3f      	ldr	r3, [pc, #252]	; (80039e0 <HAL_RCC_OscConfig+0x4fc>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e6:	f7fe f8b7 	bl	8001a58 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ee:	f7fe f8b3 	bl	8001a58 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e067      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003900:	4b35      	ldr	r3, [pc, #212]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1f0      	bne.n	80038ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003914:	d108      	bne.n	8003928 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003916:	4b30      	ldr	r3, [pc, #192]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	492d      	ldr	r1, [pc, #180]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 8003924:	4313      	orrs	r3, r2
 8003926:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003928:	4b2b      	ldr	r3, [pc, #172]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a19      	ldr	r1, [r3, #32]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	430b      	orrs	r3, r1
 800393a:	4927      	ldr	r1, [pc, #156]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 800393c:	4313      	orrs	r3, r2
 800393e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003940:	4b27      	ldr	r3, [pc, #156]	; (80039e0 <HAL_RCC_OscConfig+0x4fc>)
 8003942:	2201      	movs	r2, #1
 8003944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003946:	f7fe f887 	bl	8001a58 <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800394e:	f7fe f883 	bl	8001a58 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e037      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003960:	4b1d      	ldr	r3, [pc, #116]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0f0      	beq.n	800394e <HAL_RCC_OscConfig+0x46a>
 800396c:	e02f      	b.n	80039ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800396e:	4b1c      	ldr	r3, [pc, #112]	; (80039e0 <HAL_RCC_OscConfig+0x4fc>)
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003974:	f7fe f870 	bl	8001a58 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800397c:	f7fe f86c 	bl	8001a58 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e020      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800398e:	4b12      	ldr	r3, [pc, #72]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f0      	bne.n	800397c <HAL_RCC_OscConfig+0x498>
 800399a:	e018      	b.n	80039ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e013      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039a8:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d106      	bne.n	80039ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d001      	beq.n	80039ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40007000 	.word	0x40007000
 80039e0:	42420060 	.word	0x42420060

080039e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e0d0      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039f8:	4b6a      	ldr	r3, [pc, #424]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c0>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d910      	bls.n	8003a28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a06:	4b67      	ldr	r3, [pc, #412]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f023 0207 	bic.w	r2, r3, #7
 8003a0e:	4965      	ldr	r1, [pc, #404]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a16:	4b63      	ldr	r3, [pc, #396]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d001      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e0b8      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d020      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a40:	4b59      	ldr	r3, [pc, #356]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	4a58      	ldr	r2, [pc, #352]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0308 	and.w	r3, r3, #8
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a58:	4b53      	ldr	r3, [pc, #332]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	4a52      	ldr	r2, [pc, #328]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a64:	4b50      	ldr	r3, [pc, #320]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	494d      	ldr	r1, [pc, #308]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d040      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d107      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8a:	4b47      	ldr	r3, [pc, #284]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d115      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e07f      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d107      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa2:	4b41      	ldr	r3, [pc, #260]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d109      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e073      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab2:	4b3d      	ldr	r3, [pc, #244]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e06b      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ac2:	4b39      	ldr	r3, [pc, #228]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f023 0203 	bic.w	r2, r3, #3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	4936      	ldr	r1, [pc, #216]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ad4:	f7fd ffc0 	bl	8001a58 <HAL_GetTick>
 8003ad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ada:	e00a      	b.n	8003af2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003adc:	f7fd ffbc 	bl	8001a58 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e053      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af2:	4b2d      	ldr	r3, [pc, #180]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f003 020c 	and.w	r2, r3, #12
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d1eb      	bne.n	8003adc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b04:	4b27      	ldr	r3, [pc, #156]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d210      	bcs.n	8003b34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b12:	4b24      	ldr	r3, [pc, #144]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f023 0207 	bic.w	r2, r3, #7
 8003b1a:	4922      	ldr	r1, [pc, #136]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b22:	4b20      	ldr	r3, [pc, #128]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d001      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e032      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d008      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b40:	4b19      	ldr	r3, [pc, #100]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	4916      	ldr	r1, [pc, #88]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d009      	beq.n	8003b72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b5e:	4b12      	ldr	r3, [pc, #72]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	490e      	ldr	r1, [pc, #56]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b72:	f000 f821 	bl	8003bb8 <HAL_RCC_GetSysClockFreq>
 8003b76:	4602      	mov	r2, r0
 8003b78:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	091b      	lsrs	r3, r3, #4
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	490a      	ldr	r1, [pc, #40]	; (8003bac <HAL_RCC_ClockConfig+0x1c8>)
 8003b84:	5ccb      	ldrb	r3, [r1, r3]
 8003b86:	fa22 f303 	lsr.w	r3, r2, r3
 8003b8a:	4a09      	ldr	r2, [pc, #36]	; (8003bb0 <HAL_RCC_ClockConfig+0x1cc>)
 8003b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b8e:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <HAL_RCC_ClockConfig+0x1d0>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fd ff1e 	bl	80019d4 <HAL_InitTick>

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40022000 	.word	0x40022000
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	08006e10 	.word	0x08006e10
 8003bb0:	20000000 	.word	0x20000000
 8003bb4:	20000004 	.word	0x20000004

08003bb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bb8:	b490      	push	{r4, r7}
 8003bba:	b08a      	sub	sp, #40	; 0x28
 8003bbc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003bbe:	4b2a      	ldr	r3, [pc, #168]	; (8003c68 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003bc0:	1d3c      	adds	r4, r7, #4
 8003bc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003bc8:	f240 2301 	movw	r3, #513	; 0x201
 8003bcc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61fb      	str	r3, [r7, #28]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61bb      	str	r3, [r7, #24]
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bda:	2300      	movs	r3, #0
 8003bdc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003be2:	4b22      	ldr	r3, [pc, #136]	; (8003c6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f003 030c 	and.w	r3, r3, #12
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d002      	beq.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x40>
 8003bf2:	2b08      	cmp	r3, #8
 8003bf4:	d003      	beq.n	8003bfe <HAL_RCC_GetSysClockFreq+0x46>
 8003bf6:	e02d      	b.n	8003c54 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bf8:	4b1d      	ldr	r3, [pc, #116]	; (8003c70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bfa:	623b      	str	r3, [r7, #32]
      break;
 8003bfc:	e02d      	b.n	8003c5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	0c9b      	lsrs	r3, r3, #18
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c10:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d013      	beq.n	8003c44 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c1c:	4b13      	ldr	r3, [pc, #76]	; (8003c6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	0c5b      	lsrs	r3, r3, #17
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c30:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	4a0e      	ldr	r2, [pc, #56]	; (8003c70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c36:	fb02 f203 	mul.w	r2, r2, r3
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
 8003c42:	e004      	b.n	8003c4e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	4a0b      	ldr	r2, [pc, #44]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c48:	fb02 f303 	mul.w	r3, r2, r3
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	623b      	str	r3, [r7, #32]
      break;
 8003c52:	e002      	b.n	8003c5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c54:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c56:	623b      	str	r3, [r7, #32]
      break;
 8003c58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3728      	adds	r7, #40	; 0x28
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bc90      	pop	{r4, r7}
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	08006df0 	.word	0x08006df0
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	007a1200 	.word	0x007a1200
 8003c74:	003d0900 	.word	0x003d0900

08003c78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c7c:	4b02      	ldr	r3, [pc, #8]	; (8003c88 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc80      	pop	{r7}
 8003c86:	4770      	bx	lr
 8003c88:	20000000 	.word	0x20000000

08003c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c90:	f7ff fff2 	bl	8003c78 <HAL_RCC_GetHCLKFreq>
 8003c94:	4602      	mov	r2, r0
 8003c96:	4b05      	ldr	r3, [pc, #20]	; (8003cac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	0a1b      	lsrs	r3, r3, #8
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	4903      	ldr	r1, [pc, #12]	; (8003cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ca2:	5ccb      	ldrb	r3, [r1, r3]
 8003ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	08006e20 	.word	0x08006e20

08003cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cb8:	f7ff ffde 	bl	8003c78 <HAL_RCC_GetHCLKFreq>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	0adb      	lsrs	r3, r3, #11
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	4903      	ldr	r1, [pc, #12]	; (8003cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cca:	5ccb      	ldrb	r3, [r1, r3]
 8003ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	08006e20 	.word	0x08006e20

08003cdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ce4:	4b0a      	ldr	r3, [pc, #40]	; (8003d10 <RCC_Delay+0x34>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a0a      	ldr	r2, [pc, #40]	; (8003d14 <RCC_Delay+0x38>)
 8003cea:	fba2 2303 	umull	r2, r3, r2, r3
 8003cee:	0a5b      	lsrs	r3, r3, #9
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	fb02 f303 	mul.w	r3, r2, r3
 8003cf6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003cf8:	bf00      	nop
  }
  while (Delay --);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	1e5a      	subs	r2, r3, #1
 8003cfe:	60fa      	str	r2, [r7, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1f9      	bne.n	8003cf8 <RCC_Delay+0x1c>
}
 8003d04:	bf00      	nop
 8003d06:	bf00      	nop
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bc80      	pop	{r7}
 8003d0e:	4770      	bx	lr
 8003d10:	20000000 	.word	0x20000000
 8003d14:	10624dd3 	.word	0x10624dd3

08003d18 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003d20:	2300      	movs	r3, #0
 8003d22:	613b      	str	r3, [r7, #16]
 8003d24:	2300      	movs	r3, #0
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d07d      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003d34:	2300      	movs	r3, #0
 8003d36:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d38:	4b4f      	ldr	r3, [pc, #316]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10d      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d44:	4b4c      	ldr	r3, [pc, #304]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	4a4b      	ldr	r2, [pc, #300]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d4e:	61d3      	str	r3, [r2, #28]
 8003d50:	4b49      	ldr	r3, [pc, #292]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d60:	4b46      	ldr	r3, [pc, #280]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d118      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d6c:	4b43      	ldr	r3, [pc, #268]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a42      	ldr	r2, [pc, #264]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d78:	f7fd fe6e 	bl	8001a58 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7e:	e008      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d80:	f7fd fe6a 	bl	8001a58 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b64      	cmp	r3, #100	; 0x64
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e06d      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d92:	4b3a      	ldr	r3, [pc, #232]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0f0      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d9e:	4b36      	ldr	r3, [pc, #216]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d02e      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d027      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dbc:	4b2e      	ldr	r3, [pc, #184]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dc6:	4b2e      	ldr	r3, [pc, #184]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003dc8:	2201      	movs	r2, #1
 8003dca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dcc:	4b2c      	ldr	r3, [pc, #176]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003dd2:	4a29      	ldr	r2, [pc, #164]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d014      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de2:	f7fd fe39 	bl	8001a58 <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de8:	e00a      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dea:	f7fd fe35 	bl	8001a58 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e036      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e00:	4b1d      	ldr	r3, [pc, #116]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0ee      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e0c:	4b1a      	ldr	r3, [pc, #104]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	4917      	ldr	r1, [pc, #92]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e1e:	7dfb      	ldrb	r3, [r7, #23]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d105      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e24:	4b14      	ldr	r3, [pc, #80]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	4a13      	ldr	r2, [pc, #76]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e2e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d008      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e3c:	4b0e      	ldr	r3, [pc, #56]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	490b      	ldr	r1, [pc, #44]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d008      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e5a:	4b07      	ldr	r3, [pc, #28]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	4904      	ldr	r1, [pc, #16]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3718      	adds	r7, #24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	40007000 	.word	0x40007000
 8003e80:	42420440 	.word	0x42420440

08003e84 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003e84:	b590      	push	{r4, r7, lr}
 8003e86:	b08d      	sub	sp, #52	; 0x34
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003e8c:	4b5a      	ldr	r3, [pc, #360]	; (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003e8e:	f107 040c 	add.w	r4, r7, #12
 8003e92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003e98:	f240 2301 	movw	r3, #513	; 0x201
 8003e9c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61fb      	str	r3, [r7, #28]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b10      	cmp	r3, #16
 8003eb6:	d00a      	beq.n	8003ece <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b10      	cmp	r3, #16
 8003ebc:	f200 8091 	bhi.w	8003fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d04c      	beq.n	8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d07c      	beq.n	8003fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003ecc:	e089      	b.n	8003fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8003ece:	4b4b      	ldr	r3, [pc, #300]	; (8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003ed4:	4b49      	ldr	r3, [pc, #292]	; (8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 8082 	beq.w	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	0c9b      	lsrs	r3, r3, #18
 8003ee6:	f003 030f 	and.w	r3, r3, #15
 8003eea:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003eee:	4413      	add	r3, r2
 8003ef0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003ef4:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d018      	beq.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f00:	4b3e      	ldr	r3, [pc, #248]	; (8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	0c5b      	lsrs	r3, r3, #17
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003f0e:	4413      	add	r3, r2
 8003f10:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00d      	beq.n	8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003f20:	4a37      	ldr	r2, [pc, #220]	; (8004000 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	fb02 f303 	mul.w	r3, r2, r3
 8003f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f30:	e004      	b.n	8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	4a33      	ldr	r2, [pc, #204]	; (8004004 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8003f36:	fb02 f303 	mul.w	r3, r2, r3
 8003f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003f3c:	4b2f      	ldr	r3, [pc, #188]	; (8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f48:	d102      	bne.n	8003f50 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8003f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003f4e:	e04a      	b.n	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8003f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	4a2c      	ldr	r2, [pc, #176]	; (8004008 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8003f56:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5a:	085b      	lsrs	r3, r3, #1
 8003f5c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003f5e:	e042      	b.n	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8003f60:	4b26      	ldr	r3, [pc, #152]	; (8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f70:	d108      	bne.n	8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8003f7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f80:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f82:	e01f      	b.n	8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f8e:	d109      	bne.n	8003fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003f90:	4b1a      	ldr	r3, [pc, #104]	; (8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8003f9c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fa2:	e00f      	b.n	8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003faa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fae:	d11c      	bne.n	8003fea <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003fb0:	4b12      	ldr	r3, [pc, #72]	; (8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d016      	beq.n	8003fea <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8003fbc:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003fc0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003fc2:	e012      	b.n	8003fea <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003fc4:	e011      	b.n	8003fea <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003fc6:	f7ff fe75 	bl	8003cb4 <HAL_RCC_GetPCLK2Freq>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	0b9b      	lsrs	r3, r3, #14
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fde:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003fe0:	e004      	b.n	8003fec <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003fe2:	bf00      	nop
 8003fe4:	e002      	b.n	8003fec <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003fe6:	bf00      	nop
 8003fe8:	e000      	b.n	8003fec <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003fea:	bf00      	nop
    }
  }
  return (frequency);
 8003fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3734      	adds	r7, #52	; 0x34
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd90      	pop	{r4, r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	08006e00 	.word	0x08006e00
 8003ffc:	40021000 	.word	0x40021000
 8004000:	007a1200 	.word	0x007a1200
 8004004:	003d0900 	.word	0x003d0900
 8004008:	aaaaaaab 	.word	0xaaaaaaab

0800400c <__errno>:
 800400c:	4b01      	ldr	r3, [pc, #4]	; (8004014 <__errno+0x8>)
 800400e:	6818      	ldr	r0, [r3, #0]
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	2000000c 	.word	0x2000000c

08004018 <__libc_init_array>:
 8004018:	b570      	push	{r4, r5, r6, lr}
 800401a:	2600      	movs	r6, #0
 800401c:	4d0c      	ldr	r5, [pc, #48]	; (8004050 <__libc_init_array+0x38>)
 800401e:	4c0d      	ldr	r4, [pc, #52]	; (8004054 <__libc_init_array+0x3c>)
 8004020:	1b64      	subs	r4, r4, r5
 8004022:	10a4      	asrs	r4, r4, #2
 8004024:	42a6      	cmp	r6, r4
 8004026:	d109      	bne.n	800403c <__libc_init_array+0x24>
 8004028:	f002 febc 	bl	8006da4 <_init>
 800402c:	2600      	movs	r6, #0
 800402e:	4d0a      	ldr	r5, [pc, #40]	; (8004058 <__libc_init_array+0x40>)
 8004030:	4c0a      	ldr	r4, [pc, #40]	; (800405c <__libc_init_array+0x44>)
 8004032:	1b64      	subs	r4, r4, r5
 8004034:	10a4      	asrs	r4, r4, #2
 8004036:	42a6      	cmp	r6, r4
 8004038:	d105      	bne.n	8004046 <__libc_init_array+0x2e>
 800403a:	bd70      	pop	{r4, r5, r6, pc}
 800403c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004040:	4798      	blx	r3
 8004042:	3601      	adds	r6, #1
 8004044:	e7ee      	b.n	8004024 <__libc_init_array+0xc>
 8004046:	f855 3b04 	ldr.w	r3, [r5], #4
 800404a:	4798      	blx	r3
 800404c:	3601      	adds	r6, #1
 800404e:	e7f2      	b.n	8004036 <__libc_init_array+0x1e>
 8004050:	0800720c 	.word	0x0800720c
 8004054:	0800720c 	.word	0x0800720c
 8004058:	0800720c 	.word	0x0800720c
 800405c:	08007210 	.word	0x08007210

08004060 <memset>:
 8004060:	4603      	mov	r3, r0
 8004062:	4402      	add	r2, r0
 8004064:	4293      	cmp	r3, r2
 8004066:	d100      	bne.n	800406a <memset+0xa>
 8004068:	4770      	bx	lr
 800406a:	f803 1b01 	strb.w	r1, [r3], #1
 800406e:	e7f9      	b.n	8004064 <memset+0x4>

08004070 <__cvt>:
 8004070:	2b00      	cmp	r3, #0
 8004072:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004076:	461f      	mov	r7, r3
 8004078:	bfbb      	ittet	lt
 800407a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800407e:	461f      	movlt	r7, r3
 8004080:	2300      	movge	r3, #0
 8004082:	232d      	movlt	r3, #45	; 0x2d
 8004084:	b088      	sub	sp, #32
 8004086:	4614      	mov	r4, r2
 8004088:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800408a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800408c:	7013      	strb	r3, [r2, #0]
 800408e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004090:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004094:	f023 0820 	bic.w	r8, r3, #32
 8004098:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800409c:	d005      	beq.n	80040aa <__cvt+0x3a>
 800409e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80040a2:	d100      	bne.n	80040a6 <__cvt+0x36>
 80040a4:	3501      	adds	r5, #1
 80040a6:	2302      	movs	r3, #2
 80040a8:	e000      	b.n	80040ac <__cvt+0x3c>
 80040aa:	2303      	movs	r3, #3
 80040ac:	aa07      	add	r2, sp, #28
 80040ae:	9204      	str	r2, [sp, #16]
 80040b0:	aa06      	add	r2, sp, #24
 80040b2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80040b6:	e9cd 3500 	strd	r3, r5, [sp]
 80040ba:	4622      	mov	r2, r4
 80040bc:	463b      	mov	r3, r7
 80040be:	f000 fce7 	bl	8004a90 <_dtoa_r>
 80040c2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80040c6:	4606      	mov	r6, r0
 80040c8:	d102      	bne.n	80040d0 <__cvt+0x60>
 80040ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80040cc:	07db      	lsls	r3, r3, #31
 80040ce:	d522      	bpl.n	8004116 <__cvt+0xa6>
 80040d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80040d4:	eb06 0905 	add.w	r9, r6, r5
 80040d8:	d110      	bne.n	80040fc <__cvt+0x8c>
 80040da:	7833      	ldrb	r3, [r6, #0]
 80040dc:	2b30      	cmp	r3, #48	; 0x30
 80040de:	d10a      	bne.n	80040f6 <__cvt+0x86>
 80040e0:	2200      	movs	r2, #0
 80040e2:	2300      	movs	r3, #0
 80040e4:	4620      	mov	r0, r4
 80040e6:	4639      	mov	r1, r7
 80040e8:	f7fc fc5e 	bl	80009a8 <__aeabi_dcmpeq>
 80040ec:	b918      	cbnz	r0, 80040f6 <__cvt+0x86>
 80040ee:	f1c5 0501 	rsb	r5, r5, #1
 80040f2:	f8ca 5000 	str.w	r5, [sl]
 80040f6:	f8da 3000 	ldr.w	r3, [sl]
 80040fa:	4499      	add	r9, r3
 80040fc:	2200      	movs	r2, #0
 80040fe:	2300      	movs	r3, #0
 8004100:	4620      	mov	r0, r4
 8004102:	4639      	mov	r1, r7
 8004104:	f7fc fc50 	bl	80009a8 <__aeabi_dcmpeq>
 8004108:	b108      	cbz	r0, 800410e <__cvt+0x9e>
 800410a:	f8cd 901c 	str.w	r9, [sp, #28]
 800410e:	2230      	movs	r2, #48	; 0x30
 8004110:	9b07      	ldr	r3, [sp, #28]
 8004112:	454b      	cmp	r3, r9
 8004114:	d307      	bcc.n	8004126 <__cvt+0xb6>
 8004116:	4630      	mov	r0, r6
 8004118:	9b07      	ldr	r3, [sp, #28]
 800411a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800411c:	1b9b      	subs	r3, r3, r6
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	b008      	add	sp, #32
 8004122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004126:	1c59      	adds	r1, r3, #1
 8004128:	9107      	str	r1, [sp, #28]
 800412a:	701a      	strb	r2, [r3, #0]
 800412c:	e7f0      	b.n	8004110 <__cvt+0xa0>

0800412e <__exponent>:
 800412e:	4603      	mov	r3, r0
 8004130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004132:	2900      	cmp	r1, #0
 8004134:	f803 2b02 	strb.w	r2, [r3], #2
 8004138:	bfb6      	itet	lt
 800413a:	222d      	movlt	r2, #45	; 0x2d
 800413c:	222b      	movge	r2, #43	; 0x2b
 800413e:	4249      	neglt	r1, r1
 8004140:	2909      	cmp	r1, #9
 8004142:	7042      	strb	r2, [r0, #1]
 8004144:	dd2b      	ble.n	800419e <__exponent+0x70>
 8004146:	f10d 0407 	add.w	r4, sp, #7
 800414a:	46a4      	mov	ip, r4
 800414c:	270a      	movs	r7, #10
 800414e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004152:	460a      	mov	r2, r1
 8004154:	46a6      	mov	lr, r4
 8004156:	fb07 1516 	mls	r5, r7, r6, r1
 800415a:	2a63      	cmp	r2, #99	; 0x63
 800415c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004160:	4631      	mov	r1, r6
 8004162:	f104 34ff 	add.w	r4, r4, #4294967295
 8004166:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800416a:	dcf0      	bgt.n	800414e <__exponent+0x20>
 800416c:	3130      	adds	r1, #48	; 0x30
 800416e:	f1ae 0502 	sub.w	r5, lr, #2
 8004172:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004176:	4629      	mov	r1, r5
 8004178:	1c44      	adds	r4, r0, #1
 800417a:	4561      	cmp	r1, ip
 800417c:	d30a      	bcc.n	8004194 <__exponent+0x66>
 800417e:	f10d 0209 	add.w	r2, sp, #9
 8004182:	eba2 020e 	sub.w	r2, r2, lr
 8004186:	4565      	cmp	r5, ip
 8004188:	bf88      	it	hi
 800418a:	2200      	movhi	r2, #0
 800418c:	4413      	add	r3, r2
 800418e:	1a18      	subs	r0, r3, r0
 8004190:	b003      	add	sp, #12
 8004192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004194:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004198:	f804 2f01 	strb.w	r2, [r4, #1]!
 800419c:	e7ed      	b.n	800417a <__exponent+0x4c>
 800419e:	2330      	movs	r3, #48	; 0x30
 80041a0:	3130      	adds	r1, #48	; 0x30
 80041a2:	7083      	strb	r3, [r0, #2]
 80041a4:	70c1      	strb	r1, [r0, #3]
 80041a6:	1d03      	adds	r3, r0, #4
 80041a8:	e7f1      	b.n	800418e <__exponent+0x60>
	...

080041ac <_printf_float>:
 80041ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b0:	b091      	sub	sp, #68	; 0x44
 80041b2:	460c      	mov	r4, r1
 80041b4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80041b8:	4616      	mov	r6, r2
 80041ba:	461f      	mov	r7, r3
 80041bc:	4605      	mov	r5, r0
 80041be:	f001 fa55 	bl	800566c <_localeconv_r>
 80041c2:	6803      	ldr	r3, [r0, #0]
 80041c4:	4618      	mov	r0, r3
 80041c6:	9309      	str	r3, [sp, #36]	; 0x24
 80041c8:	f7fb ffc2 	bl	8000150 <strlen>
 80041cc:	2300      	movs	r3, #0
 80041ce:	930e      	str	r3, [sp, #56]	; 0x38
 80041d0:	f8d8 3000 	ldr.w	r3, [r8]
 80041d4:	900a      	str	r0, [sp, #40]	; 0x28
 80041d6:	3307      	adds	r3, #7
 80041d8:	f023 0307 	bic.w	r3, r3, #7
 80041dc:	f103 0208 	add.w	r2, r3, #8
 80041e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80041e4:	f8d4 b000 	ldr.w	fp, [r4]
 80041e8:	f8c8 2000 	str.w	r2, [r8]
 80041ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80041f4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80041f8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80041fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80041fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004202:	4640      	mov	r0, r8
 8004204:	4b9c      	ldr	r3, [pc, #624]	; (8004478 <_printf_float+0x2cc>)
 8004206:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004208:	f7fc fc00 	bl	8000a0c <__aeabi_dcmpun>
 800420c:	bb70      	cbnz	r0, 800426c <_printf_float+0xc0>
 800420e:	f04f 32ff 	mov.w	r2, #4294967295
 8004212:	4640      	mov	r0, r8
 8004214:	4b98      	ldr	r3, [pc, #608]	; (8004478 <_printf_float+0x2cc>)
 8004216:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004218:	f7fc fbda 	bl	80009d0 <__aeabi_dcmple>
 800421c:	bb30      	cbnz	r0, 800426c <_printf_float+0xc0>
 800421e:	2200      	movs	r2, #0
 8004220:	2300      	movs	r3, #0
 8004222:	4640      	mov	r0, r8
 8004224:	4651      	mov	r1, sl
 8004226:	f7fc fbc9 	bl	80009bc <__aeabi_dcmplt>
 800422a:	b110      	cbz	r0, 8004232 <_printf_float+0x86>
 800422c:	232d      	movs	r3, #45	; 0x2d
 800422e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004232:	4b92      	ldr	r3, [pc, #584]	; (800447c <_printf_float+0x2d0>)
 8004234:	4892      	ldr	r0, [pc, #584]	; (8004480 <_printf_float+0x2d4>)
 8004236:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800423a:	bf94      	ite	ls
 800423c:	4698      	movls	r8, r3
 800423e:	4680      	movhi	r8, r0
 8004240:	2303      	movs	r3, #3
 8004242:	f04f 0a00 	mov.w	sl, #0
 8004246:	6123      	str	r3, [r4, #16]
 8004248:	f02b 0304 	bic.w	r3, fp, #4
 800424c:	6023      	str	r3, [r4, #0]
 800424e:	4633      	mov	r3, r6
 8004250:	4621      	mov	r1, r4
 8004252:	4628      	mov	r0, r5
 8004254:	9700      	str	r7, [sp, #0]
 8004256:	aa0f      	add	r2, sp, #60	; 0x3c
 8004258:	f000 f9d4 	bl	8004604 <_printf_common>
 800425c:	3001      	adds	r0, #1
 800425e:	f040 8090 	bne.w	8004382 <_printf_float+0x1d6>
 8004262:	f04f 30ff 	mov.w	r0, #4294967295
 8004266:	b011      	add	sp, #68	; 0x44
 8004268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800426c:	4642      	mov	r2, r8
 800426e:	4653      	mov	r3, sl
 8004270:	4640      	mov	r0, r8
 8004272:	4651      	mov	r1, sl
 8004274:	f7fc fbca 	bl	8000a0c <__aeabi_dcmpun>
 8004278:	b148      	cbz	r0, 800428e <_printf_float+0xe2>
 800427a:	f1ba 0f00 	cmp.w	sl, #0
 800427e:	bfb8      	it	lt
 8004280:	232d      	movlt	r3, #45	; 0x2d
 8004282:	4880      	ldr	r0, [pc, #512]	; (8004484 <_printf_float+0x2d8>)
 8004284:	bfb8      	it	lt
 8004286:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800428a:	4b7f      	ldr	r3, [pc, #508]	; (8004488 <_printf_float+0x2dc>)
 800428c:	e7d3      	b.n	8004236 <_printf_float+0x8a>
 800428e:	6863      	ldr	r3, [r4, #4]
 8004290:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004294:	1c5a      	adds	r2, r3, #1
 8004296:	d142      	bne.n	800431e <_printf_float+0x172>
 8004298:	2306      	movs	r3, #6
 800429a:	6063      	str	r3, [r4, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	9206      	str	r2, [sp, #24]
 80042a0:	aa0e      	add	r2, sp, #56	; 0x38
 80042a2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80042a6:	aa0d      	add	r2, sp, #52	; 0x34
 80042a8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80042ac:	9203      	str	r2, [sp, #12]
 80042ae:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80042b2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80042b6:	6023      	str	r3, [r4, #0]
 80042b8:	6863      	ldr	r3, [r4, #4]
 80042ba:	4642      	mov	r2, r8
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	4628      	mov	r0, r5
 80042c0:	4653      	mov	r3, sl
 80042c2:	910b      	str	r1, [sp, #44]	; 0x2c
 80042c4:	f7ff fed4 	bl	8004070 <__cvt>
 80042c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80042ca:	4680      	mov	r8, r0
 80042cc:	2947      	cmp	r1, #71	; 0x47
 80042ce:	990d      	ldr	r1, [sp, #52]	; 0x34
 80042d0:	d108      	bne.n	80042e4 <_printf_float+0x138>
 80042d2:	1cc8      	adds	r0, r1, #3
 80042d4:	db02      	blt.n	80042dc <_printf_float+0x130>
 80042d6:	6863      	ldr	r3, [r4, #4]
 80042d8:	4299      	cmp	r1, r3
 80042da:	dd40      	ble.n	800435e <_printf_float+0x1b2>
 80042dc:	f1a9 0902 	sub.w	r9, r9, #2
 80042e0:	fa5f f989 	uxtb.w	r9, r9
 80042e4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80042e8:	d81f      	bhi.n	800432a <_printf_float+0x17e>
 80042ea:	464a      	mov	r2, r9
 80042ec:	3901      	subs	r1, #1
 80042ee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80042f2:	910d      	str	r1, [sp, #52]	; 0x34
 80042f4:	f7ff ff1b 	bl	800412e <__exponent>
 80042f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80042fa:	4682      	mov	sl, r0
 80042fc:	1813      	adds	r3, r2, r0
 80042fe:	2a01      	cmp	r2, #1
 8004300:	6123      	str	r3, [r4, #16]
 8004302:	dc02      	bgt.n	800430a <_printf_float+0x15e>
 8004304:	6822      	ldr	r2, [r4, #0]
 8004306:	07d2      	lsls	r2, r2, #31
 8004308:	d501      	bpl.n	800430e <_printf_float+0x162>
 800430a:	3301      	adds	r3, #1
 800430c:	6123      	str	r3, [r4, #16]
 800430e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004312:	2b00      	cmp	r3, #0
 8004314:	d09b      	beq.n	800424e <_printf_float+0xa2>
 8004316:	232d      	movs	r3, #45	; 0x2d
 8004318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800431c:	e797      	b.n	800424e <_printf_float+0xa2>
 800431e:	2947      	cmp	r1, #71	; 0x47
 8004320:	d1bc      	bne.n	800429c <_printf_float+0xf0>
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1ba      	bne.n	800429c <_printf_float+0xf0>
 8004326:	2301      	movs	r3, #1
 8004328:	e7b7      	b.n	800429a <_printf_float+0xee>
 800432a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800432e:	d118      	bne.n	8004362 <_printf_float+0x1b6>
 8004330:	2900      	cmp	r1, #0
 8004332:	6863      	ldr	r3, [r4, #4]
 8004334:	dd0b      	ble.n	800434e <_printf_float+0x1a2>
 8004336:	6121      	str	r1, [r4, #16]
 8004338:	b913      	cbnz	r3, 8004340 <_printf_float+0x194>
 800433a:	6822      	ldr	r2, [r4, #0]
 800433c:	07d0      	lsls	r0, r2, #31
 800433e:	d502      	bpl.n	8004346 <_printf_float+0x19a>
 8004340:	3301      	adds	r3, #1
 8004342:	440b      	add	r3, r1
 8004344:	6123      	str	r3, [r4, #16]
 8004346:	f04f 0a00 	mov.w	sl, #0
 800434a:	65a1      	str	r1, [r4, #88]	; 0x58
 800434c:	e7df      	b.n	800430e <_printf_float+0x162>
 800434e:	b913      	cbnz	r3, 8004356 <_printf_float+0x1aa>
 8004350:	6822      	ldr	r2, [r4, #0]
 8004352:	07d2      	lsls	r2, r2, #31
 8004354:	d501      	bpl.n	800435a <_printf_float+0x1ae>
 8004356:	3302      	adds	r3, #2
 8004358:	e7f4      	b.n	8004344 <_printf_float+0x198>
 800435a:	2301      	movs	r3, #1
 800435c:	e7f2      	b.n	8004344 <_printf_float+0x198>
 800435e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004362:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004364:	4299      	cmp	r1, r3
 8004366:	db05      	blt.n	8004374 <_printf_float+0x1c8>
 8004368:	6823      	ldr	r3, [r4, #0]
 800436a:	6121      	str	r1, [r4, #16]
 800436c:	07d8      	lsls	r0, r3, #31
 800436e:	d5ea      	bpl.n	8004346 <_printf_float+0x19a>
 8004370:	1c4b      	adds	r3, r1, #1
 8004372:	e7e7      	b.n	8004344 <_printf_float+0x198>
 8004374:	2900      	cmp	r1, #0
 8004376:	bfcc      	ite	gt
 8004378:	2201      	movgt	r2, #1
 800437a:	f1c1 0202 	rsble	r2, r1, #2
 800437e:	4413      	add	r3, r2
 8004380:	e7e0      	b.n	8004344 <_printf_float+0x198>
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	055a      	lsls	r2, r3, #21
 8004386:	d407      	bmi.n	8004398 <_printf_float+0x1ec>
 8004388:	6923      	ldr	r3, [r4, #16]
 800438a:	4642      	mov	r2, r8
 800438c:	4631      	mov	r1, r6
 800438e:	4628      	mov	r0, r5
 8004390:	47b8      	blx	r7
 8004392:	3001      	adds	r0, #1
 8004394:	d12b      	bne.n	80043ee <_printf_float+0x242>
 8004396:	e764      	b.n	8004262 <_printf_float+0xb6>
 8004398:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800439c:	f240 80dd 	bls.w	800455a <_printf_float+0x3ae>
 80043a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80043a4:	2200      	movs	r2, #0
 80043a6:	2300      	movs	r3, #0
 80043a8:	f7fc fafe 	bl	80009a8 <__aeabi_dcmpeq>
 80043ac:	2800      	cmp	r0, #0
 80043ae:	d033      	beq.n	8004418 <_printf_float+0x26c>
 80043b0:	2301      	movs	r3, #1
 80043b2:	4631      	mov	r1, r6
 80043b4:	4628      	mov	r0, r5
 80043b6:	4a35      	ldr	r2, [pc, #212]	; (800448c <_printf_float+0x2e0>)
 80043b8:	47b8      	blx	r7
 80043ba:	3001      	adds	r0, #1
 80043bc:	f43f af51 	beq.w	8004262 <_printf_float+0xb6>
 80043c0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80043c4:	429a      	cmp	r2, r3
 80043c6:	db02      	blt.n	80043ce <_printf_float+0x222>
 80043c8:	6823      	ldr	r3, [r4, #0]
 80043ca:	07d8      	lsls	r0, r3, #31
 80043cc:	d50f      	bpl.n	80043ee <_printf_float+0x242>
 80043ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043d2:	4631      	mov	r1, r6
 80043d4:	4628      	mov	r0, r5
 80043d6:	47b8      	blx	r7
 80043d8:	3001      	adds	r0, #1
 80043da:	f43f af42 	beq.w	8004262 <_printf_float+0xb6>
 80043de:	f04f 0800 	mov.w	r8, #0
 80043e2:	f104 091a 	add.w	r9, r4, #26
 80043e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043e8:	3b01      	subs	r3, #1
 80043ea:	4543      	cmp	r3, r8
 80043ec:	dc09      	bgt.n	8004402 <_printf_float+0x256>
 80043ee:	6823      	ldr	r3, [r4, #0]
 80043f0:	079b      	lsls	r3, r3, #30
 80043f2:	f100 8102 	bmi.w	80045fa <_printf_float+0x44e>
 80043f6:	68e0      	ldr	r0, [r4, #12]
 80043f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80043fa:	4298      	cmp	r0, r3
 80043fc:	bfb8      	it	lt
 80043fe:	4618      	movlt	r0, r3
 8004400:	e731      	b.n	8004266 <_printf_float+0xba>
 8004402:	2301      	movs	r3, #1
 8004404:	464a      	mov	r2, r9
 8004406:	4631      	mov	r1, r6
 8004408:	4628      	mov	r0, r5
 800440a:	47b8      	blx	r7
 800440c:	3001      	adds	r0, #1
 800440e:	f43f af28 	beq.w	8004262 <_printf_float+0xb6>
 8004412:	f108 0801 	add.w	r8, r8, #1
 8004416:	e7e6      	b.n	80043e6 <_printf_float+0x23a>
 8004418:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800441a:	2b00      	cmp	r3, #0
 800441c:	dc38      	bgt.n	8004490 <_printf_float+0x2e4>
 800441e:	2301      	movs	r3, #1
 8004420:	4631      	mov	r1, r6
 8004422:	4628      	mov	r0, r5
 8004424:	4a19      	ldr	r2, [pc, #100]	; (800448c <_printf_float+0x2e0>)
 8004426:	47b8      	blx	r7
 8004428:	3001      	adds	r0, #1
 800442a:	f43f af1a 	beq.w	8004262 <_printf_float+0xb6>
 800442e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004432:	4313      	orrs	r3, r2
 8004434:	d102      	bne.n	800443c <_printf_float+0x290>
 8004436:	6823      	ldr	r3, [r4, #0]
 8004438:	07d9      	lsls	r1, r3, #31
 800443a:	d5d8      	bpl.n	80043ee <_printf_float+0x242>
 800443c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004440:	4631      	mov	r1, r6
 8004442:	4628      	mov	r0, r5
 8004444:	47b8      	blx	r7
 8004446:	3001      	adds	r0, #1
 8004448:	f43f af0b 	beq.w	8004262 <_printf_float+0xb6>
 800444c:	f04f 0900 	mov.w	r9, #0
 8004450:	f104 0a1a 	add.w	sl, r4, #26
 8004454:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004456:	425b      	negs	r3, r3
 8004458:	454b      	cmp	r3, r9
 800445a:	dc01      	bgt.n	8004460 <_printf_float+0x2b4>
 800445c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800445e:	e794      	b.n	800438a <_printf_float+0x1de>
 8004460:	2301      	movs	r3, #1
 8004462:	4652      	mov	r2, sl
 8004464:	4631      	mov	r1, r6
 8004466:	4628      	mov	r0, r5
 8004468:	47b8      	blx	r7
 800446a:	3001      	adds	r0, #1
 800446c:	f43f aef9 	beq.w	8004262 <_printf_float+0xb6>
 8004470:	f109 0901 	add.w	r9, r9, #1
 8004474:	e7ee      	b.n	8004454 <_printf_float+0x2a8>
 8004476:	bf00      	nop
 8004478:	7fefffff 	.word	0x7fefffff
 800447c:	08006e2c 	.word	0x08006e2c
 8004480:	08006e30 	.word	0x08006e30
 8004484:	08006e38 	.word	0x08006e38
 8004488:	08006e34 	.word	0x08006e34
 800448c:	08006e3c 	.word	0x08006e3c
 8004490:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004492:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004494:	429a      	cmp	r2, r3
 8004496:	bfa8      	it	ge
 8004498:	461a      	movge	r2, r3
 800449a:	2a00      	cmp	r2, #0
 800449c:	4691      	mov	r9, r2
 800449e:	dc37      	bgt.n	8004510 <_printf_float+0x364>
 80044a0:	f04f 0b00 	mov.w	fp, #0
 80044a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044a8:	f104 021a 	add.w	r2, r4, #26
 80044ac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80044b0:	ebaa 0309 	sub.w	r3, sl, r9
 80044b4:	455b      	cmp	r3, fp
 80044b6:	dc33      	bgt.n	8004520 <_printf_float+0x374>
 80044b8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80044bc:	429a      	cmp	r2, r3
 80044be:	db3b      	blt.n	8004538 <_printf_float+0x38c>
 80044c0:	6823      	ldr	r3, [r4, #0]
 80044c2:	07da      	lsls	r2, r3, #31
 80044c4:	d438      	bmi.n	8004538 <_printf_float+0x38c>
 80044c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044c8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80044ca:	eba2 030a 	sub.w	r3, r2, sl
 80044ce:	eba2 0901 	sub.w	r9, r2, r1
 80044d2:	4599      	cmp	r9, r3
 80044d4:	bfa8      	it	ge
 80044d6:	4699      	movge	r9, r3
 80044d8:	f1b9 0f00 	cmp.w	r9, #0
 80044dc:	dc34      	bgt.n	8004548 <_printf_float+0x39c>
 80044de:	f04f 0800 	mov.w	r8, #0
 80044e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044e6:	f104 0a1a 	add.w	sl, r4, #26
 80044ea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80044ee:	1a9b      	subs	r3, r3, r2
 80044f0:	eba3 0309 	sub.w	r3, r3, r9
 80044f4:	4543      	cmp	r3, r8
 80044f6:	f77f af7a 	ble.w	80043ee <_printf_float+0x242>
 80044fa:	2301      	movs	r3, #1
 80044fc:	4652      	mov	r2, sl
 80044fe:	4631      	mov	r1, r6
 8004500:	4628      	mov	r0, r5
 8004502:	47b8      	blx	r7
 8004504:	3001      	adds	r0, #1
 8004506:	f43f aeac 	beq.w	8004262 <_printf_float+0xb6>
 800450a:	f108 0801 	add.w	r8, r8, #1
 800450e:	e7ec      	b.n	80044ea <_printf_float+0x33e>
 8004510:	4613      	mov	r3, r2
 8004512:	4631      	mov	r1, r6
 8004514:	4642      	mov	r2, r8
 8004516:	4628      	mov	r0, r5
 8004518:	47b8      	blx	r7
 800451a:	3001      	adds	r0, #1
 800451c:	d1c0      	bne.n	80044a0 <_printf_float+0x2f4>
 800451e:	e6a0      	b.n	8004262 <_printf_float+0xb6>
 8004520:	2301      	movs	r3, #1
 8004522:	4631      	mov	r1, r6
 8004524:	4628      	mov	r0, r5
 8004526:	920b      	str	r2, [sp, #44]	; 0x2c
 8004528:	47b8      	blx	r7
 800452a:	3001      	adds	r0, #1
 800452c:	f43f ae99 	beq.w	8004262 <_printf_float+0xb6>
 8004530:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004532:	f10b 0b01 	add.w	fp, fp, #1
 8004536:	e7b9      	b.n	80044ac <_printf_float+0x300>
 8004538:	4631      	mov	r1, r6
 800453a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800453e:	4628      	mov	r0, r5
 8004540:	47b8      	blx	r7
 8004542:	3001      	adds	r0, #1
 8004544:	d1bf      	bne.n	80044c6 <_printf_float+0x31a>
 8004546:	e68c      	b.n	8004262 <_printf_float+0xb6>
 8004548:	464b      	mov	r3, r9
 800454a:	4631      	mov	r1, r6
 800454c:	4628      	mov	r0, r5
 800454e:	eb08 020a 	add.w	r2, r8, sl
 8004552:	47b8      	blx	r7
 8004554:	3001      	adds	r0, #1
 8004556:	d1c2      	bne.n	80044de <_printf_float+0x332>
 8004558:	e683      	b.n	8004262 <_printf_float+0xb6>
 800455a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800455c:	2a01      	cmp	r2, #1
 800455e:	dc01      	bgt.n	8004564 <_printf_float+0x3b8>
 8004560:	07db      	lsls	r3, r3, #31
 8004562:	d537      	bpl.n	80045d4 <_printf_float+0x428>
 8004564:	2301      	movs	r3, #1
 8004566:	4642      	mov	r2, r8
 8004568:	4631      	mov	r1, r6
 800456a:	4628      	mov	r0, r5
 800456c:	47b8      	blx	r7
 800456e:	3001      	adds	r0, #1
 8004570:	f43f ae77 	beq.w	8004262 <_printf_float+0xb6>
 8004574:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004578:	4631      	mov	r1, r6
 800457a:	4628      	mov	r0, r5
 800457c:	47b8      	blx	r7
 800457e:	3001      	adds	r0, #1
 8004580:	f43f ae6f 	beq.w	8004262 <_printf_float+0xb6>
 8004584:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004588:	2200      	movs	r2, #0
 800458a:	2300      	movs	r3, #0
 800458c:	f7fc fa0c 	bl	80009a8 <__aeabi_dcmpeq>
 8004590:	b9d8      	cbnz	r0, 80045ca <_printf_float+0x41e>
 8004592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004594:	f108 0201 	add.w	r2, r8, #1
 8004598:	3b01      	subs	r3, #1
 800459a:	4631      	mov	r1, r6
 800459c:	4628      	mov	r0, r5
 800459e:	47b8      	blx	r7
 80045a0:	3001      	adds	r0, #1
 80045a2:	d10e      	bne.n	80045c2 <_printf_float+0x416>
 80045a4:	e65d      	b.n	8004262 <_printf_float+0xb6>
 80045a6:	2301      	movs	r3, #1
 80045a8:	464a      	mov	r2, r9
 80045aa:	4631      	mov	r1, r6
 80045ac:	4628      	mov	r0, r5
 80045ae:	47b8      	blx	r7
 80045b0:	3001      	adds	r0, #1
 80045b2:	f43f ae56 	beq.w	8004262 <_printf_float+0xb6>
 80045b6:	f108 0801 	add.w	r8, r8, #1
 80045ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045bc:	3b01      	subs	r3, #1
 80045be:	4543      	cmp	r3, r8
 80045c0:	dcf1      	bgt.n	80045a6 <_printf_float+0x3fa>
 80045c2:	4653      	mov	r3, sl
 80045c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80045c8:	e6e0      	b.n	800438c <_printf_float+0x1e0>
 80045ca:	f04f 0800 	mov.w	r8, #0
 80045ce:	f104 091a 	add.w	r9, r4, #26
 80045d2:	e7f2      	b.n	80045ba <_printf_float+0x40e>
 80045d4:	2301      	movs	r3, #1
 80045d6:	4642      	mov	r2, r8
 80045d8:	e7df      	b.n	800459a <_printf_float+0x3ee>
 80045da:	2301      	movs	r3, #1
 80045dc:	464a      	mov	r2, r9
 80045de:	4631      	mov	r1, r6
 80045e0:	4628      	mov	r0, r5
 80045e2:	47b8      	blx	r7
 80045e4:	3001      	adds	r0, #1
 80045e6:	f43f ae3c 	beq.w	8004262 <_printf_float+0xb6>
 80045ea:	f108 0801 	add.w	r8, r8, #1
 80045ee:	68e3      	ldr	r3, [r4, #12]
 80045f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80045f2:	1a5b      	subs	r3, r3, r1
 80045f4:	4543      	cmp	r3, r8
 80045f6:	dcf0      	bgt.n	80045da <_printf_float+0x42e>
 80045f8:	e6fd      	b.n	80043f6 <_printf_float+0x24a>
 80045fa:	f04f 0800 	mov.w	r8, #0
 80045fe:	f104 0919 	add.w	r9, r4, #25
 8004602:	e7f4      	b.n	80045ee <_printf_float+0x442>

08004604 <_printf_common>:
 8004604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004608:	4616      	mov	r6, r2
 800460a:	4699      	mov	r9, r3
 800460c:	688a      	ldr	r2, [r1, #8]
 800460e:	690b      	ldr	r3, [r1, #16]
 8004610:	4607      	mov	r7, r0
 8004612:	4293      	cmp	r3, r2
 8004614:	bfb8      	it	lt
 8004616:	4613      	movlt	r3, r2
 8004618:	6033      	str	r3, [r6, #0]
 800461a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800461e:	460c      	mov	r4, r1
 8004620:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004624:	b10a      	cbz	r2, 800462a <_printf_common+0x26>
 8004626:	3301      	adds	r3, #1
 8004628:	6033      	str	r3, [r6, #0]
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	0699      	lsls	r1, r3, #26
 800462e:	bf42      	ittt	mi
 8004630:	6833      	ldrmi	r3, [r6, #0]
 8004632:	3302      	addmi	r3, #2
 8004634:	6033      	strmi	r3, [r6, #0]
 8004636:	6825      	ldr	r5, [r4, #0]
 8004638:	f015 0506 	ands.w	r5, r5, #6
 800463c:	d106      	bne.n	800464c <_printf_common+0x48>
 800463e:	f104 0a19 	add.w	sl, r4, #25
 8004642:	68e3      	ldr	r3, [r4, #12]
 8004644:	6832      	ldr	r2, [r6, #0]
 8004646:	1a9b      	subs	r3, r3, r2
 8004648:	42ab      	cmp	r3, r5
 800464a:	dc28      	bgt.n	800469e <_printf_common+0x9a>
 800464c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004650:	1e13      	subs	r3, r2, #0
 8004652:	6822      	ldr	r2, [r4, #0]
 8004654:	bf18      	it	ne
 8004656:	2301      	movne	r3, #1
 8004658:	0692      	lsls	r2, r2, #26
 800465a:	d42d      	bmi.n	80046b8 <_printf_common+0xb4>
 800465c:	4649      	mov	r1, r9
 800465e:	4638      	mov	r0, r7
 8004660:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004664:	47c0      	blx	r8
 8004666:	3001      	adds	r0, #1
 8004668:	d020      	beq.n	80046ac <_printf_common+0xa8>
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	68e5      	ldr	r5, [r4, #12]
 800466e:	f003 0306 	and.w	r3, r3, #6
 8004672:	2b04      	cmp	r3, #4
 8004674:	bf18      	it	ne
 8004676:	2500      	movne	r5, #0
 8004678:	6832      	ldr	r2, [r6, #0]
 800467a:	f04f 0600 	mov.w	r6, #0
 800467e:	68a3      	ldr	r3, [r4, #8]
 8004680:	bf08      	it	eq
 8004682:	1aad      	subeq	r5, r5, r2
 8004684:	6922      	ldr	r2, [r4, #16]
 8004686:	bf08      	it	eq
 8004688:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800468c:	4293      	cmp	r3, r2
 800468e:	bfc4      	itt	gt
 8004690:	1a9b      	subgt	r3, r3, r2
 8004692:	18ed      	addgt	r5, r5, r3
 8004694:	341a      	adds	r4, #26
 8004696:	42b5      	cmp	r5, r6
 8004698:	d11a      	bne.n	80046d0 <_printf_common+0xcc>
 800469a:	2000      	movs	r0, #0
 800469c:	e008      	b.n	80046b0 <_printf_common+0xac>
 800469e:	2301      	movs	r3, #1
 80046a0:	4652      	mov	r2, sl
 80046a2:	4649      	mov	r1, r9
 80046a4:	4638      	mov	r0, r7
 80046a6:	47c0      	blx	r8
 80046a8:	3001      	adds	r0, #1
 80046aa:	d103      	bne.n	80046b4 <_printf_common+0xb0>
 80046ac:	f04f 30ff 	mov.w	r0, #4294967295
 80046b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b4:	3501      	adds	r5, #1
 80046b6:	e7c4      	b.n	8004642 <_printf_common+0x3e>
 80046b8:	2030      	movs	r0, #48	; 0x30
 80046ba:	18e1      	adds	r1, r4, r3
 80046bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046c6:	4422      	add	r2, r4
 80046c8:	3302      	adds	r3, #2
 80046ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046ce:	e7c5      	b.n	800465c <_printf_common+0x58>
 80046d0:	2301      	movs	r3, #1
 80046d2:	4622      	mov	r2, r4
 80046d4:	4649      	mov	r1, r9
 80046d6:	4638      	mov	r0, r7
 80046d8:	47c0      	blx	r8
 80046da:	3001      	adds	r0, #1
 80046dc:	d0e6      	beq.n	80046ac <_printf_common+0xa8>
 80046de:	3601      	adds	r6, #1
 80046e0:	e7d9      	b.n	8004696 <_printf_common+0x92>
	...

080046e4 <_printf_i>:
 80046e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046e8:	460c      	mov	r4, r1
 80046ea:	7e27      	ldrb	r7, [r4, #24]
 80046ec:	4691      	mov	r9, r2
 80046ee:	2f78      	cmp	r7, #120	; 0x78
 80046f0:	4680      	mov	r8, r0
 80046f2:	469a      	mov	sl, r3
 80046f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80046f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046fa:	d807      	bhi.n	800470c <_printf_i+0x28>
 80046fc:	2f62      	cmp	r7, #98	; 0x62
 80046fe:	d80a      	bhi.n	8004716 <_printf_i+0x32>
 8004700:	2f00      	cmp	r7, #0
 8004702:	f000 80d9 	beq.w	80048b8 <_printf_i+0x1d4>
 8004706:	2f58      	cmp	r7, #88	; 0x58
 8004708:	f000 80a4 	beq.w	8004854 <_printf_i+0x170>
 800470c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004710:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004714:	e03a      	b.n	800478c <_printf_i+0xa8>
 8004716:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800471a:	2b15      	cmp	r3, #21
 800471c:	d8f6      	bhi.n	800470c <_printf_i+0x28>
 800471e:	a001      	add	r0, pc, #4	; (adr r0, 8004724 <_printf_i+0x40>)
 8004720:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004724:	0800477d 	.word	0x0800477d
 8004728:	08004791 	.word	0x08004791
 800472c:	0800470d 	.word	0x0800470d
 8004730:	0800470d 	.word	0x0800470d
 8004734:	0800470d 	.word	0x0800470d
 8004738:	0800470d 	.word	0x0800470d
 800473c:	08004791 	.word	0x08004791
 8004740:	0800470d 	.word	0x0800470d
 8004744:	0800470d 	.word	0x0800470d
 8004748:	0800470d 	.word	0x0800470d
 800474c:	0800470d 	.word	0x0800470d
 8004750:	0800489f 	.word	0x0800489f
 8004754:	080047c1 	.word	0x080047c1
 8004758:	08004881 	.word	0x08004881
 800475c:	0800470d 	.word	0x0800470d
 8004760:	0800470d 	.word	0x0800470d
 8004764:	080048c1 	.word	0x080048c1
 8004768:	0800470d 	.word	0x0800470d
 800476c:	080047c1 	.word	0x080047c1
 8004770:	0800470d 	.word	0x0800470d
 8004774:	0800470d 	.word	0x0800470d
 8004778:	08004889 	.word	0x08004889
 800477c:	680b      	ldr	r3, [r1, #0]
 800477e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004782:	1d1a      	adds	r2, r3, #4
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	600a      	str	r2, [r1, #0]
 8004788:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800478c:	2301      	movs	r3, #1
 800478e:	e0a4      	b.n	80048da <_printf_i+0x1f6>
 8004790:	6825      	ldr	r5, [r4, #0]
 8004792:	6808      	ldr	r0, [r1, #0]
 8004794:	062e      	lsls	r6, r5, #24
 8004796:	f100 0304 	add.w	r3, r0, #4
 800479a:	d50a      	bpl.n	80047b2 <_printf_i+0xce>
 800479c:	6805      	ldr	r5, [r0, #0]
 800479e:	600b      	str	r3, [r1, #0]
 80047a0:	2d00      	cmp	r5, #0
 80047a2:	da03      	bge.n	80047ac <_printf_i+0xc8>
 80047a4:	232d      	movs	r3, #45	; 0x2d
 80047a6:	426d      	negs	r5, r5
 80047a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047ac:	230a      	movs	r3, #10
 80047ae:	485e      	ldr	r0, [pc, #376]	; (8004928 <_printf_i+0x244>)
 80047b0:	e019      	b.n	80047e6 <_printf_i+0x102>
 80047b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80047b6:	6805      	ldr	r5, [r0, #0]
 80047b8:	600b      	str	r3, [r1, #0]
 80047ba:	bf18      	it	ne
 80047bc:	b22d      	sxthne	r5, r5
 80047be:	e7ef      	b.n	80047a0 <_printf_i+0xbc>
 80047c0:	680b      	ldr	r3, [r1, #0]
 80047c2:	6825      	ldr	r5, [r4, #0]
 80047c4:	1d18      	adds	r0, r3, #4
 80047c6:	6008      	str	r0, [r1, #0]
 80047c8:	0628      	lsls	r0, r5, #24
 80047ca:	d501      	bpl.n	80047d0 <_printf_i+0xec>
 80047cc:	681d      	ldr	r5, [r3, #0]
 80047ce:	e002      	b.n	80047d6 <_printf_i+0xf2>
 80047d0:	0669      	lsls	r1, r5, #25
 80047d2:	d5fb      	bpl.n	80047cc <_printf_i+0xe8>
 80047d4:	881d      	ldrh	r5, [r3, #0]
 80047d6:	2f6f      	cmp	r7, #111	; 0x6f
 80047d8:	bf0c      	ite	eq
 80047da:	2308      	moveq	r3, #8
 80047dc:	230a      	movne	r3, #10
 80047de:	4852      	ldr	r0, [pc, #328]	; (8004928 <_printf_i+0x244>)
 80047e0:	2100      	movs	r1, #0
 80047e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047e6:	6866      	ldr	r6, [r4, #4]
 80047e8:	2e00      	cmp	r6, #0
 80047ea:	bfa8      	it	ge
 80047ec:	6821      	ldrge	r1, [r4, #0]
 80047ee:	60a6      	str	r6, [r4, #8]
 80047f0:	bfa4      	itt	ge
 80047f2:	f021 0104 	bicge.w	r1, r1, #4
 80047f6:	6021      	strge	r1, [r4, #0]
 80047f8:	b90d      	cbnz	r5, 80047fe <_printf_i+0x11a>
 80047fa:	2e00      	cmp	r6, #0
 80047fc:	d04d      	beq.n	800489a <_printf_i+0x1b6>
 80047fe:	4616      	mov	r6, r2
 8004800:	fbb5 f1f3 	udiv	r1, r5, r3
 8004804:	fb03 5711 	mls	r7, r3, r1, r5
 8004808:	5dc7      	ldrb	r7, [r0, r7]
 800480a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800480e:	462f      	mov	r7, r5
 8004810:	42bb      	cmp	r3, r7
 8004812:	460d      	mov	r5, r1
 8004814:	d9f4      	bls.n	8004800 <_printf_i+0x11c>
 8004816:	2b08      	cmp	r3, #8
 8004818:	d10b      	bne.n	8004832 <_printf_i+0x14e>
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	07df      	lsls	r7, r3, #31
 800481e:	d508      	bpl.n	8004832 <_printf_i+0x14e>
 8004820:	6923      	ldr	r3, [r4, #16]
 8004822:	6861      	ldr	r1, [r4, #4]
 8004824:	4299      	cmp	r1, r3
 8004826:	bfde      	ittt	le
 8004828:	2330      	movle	r3, #48	; 0x30
 800482a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800482e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004832:	1b92      	subs	r2, r2, r6
 8004834:	6122      	str	r2, [r4, #16]
 8004836:	464b      	mov	r3, r9
 8004838:	4621      	mov	r1, r4
 800483a:	4640      	mov	r0, r8
 800483c:	f8cd a000 	str.w	sl, [sp]
 8004840:	aa03      	add	r2, sp, #12
 8004842:	f7ff fedf 	bl	8004604 <_printf_common>
 8004846:	3001      	adds	r0, #1
 8004848:	d14c      	bne.n	80048e4 <_printf_i+0x200>
 800484a:	f04f 30ff 	mov.w	r0, #4294967295
 800484e:	b004      	add	sp, #16
 8004850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004854:	4834      	ldr	r0, [pc, #208]	; (8004928 <_printf_i+0x244>)
 8004856:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800485a:	680e      	ldr	r6, [r1, #0]
 800485c:	6823      	ldr	r3, [r4, #0]
 800485e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004862:	061f      	lsls	r7, r3, #24
 8004864:	600e      	str	r6, [r1, #0]
 8004866:	d514      	bpl.n	8004892 <_printf_i+0x1ae>
 8004868:	07d9      	lsls	r1, r3, #31
 800486a:	bf44      	itt	mi
 800486c:	f043 0320 	orrmi.w	r3, r3, #32
 8004870:	6023      	strmi	r3, [r4, #0]
 8004872:	b91d      	cbnz	r5, 800487c <_printf_i+0x198>
 8004874:	6823      	ldr	r3, [r4, #0]
 8004876:	f023 0320 	bic.w	r3, r3, #32
 800487a:	6023      	str	r3, [r4, #0]
 800487c:	2310      	movs	r3, #16
 800487e:	e7af      	b.n	80047e0 <_printf_i+0xfc>
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	f043 0320 	orr.w	r3, r3, #32
 8004886:	6023      	str	r3, [r4, #0]
 8004888:	2378      	movs	r3, #120	; 0x78
 800488a:	4828      	ldr	r0, [pc, #160]	; (800492c <_printf_i+0x248>)
 800488c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004890:	e7e3      	b.n	800485a <_printf_i+0x176>
 8004892:	065e      	lsls	r6, r3, #25
 8004894:	bf48      	it	mi
 8004896:	b2ad      	uxthmi	r5, r5
 8004898:	e7e6      	b.n	8004868 <_printf_i+0x184>
 800489a:	4616      	mov	r6, r2
 800489c:	e7bb      	b.n	8004816 <_printf_i+0x132>
 800489e:	680b      	ldr	r3, [r1, #0]
 80048a0:	6826      	ldr	r6, [r4, #0]
 80048a2:	1d1d      	adds	r5, r3, #4
 80048a4:	6960      	ldr	r0, [r4, #20]
 80048a6:	600d      	str	r5, [r1, #0]
 80048a8:	0635      	lsls	r5, r6, #24
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	d501      	bpl.n	80048b2 <_printf_i+0x1ce>
 80048ae:	6018      	str	r0, [r3, #0]
 80048b0:	e002      	b.n	80048b8 <_printf_i+0x1d4>
 80048b2:	0671      	lsls	r1, r6, #25
 80048b4:	d5fb      	bpl.n	80048ae <_printf_i+0x1ca>
 80048b6:	8018      	strh	r0, [r3, #0]
 80048b8:	2300      	movs	r3, #0
 80048ba:	4616      	mov	r6, r2
 80048bc:	6123      	str	r3, [r4, #16]
 80048be:	e7ba      	b.n	8004836 <_printf_i+0x152>
 80048c0:	680b      	ldr	r3, [r1, #0]
 80048c2:	1d1a      	adds	r2, r3, #4
 80048c4:	600a      	str	r2, [r1, #0]
 80048c6:	681e      	ldr	r6, [r3, #0]
 80048c8:	2100      	movs	r1, #0
 80048ca:	4630      	mov	r0, r6
 80048cc:	6862      	ldr	r2, [r4, #4]
 80048ce:	f000 fed9 	bl	8005684 <memchr>
 80048d2:	b108      	cbz	r0, 80048d8 <_printf_i+0x1f4>
 80048d4:	1b80      	subs	r0, r0, r6
 80048d6:	6060      	str	r0, [r4, #4]
 80048d8:	6863      	ldr	r3, [r4, #4]
 80048da:	6123      	str	r3, [r4, #16]
 80048dc:	2300      	movs	r3, #0
 80048de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048e2:	e7a8      	b.n	8004836 <_printf_i+0x152>
 80048e4:	4632      	mov	r2, r6
 80048e6:	4649      	mov	r1, r9
 80048e8:	4640      	mov	r0, r8
 80048ea:	6923      	ldr	r3, [r4, #16]
 80048ec:	47d0      	blx	sl
 80048ee:	3001      	adds	r0, #1
 80048f0:	d0ab      	beq.n	800484a <_printf_i+0x166>
 80048f2:	6823      	ldr	r3, [r4, #0]
 80048f4:	079b      	lsls	r3, r3, #30
 80048f6:	d413      	bmi.n	8004920 <_printf_i+0x23c>
 80048f8:	68e0      	ldr	r0, [r4, #12]
 80048fa:	9b03      	ldr	r3, [sp, #12]
 80048fc:	4298      	cmp	r0, r3
 80048fe:	bfb8      	it	lt
 8004900:	4618      	movlt	r0, r3
 8004902:	e7a4      	b.n	800484e <_printf_i+0x16a>
 8004904:	2301      	movs	r3, #1
 8004906:	4632      	mov	r2, r6
 8004908:	4649      	mov	r1, r9
 800490a:	4640      	mov	r0, r8
 800490c:	47d0      	blx	sl
 800490e:	3001      	adds	r0, #1
 8004910:	d09b      	beq.n	800484a <_printf_i+0x166>
 8004912:	3501      	adds	r5, #1
 8004914:	68e3      	ldr	r3, [r4, #12]
 8004916:	9903      	ldr	r1, [sp, #12]
 8004918:	1a5b      	subs	r3, r3, r1
 800491a:	42ab      	cmp	r3, r5
 800491c:	dcf2      	bgt.n	8004904 <_printf_i+0x220>
 800491e:	e7eb      	b.n	80048f8 <_printf_i+0x214>
 8004920:	2500      	movs	r5, #0
 8004922:	f104 0619 	add.w	r6, r4, #25
 8004926:	e7f5      	b.n	8004914 <_printf_i+0x230>
 8004928:	08006e3e 	.word	0x08006e3e
 800492c:	08006e4f 	.word	0x08006e4f

08004930 <siprintf>:
 8004930:	b40e      	push	{r1, r2, r3}
 8004932:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004936:	b500      	push	{lr}
 8004938:	b09c      	sub	sp, #112	; 0x70
 800493a:	ab1d      	add	r3, sp, #116	; 0x74
 800493c:	9002      	str	r0, [sp, #8]
 800493e:	9006      	str	r0, [sp, #24]
 8004940:	9107      	str	r1, [sp, #28]
 8004942:	9104      	str	r1, [sp, #16]
 8004944:	4808      	ldr	r0, [pc, #32]	; (8004968 <siprintf+0x38>)
 8004946:	4909      	ldr	r1, [pc, #36]	; (800496c <siprintf+0x3c>)
 8004948:	f853 2b04 	ldr.w	r2, [r3], #4
 800494c:	9105      	str	r1, [sp, #20]
 800494e:	6800      	ldr	r0, [r0, #0]
 8004950:	a902      	add	r1, sp, #8
 8004952:	9301      	str	r3, [sp, #4]
 8004954:	f001 fb44 	bl	8005fe0 <_svfiprintf_r>
 8004958:	2200      	movs	r2, #0
 800495a:	9b02      	ldr	r3, [sp, #8]
 800495c:	701a      	strb	r2, [r3, #0]
 800495e:	b01c      	add	sp, #112	; 0x70
 8004960:	f85d eb04 	ldr.w	lr, [sp], #4
 8004964:	b003      	add	sp, #12
 8004966:	4770      	bx	lr
 8004968:	2000000c 	.word	0x2000000c
 800496c:	ffff0208 	.word	0xffff0208

08004970 <quorem>:
 8004970:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004974:	6903      	ldr	r3, [r0, #16]
 8004976:	690c      	ldr	r4, [r1, #16]
 8004978:	4607      	mov	r7, r0
 800497a:	42a3      	cmp	r3, r4
 800497c:	f2c0 8083 	blt.w	8004a86 <quorem+0x116>
 8004980:	3c01      	subs	r4, #1
 8004982:	f100 0514 	add.w	r5, r0, #20
 8004986:	f101 0814 	add.w	r8, r1, #20
 800498a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800498e:	9301      	str	r3, [sp, #4]
 8004990:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004994:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004998:	3301      	adds	r3, #1
 800499a:	429a      	cmp	r2, r3
 800499c:	fbb2 f6f3 	udiv	r6, r2, r3
 80049a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80049a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80049a8:	d332      	bcc.n	8004a10 <quorem+0xa0>
 80049aa:	f04f 0e00 	mov.w	lr, #0
 80049ae:	4640      	mov	r0, r8
 80049b0:	46ac      	mov	ip, r5
 80049b2:	46f2      	mov	sl, lr
 80049b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80049b8:	b293      	uxth	r3, r2
 80049ba:	fb06 e303 	mla	r3, r6, r3, lr
 80049be:	0c12      	lsrs	r2, r2, #16
 80049c0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80049c4:	fb06 e202 	mla	r2, r6, r2, lr
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	ebaa 0303 	sub.w	r3, sl, r3
 80049ce:	f8dc a000 	ldr.w	sl, [ip]
 80049d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80049d6:	fa1f fa8a 	uxth.w	sl, sl
 80049da:	4453      	add	r3, sl
 80049dc:	fa1f fa82 	uxth.w	sl, r2
 80049e0:	f8dc 2000 	ldr.w	r2, [ip]
 80049e4:	4581      	cmp	r9, r0
 80049e6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80049ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80049f4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80049f8:	f84c 3b04 	str.w	r3, [ip], #4
 80049fc:	d2da      	bcs.n	80049b4 <quorem+0x44>
 80049fe:	f855 300b 	ldr.w	r3, [r5, fp]
 8004a02:	b92b      	cbnz	r3, 8004a10 <quorem+0xa0>
 8004a04:	9b01      	ldr	r3, [sp, #4]
 8004a06:	3b04      	subs	r3, #4
 8004a08:	429d      	cmp	r5, r3
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	d32f      	bcc.n	8004a6e <quorem+0xfe>
 8004a0e:	613c      	str	r4, [r7, #16]
 8004a10:	4638      	mov	r0, r7
 8004a12:	f001 f8cd 	bl	8005bb0 <__mcmp>
 8004a16:	2800      	cmp	r0, #0
 8004a18:	db25      	blt.n	8004a66 <quorem+0xf6>
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	f04f 0c00 	mov.w	ip, #0
 8004a20:	3601      	adds	r6, #1
 8004a22:	f858 1b04 	ldr.w	r1, [r8], #4
 8004a26:	f8d0 e000 	ldr.w	lr, [r0]
 8004a2a:	b28b      	uxth	r3, r1
 8004a2c:	ebac 0303 	sub.w	r3, ip, r3
 8004a30:	fa1f f28e 	uxth.w	r2, lr
 8004a34:	4413      	add	r3, r2
 8004a36:	0c0a      	lsrs	r2, r1, #16
 8004a38:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004a3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a46:	45c1      	cmp	r9, r8
 8004a48:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004a4c:	f840 3b04 	str.w	r3, [r0], #4
 8004a50:	d2e7      	bcs.n	8004a22 <quorem+0xb2>
 8004a52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a5a:	b922      	cbnz	r2, 8004a66 <quorem+0xf6>
 8004a5c:	3b04      	subs	r3, #4
 8004a5e:	429d      	cmp	r5, r3
 8004a60:	461a      	mov	r2, r3
 8004a62:	d30a      	bcc.n	8004a7a <quorem+0x10a>
 8004a64:	613c      	str	r4, [r7, #16]
 8004a66:	4630      	mov	r0, r6
 8004a68:	b003      	add	sp, #12
 8004a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a6e:	6812      	ldr	r2, [r2, #0]
 8004a70:	3b04      	subs	r3, #4
 8004a72:	2a00      	cmp	r2, #0
 8004a74:	d1cb      	bne.n	8004a0e <quorem+0x9e>
 8004a76:	3c01      	subs	r4, #1
 8004a78:	e7c6      	b.n	8004a08 <quorem+0x98>
 8004a7a:	6812      	ldr	r2, [r2, #0]
 8004a7c:	3b04      	subs	r3, #4
 8004a7e:	2a00      	cmp	r2, #0
 8004a80:	d1f0      	bne.n	8004a64 <quorem+0xf4>
 8004a82:	3c01      	subs	r4, #1
 8004a84:	e7eb      	b.n	8004a5e <quorem+0xee>
 8004a86:	2000      	movs	r0, #0
 8004a88:	e7ee      	b.n	8004a68 <quorem+0xf8>
 8004a8a:	0000      	movs	r0, r0
 8004a8c:	0000      	movs	r0, r0
	...

08004a90 <_dtoa_r>:
 8004a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a94:	4616      	mov	r6, r2
 8004a96:	461f      	mov	r7, r3
 8004a98:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004a9a:	b099      	sub	sp, #100	; 0x64
 8004a9c:	4605      	mov	r5, r0
 8004a9e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004aa2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004aa6:	b974      	cbnz	r4, 8004ac6 <_dtoa_r+0x36>
 8004aa8:	2010      	movs	r0, #16
 8004aaa:	f000 fde3 	bl	8005674 <malloc>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	6268      	str	r0, [r5, #36]	; 0x24
 8004ab2:	b920      	cbnz	r0, 8004abe <_dtoa_r+0x2e>
 8004ab4:	21ea      	movs	r1, #234	; 0xea
 8004ab6:	4bae      	ldr	r3, [pc, #696]	; (8004d70 <_dtoa_r+0x2e0>)
 8004ab8:	48ae      	ldr	r0, [pc, #696]	; (8004d74 <_dtoa_r+0x2e4>)
 8004aba:	f001 fba1 	bl	8006200 <__assert_func>
 8004abe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004ac2:	6004      	str	r4, [r0, #0]
 8004ac4:	60c4      	str	r4, [r0, #12]
 8004ac6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ac8:	6819      	ldr	r1, [r3, #0]
 8004aca:	b151      	cbz	r1, 8004ae2 <_dtoa_r+0x52>
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	2301      	movs	r3, #1
 8004ad0:	4093      	lsls	r3, r2
 8004ad2:	604a      	str	r2, [r1, #4]
 8004ad4:	608b      	str	r3, [r1, #8]
 8004ad6:	4628      	mov	r0, r5
 8004ad8:	f000 fe30 	bl	800573c <_Bfree>
 8004adc:	2200      	movs	r2, #0
 8004ade:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	1e3b      	subs	r3, r7, #0
 8004ae4:	bfaf      	iteee	ge
 8004ae6:	2300      	movge	r3, #0
 8004ae8:	2201      	movlt	r2, #1
 8004aea:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004aee:	9305      	strlt	r3, [sp, #20]
 8004af0:	bfa8      	it	ge
 8004af2:	f8c8 3000 	strge.w	r3, [r8]
 8004af6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004afa:	4b9f      	ldr	r3, [pc, #636]	; (8004d78 <_dtoa_r+0x2e8>)
 8004afc:	bfb8      	it	lt
 8004afe:	f8c8 2000 	strlt.w	r2, [r8]
 8004b02:	ea33 0309 	bics.w	r3, r3, r9
 8004b06:	d119      	bne.n	8004b3c <_dtoa_r+0xac>
 8004b08:	f242 730f 	movw	r3, #9999	; 0x270f
 8004b0c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004b0e:	6013      	str	r3, [r2, #0]
 8004b10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004b14:	4333      	orrs	r3, r6
 8004b16:	f000 8580 	beq.w	800561a <_dtoa_r+0xb8a>
 8004b1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004b1c:	b953      	cbnz	r3, 8004b34 <_dtoa_r+0xa4>
 8004b1e:	4b97      	ldr	r3, [pc, #604]	; (8004d7c <_dtoa_r+0x2ec>)
 8004b20:	e022      	b.n	8004b68 <_dtoa_r+0xd8>
 8004b22:	4b97      	ldr	r3, [pc, #604]	; (8004d80 <_dtoa_r+0x2f0>)
 8004b24:	9308      	str	r3, [sp, #32]
 8004b26:	3308      	adds	r3, #8
 8004b28:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004b2a:	6013      	str	r3, [r2, #0]
 8004b2c:	9808      	ldr	r0, [sp, #32]
 8004b2e:	b019      	add	sp, #100	; 0x64
 8004b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b34:	4b91      	ldr	r3, [pc, #580]	; (8004d7c <_dtoa_r+0x2ec>)
 8004b36:	9308      	str	r3, [sp, #32]
 8004b38:	3303      	adds	r3, #3
 8004b3a:	e7f5      	b.n	8004b28 <_dtoa_r+0x98>
 8004b3c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004b40:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004b44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b48:	2200      	movs	r2, #0
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	f7fb ff2c 	bl	80009a8 <__aeabi_dcmpeq>
 8004b50:	4680      	mov	r8, r0
 8004b52:	b158      	cbz	r0, 8004b6c <_dtoa_r+0xdc>
 8004b54:	2301      	movs	r3, #1
 8004b56:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 8559 	beq.w	8005614 <_dtoa_r+0xb84>
 8004b62:	4888      	ldr	r0, [pc, #544]	; (8004d84 <_dtoa_r+0x2f4>)
 8004b64:	6018      	str	r0, [r3, #0]
 8004b66:	1e43      	subs	r3, r0, #1
 8004b68:	9308      	str	r3, [sp, #32]
 8004b6a:	e7df      	b.n	8004b2c <_dtoa_r+0x9c>
 8004b6c:	ab16      	add	r3, sp, #88	; 0x58
 8004b6e:	9301      	str	r3, [sp, #4]
 8004b70:	ab17      	add	r3, sp, #92	; 0x5c
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	4628      	mov	r0, r5
 8004b76:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004b7a:	f001 f8c5 	bl	8005d08 <__d2b>
 8004b7e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004b82:	4682      	mov	sl, r0
 8004b84:	2c00      	cmp	r4, #0
 8004b86:	d07e      	beq.n	8004c86 <_dtoa_r+0x1f6>
 8004b88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b8e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004b92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b96:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004b9a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004b9e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	4b78      	ldr	r3, [pc, #480]	; (8004d88 <_dtoa_r+0x2f8>)
 8004ba6:	f7fb fadf 	bl	8000168 <__aeabi_dsub>
 8004baa:	a36b      	add	r3, pc, #428	; (adr r3, 8004d58 <_dtoa_r+0x2c8>)
 8004bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb0:	f7fb fc92 	bl	80004d8 <__aeabi_dmul>
 8004bb4:	a36a      	add	r3, pc, #424	; (adr r3, 8004d60 <_dtoa_r+0x2d0>)
 8004bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bba:	f7fb fad7 	bl	800016c <__adddf3>
 8004bbe:	4606      	mov	r6, r0
 8004bc0:	4620      	mov	r0, r4
 8004bc2:	460f      	mov	r7, r1
 8004bc4:	f7fb fc1e 	bl	8000404 <__aeabi_i2d>
 8004bc8:	a367      	add	r3, pc, #412	; (adr r3, 8004d68 <_dtoa_r+0x2d8>)
 8004bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bce:	f7fb fc83 	bl	80004d8 <__aeabi_dmul>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	4630      	mov	r0, r6
 8004bd8:	4639      	mov	r1, r7
 8004bda:	f7fb fac7 	bl	800016c <__adddf3>
 8004bde:	4606      	mov	r6, r0
 8004be0:	460f      	mov	r7, r1
 8004be2:	f7fb ff29 	bl	8000a38 <__aeabi_d2iz>
 8004be6:	2200      	movs	r2, #0
 8004be8:	4681      	mov	r9, r0
 8004bea:	2300      	movs	r3, #0
 8004bec:	4630      	mov	r0, r6
 8004bee:	4639      	mov	r1, r7
 8004bf0:	f7fb fee4 	bl	80009bc <__aeabi_dcmplt>
 8004bf4:	b148      	cbz	r0, 8004c0a <_dtoa_r+0x17a>
 8004bf6:	4648      	mov	r0, r9
 8004bf8:	f7fb fc04 	bl	8000404 <__aeabi_i2d>
 8004bfc:	4632      	mov	r2, r6
 8004bfe:	463b      	mov	r3, r7
 8004c00:	f7fb fed2 	bl	80009a8 <__aeabi_dcmpeq>
 8004c04:	b908      	cbnz	r0, 8004c0a <_dtoa_r+0x17a>
 8004c06:	f109 39ff 	add.w	r9, r9, #4294967295
 8004c0a:	f1b9 0f16 	cmp.w	r9, #22
 8004c0e:	d857      	bhi.n	8004cc0 <_dtoa_r+0x230>
 8004c10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c14:	4b5d      	ldr	r3, [pc, #372]	; (8004d8c <_dtoa_r+0x2fc>)
 8004c16:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1e:	f7fb fecd 	bl	80009bc <__aeabi_dcmplt>
 8004c22:	2800      	cmp	r0, #0
 8004c24:	d04e      	beq.n	8004cc4 <_dtoa_r+0x234>
 8004c26:	2300      	movs	r3, #0
 8004c28:	f109 39ff 	add.w	r9, r9, #4294967295
 8004c2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004c30:	1b1c      	subs	r4, r3, r4
 8004c32:	1e63      	subs	r3, r4, #1
 8004c34:	9309      	str	r3, [sp, #36]	; 0x24
 8004c36:	bf49      	itett	mi
 8004c38:	f1c4 0301 	rsbmi	r3, r4, #1
 8004c3c:	2300      	movpl	r3, #0
 8004c3e:	9306      	strmi	r3, [sp, #24]
 8004c40:	2300      	movmi	r3, #0
 8004c42:	bf54      	ite	pl
 8004c44:	9306      	strpl	r3, [sp, #24]
 8004c46:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004c48:	f1b9 0f00 	cmp.w	r9, #0
 8004c4c:	db3c      	blt.n	8004cc8 <_dtoa_r+0x238>
 8004c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c50:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004c54:	444b      	add	r3, r9
 8004c56:	9309      	str	r3, [sp, #36]	; 0x24
 8004c58:	2300      	movs	r3, #0
 8004c5a:	930a      	str	r3, [sp, #40]	; 0x28
 8004c5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c5e:	2b09      	cmp	r3, #9
 8004c60:	d86c      	bhi.n	8004d3c <_dtoa_r+0x2ac>
 8004c62:	2b05      	cmp	r3, #5
 8004c64:	bfc4      	itt	gt
 8004c66:	3b04      	subgt	r3, #4
 8004c68:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004c6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c6c:	bfc8      	it	gt
 8004c6e:	2400      	movgt	r4, #0
 8004c70:	f1a3 0302 	sub.w	r3, r3, #2
 8004c74:	bfd8      	it	le
 8004c76:	2401      	movle	r4, #1
 8004c78:	2b03      	cmp	r3, #3
 8004c7a:	f200 808b 	bhi.w	8004d94 <_dtoa_r+0x304>
 8004c7e:	e8df f003 	tbb	[pc, r3]
 8004c82:	4f2d      	.short	0x4f2d
 8004c84:	5b4d      	.short	0x5b4d
 8004c86:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004c8a:	441c      	add	r4, r3
 8004c8c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	bfc3      	ittte	gt
 8004c94:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004c98:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004c9c:	fa09 f303 	lslgt.w	r3, r9, r3
 8004ca0:	f1c3 0320 	rsble	r3, r3, #32
 8004ca4:	bfc6      	itte	gt
 8004ca6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004caa:	4318      	orrgt	r0, r3
 8004cac:	fa06 f003 	lslle.w	r0, r6, r3
 8004cb0:	f7fb fb98 	bl	80003e4 <__aeabi_ui2d>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004cba:	3c01      	subs	r4, #1
 8004cbc:	9313      	str	r3, [sp, #76]	; 0x4c
 8004cbe:	e770      	b.n	8004ba2 <_dtoa_r+0x112>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e7b3      	b.n	8004c2c <_dtoa_r+0x19c>
 8004cc4:	900f      	str	r0, [sp, #60]	; 0x3c
 8004cc6:	e7b2      	b.n	8004c2e <_dtoa_r+0x19e>
 8004cc8:	9b06      	ldr	r3, [sp, #24]
 8004cca:	eba3 0309 	sub.w	r3, r3, r9
 8004cce:	9306      	str	r3, [sp, #24]
 8004cd0:	f1c9 0300 	rsb	r3, r9, #0
 8004cd4:	930a      	str	r3, [sp, #40]	; 0x28
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	930e      	str	r3, [sp, #56]	; 0x38
 8004cda:	e7bf      	b.n	8004c5c <_dtoa_r+0x1cc>
 8004cdc:	2300      	movs	r3, #0
 8004cde:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ce0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	dc59      	bgt.n	8004d9a <_dtoa_r+0x30a>
 8004ce6:	f04f 0b01 	mov.w	fp, #1
 8004cea:	465b      	mov	r3, fp
 8004cec:	f8cd b008 	str.w	fp, [sp, #8]
 8004cf0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004cf8:	6042      	str	r2, [r0, #4]
 8004cfa:	2204      	movs	r2, #4
 8004cfc:	f102 0614 	add.w	r6, r2, #20
 8004d00:	429e      	cmp	r6, r3
 8004d02:	6841      	ldr	r1, [r0, #4]
 8004d04:	d94f      	bls.n	8004da6 <_dtoa_r+0x316>
 8004d06:	4628      	mov	r0, r5
 8004d08:	f000 fcd8 	bl	80056bc <_Balloc>
 8004d0c:	9008      	str	r0, [sp, #32]
 8004d0e:	2800      	cmp	r0, #0
 8004d10:	d14d      	bne.n	8004dae <_dtoa_r+0x31e>
 8004d12:	4602      	mov	r2, r0
 8004d14:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004d18:	4b1d      	ldr	r3, [pc, #116]	; (8004d90 <_dtoa_r+0x300>)
 8004d1a:	e6cd      	b.n	8004ab8 <_dtoa_r+0x28>
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e7de      	b.n	8004cde <_dtoa_r+0x24e>
 8004d20:	2300      	movs	r3, #0
 8004d22:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d24:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004d26:	eb09 0b03 	add.w	fp, r9, r3
 8004d2a:	f10b 0301 	add.w	r3, fp, #1
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	9302      	str	r3, [sp, #8]
 8004d32:	bfb8      	it	lt
 8004d34:	2301      	movlt	r3, #1
 8004d36:	e7dd      	b.n	8004cf4 <_dtoa_r+0x264>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e7f2      	b.n	8004d22 <_dtoa_r+0x292>
 8004d3c:	2401      	movs	r4, #1
 8004d3e:	2300      	movs	r3, #0
 8004d40:	940b      	str	r4, [sp, #44]	; 0x2c
 8004d42:	9322      	str	r3, [sp, #136]	; 0x88
 8004d44:	f04f 3bff 	mov.w	fp, #4294967295
 8004d48:	2200      	movs	r2, #0
 8004d4a:	2312      	movs	r3, #18
 8004d4c:	f8cd b008 	str.w	fp, [sp, #8]
 8004d50:	9223      	str	r2, [sp, #140]	; 0x8c
 8004d52:	e7cf      	b.n	8004cf4 <_dtoa_r+0x264>
 8004d54:	f3af 8000 	nop.w
 8004d58:	636f4361 	.word	0x636f4361
 8004d5c:	3fd287a7 	.word	0x3fd287a7
 8004d60:	8b60c8b3 	.word	0x8b60c8b3
 8004d64:	3fc68a28 	.word	0x3fc68a28
 8004d68:	509f79fb 	.word	0x509f79fb
 8004d6c:	3fd34413 	.word	0x3fd34413
 8004d70:	08006e6d 	.word	0x08006e6d
 8004d74:	08006e84 	.word	0x08006e84
 8004d78:	7ff00000 	.word	0x7ff00000
 8004d7c:	08006e69 	.word	0x08006e69
 8004d80:	08006e60 	.word	0x08006e60
 8004d84:	08006e3d 	.word	0x08006e3d
 8004d88:	3ff80000 	.word	0x3ff80000
 8004d8c:	08006f80 	.word	0x08006f80
 8004d90:	08006ee3 	.word	0x08006ee3
 8004d94:	2301      	movs	r3, #1
 8004d96:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d98:	e7d4      	b.n	8004d44 <_dtoa_r+0x2b4>
 8004d9a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004d9e:	465b      	mov	r3, fp
 8004da0:	f8cd b008 	str.w	fp, [sp, #8]
 8004da4:	e7a6      	b.n	8004cf4 <_dtoa_r+0x264>
 8004da6:	3101      	adds	r1, #1
 8004da8:	6041      	str	r1, [r0, #4]
 8004daa:	0052      	lsls	r2, r2, #1
 8004dac:	e7a6      	b.n	8004cfc <_dtoa_r+0x26c>
 8004dae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004db0:	9a08      	ldr	r2, [sp, #32]
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	9b02      	ldr	r3, [sp, #8]
 8004db6:	2b0e      	cmp	r3, #14
 8004db8:	f200 80a8 	bhi.w	8004f0c <_dtoa_r+0x47c>
 8004dbc:	2c00      	cmp	r4, #0
 8004dbe:	f000 80a5 	beq.w	8004f0c <_dtoa_r+0x47c>
 8004dc2:	f1b9 0f00 	cmp.w	r9, #0
 8004dc6:	dd34      	ble.n	8004e32 <_dtoa_r+0x3a2>
 8004dc8:	4a9a      	ldr	r2, [pc, #616]	; (8005034 <_dtoa_r+0x5a4>)
 8004dca:	f009 030f 	and.w	r3, r9, #15
 8004dce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004dd2:	f419 7f80 	tst.w	r9, #256	; 0x100
 8004dd6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004dda:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004dde:	ea4f 1429 	mov.w	r4, r9, asr #4
 8004de2:	d016      	beq.n	8004e12 <_dtoa_r+0x382>
 8004de4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004de8:	4b93      	ldr	r3, [pc, #588]	; (8005038 <_dtoa_r+0x5a8>)
 8004dea:	2703      	movs	r7, #3
 8004dec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004df0:	f7fb fc9c 	bl	800072c <__aeabi_ddiv>
 8004df4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004df8:	f004 040f 	and.w	r4, r4, #15
 8004dfc:	4e8e      	ldr	r6, [pc, #568]	; (8005038 <_dtoa_r+0x5a8>)
 8004dfe:	b954      	cbnz	r4, 8004e16 <_dtoa_r+0x386>
 8004e00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004e04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e08:	f7fb fc90 	bl	800072c <__aeabi_ddiv>
 8004e0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e10:	e029      	b.n	8004e66 <_dtoa_r+0x3d6>
 8004e12:	2702      	movs	r7, #2
 8004e14:	e7f2      	b.n	8004dfc <_dtoa_r+0x36c>
 8004e16:	07e1      	lsls	r1, r4, #31
 8004e18:	d508      	bpl.n	8004e2c <_dtoa_r+0x39c>
 8004e1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e1e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004e22:	f7fb fb59 	bl	80004d8 <__aeabi_dmul>
 8004e26:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004e2a:	3701      	adds	r7, #1
 8004e2c:	1064      	asrs	r4, r4, #1
 8004e2e:	3608      	adds	r6, #8
 8004e30:	e7e5      	b.n	8004dfe <_dtoa_r+0x36e>
 8004e32:	f000 80a5 	beq.w	8004f80 <_dtoa_r+0x4f0>
 8004e36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e3a:	f1c9 0400 	rsb	r4, r9, #0
 8004e3e:	4b7d      	ldr	r3, [pc, #500]	; (8005034 <_dtoa_r+0x5a4>)
 8004e40:	f004 020f 	and.w	r2, r4, #15
 8004e44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4c:	f7fb fb44 	bl	80004d8 <__aeabi_dmul>
 8004e50:	2702      	movs	r7, #2
 8004e52:	2300      	movs	r3, #0
 8004e54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e58:	4e77      	ldr	r6, [pc, #476]	; (8005038 <_dtoa_r+0x5a8>)
 8004e5a:	1124      	asrs	r4, r4, #4
 8004e5c:	2c00      	cmp	r4, #0
 8004e5e:	f040 8084 	bne.w	8004f6a <_dtoa_r+0x4da>
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1d2      	bne.n	8004e0c <_dtoa_r+0x37c>
 8004e66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 808b 	beq.w	8004f84 <_dtoa_r+0x4f4>
 8004e6e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004e72:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004e76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	4b6f      	ldr	r3, [pc, #444]	; (800503c <_dtoa_r+0x5ac>)
 8004e7e:	f7fb fd9d 	bl	80009bc <__aeabi_dcmplt>
 8004e82:	2800      	cmp	r0, #0
 8004e84:	d07e      	beq.n	8004f84 <_dtoa_r+0x4f4>
 8004e86:	9b02      	ldr	r3, [sp, #8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d07b      	beq.n	8004f84 <_dtoa_r+0x4f4>
 8004e8c:	f1bb 0f00 	cmp.w	fp, #0
 8004e90:	dd38      	ble.n	8004f04 <_dtoa_r+0x474>
 8004e92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e96:	2200      	movs	r2, #0
 8004e98:	4b69      	ldr	r3, [pc, #420]	; (8005040 <_dtoa_r+0x5b0>)
 8004e9a:	f7fb fb1d 	bl	80004d8 <__aeabi_dmul>
 8004e9e:	465c      	mov	r4, fp
 8004ea0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ea4:	f109 38ff 	add.w	r8, r9, #4294967295
 8004ea8:	3701      	adds	r7, #1
 8004eaa:	4638      	mov	r0, r7
 8004eac:	f7fb faaa 	bl	8000404 <__aeabi_i2d>
 8004eb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004eb4:	f7fb fb10 	bl	80004d8 <__aeabi_dmul>
 8004eb8:	2200      	movs	r2, #0
 8004eba:	4b62      	ldr	r3, [pc, #392]	; (8005044 <_dtoa_r+0x5b4>)
 8004ebc:	f7fb f956 	bl	800016c <__adddf3>
 8004ec0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004ec4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ec8:	9611      	str	r6, [sp, #68]	; 0x44
 8004eca:	2c00      	cmp	r4, #0
 8004ecc:	d15d      	bne.n	8004f8a <_dtoa_r+0x4fa>
 8004ece:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	4b5c      	ldr	r3, [pc, #368]	; (8005048 <_dtoa_r+0x5b8>)
 8004ed6:	f7fb f947 	bl	8000168 <__aeabi_dsub>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004ee2:	4633      	mov	r3, r6
 8004ee4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004ee6:	f7fb fd87 	bl	80009f8 <__aeabi_dcmpgt>
 8004eea:	2800      	cmp	r0, #0
 8004eec:	f040 829e 	bne.w	800542c <_dtoa_r+0x99c>
 8004ef0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ef4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004ef6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004efa:	f7fb fd5f 	bl	80009bc <__aeabi_dcmplt>
 8004efe:	2800      	cmp	r0, #0
 8004f00:	f040 8292 	bne.w	8005428 <_dtoa_r+0x998>
 8004f04:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004f08:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004f0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f2c0 8153 	blt.w	80051ba <_dtoa_r+0x72a>
 8004f14:	f1b9 0f0e 	cmp.w	r9, #14
 8004f18:	f300 814f 	bgt.w	80051ba <_dtoa_r+0x72a>
 8004f1c:	4b45      	ldr	r3, [pc, #276]	; (8005034 <_dtoa_r+0x5a4>)
 8004f1e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004f22:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f26:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004f2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f280 80db 	bge.w	80050e8 <_dtoa_r+0x658>
 8004f32:	9b02      	ldr	r3, [sp, #8]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f300 80d7 	bgt.w	80050e8 <_dtoa_r+0x658>
 8004f3a:	f040 8274 	bne.w	8005426 <_dtoa_r+0x996>
 8004f3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f42:	2200      	movs	r2, #0
 8004f44:	4b40      	ldr	r3, [pc, #256]	; (8005048 <_dtoa_r+0x5b8>)
 8004f46:	f7fb fac7 	bl	80004d8 <__aeabi_dmul>
 8004f4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f4e:	f7fb fd49 	bl	80009e4 <__aeabi_dcmpge>
 8004f52:	9c02      	ldr	r4, [sp, #8]
 8004f54:	4626      	mov	r6, r4
 8004f56:	2800      	cmp	r0, #0
 8004f58:	f040 824a 	bne.w	80053f0 <_dtoa_r+0x960>
 8004f5c:	2331      	movs	r3, #49	; 0x31
 8004f5e:	9f08      	ldr	r7, [sp, #32]
 8004f60:	f109 0901 	add.w	r9, r9, #1
 8004f64:	f807 3b01 	strb.w	r3, [r7], #1
 8004f68:	e246      	b.n	80053f8 <_dtoa_r+0x968>
 8004f6a:	07e2      	lsls	r2, r4, #31
 8004f6c:	d505      	bpl.n	8004f7a <_dtoa_r+0x4ea>
 8004f6e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004f72:	f7fb fab1 	bl	80004d8 <__aeabi_dmul>
 8004f76:	2301      	movs	r3, #1
 8004f78:	3701      	adds	r7, #1
 8004f7a:	1064      	asrs	r4, r4, #1
 8004f7c:	3608      	adds	r6, #8
 8004f7e:	e76d      	b.n	8004e5c <_dtoa_r+0x3cc>
 8004f80:	2702      	movs	r7, #2
 8004f82:	e770      	b.n	8004e66 <_dtoa_r+0x3d6>
 8004f84:	46c8      	mov	r8, r9
 8004f86:	9c02      	ldr	r4, [sp, #8]
 8004f88:	e78f      	b.n	8004eaa <_dtoa_r+0x41a>
 8004f8a:	9908      	ldr	r1, [sp, #32]
 8004f8c:	4b29      	ldr	r3, [pc, #164]	; (8005034 <_dtoa_r+0x5a4>)
 8004f8e:	4421      	add	r1, r4
 8004f90:	9112      	str	r1, [sp, #72]	; 0x48
 8004f92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004f98:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004f9c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004fa0:	2900      	cmp	r1, #0
 8004fa2:	d055      	beq.n	8005050 <_dtoa_r+0x5c0>
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	4929      	ldr	r1, [pc, #164]	; (800504c <_dtoa_r+0x5bc>)
 8004fa8:	f7fb fbc0 	bl	800072c <__aeabi_ddiv>
 8004fac:	463b      	mov	r3, r7
 8004fae:	4632      	mov	r2, r6
 8004fb0:	f7fb f8da 	bl	8000168 <__aeabi_dsub>
 8004fb4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004fb8:	9f08      	ldr	r7, [sp, #32]
 8004fba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fbe:	f7fb fd3b 	bl	8000a38 <__aeabi_d2iz>
 8004fc2:	4604      	mov	r4, r0
 8004fc4:	f7fb fa1e 	bl	8000404 <__aeabi_i2d>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fd0:	f7fb f8ca 	bl	8000168 <__aeabi_dsub>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	3430      	adds	r4, #48	; 0x30
 8004fda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004fde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004fe2:	f807 4b01 	strb.w	r4, [r7], #1
 8004fe6:	f7fb fce9 	bl	80009bc <__aeabi_dcmplt>
 8004fea:	2800      	cmp	r0, #0
 8004fec:	d174      	bne.n	80050d8 <_dtoa_r+0x648>
 8004fee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ff2:	2000      	movs	r0, #0
 8004ff4:	4911      	ldr	r1, [pc, #68]	; (800503c <_dtoa_r+0x5ac>)
 8004ff6:	f7fb f8b7 	bl	8000168 <__aeabi_dsub>
 8004ffa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004ffe:	f7fb fcdd 	bl	80009bc <__aeabi_dcmplt>
 8005002:	2800      	cmp	r0, #0
 8005004:	f040 80b6 	bne.w	8005174 <_dtoa_r+0x6e4>
 8005008:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800500a:	429f      	cmp	r7, r3
 800500c:	f43f af7a 	beq.w	8004f04 <_dtoa_r+0x474>
 8005010:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005014:	2200      	movs	r2, #0
 8005016:	4b0a      	ldr	r3, [pc, #40]	; (8005040 <_dtoa_r+0x5b0>)
 8005018:	f7fb fa5e 	bl	80004d8 <__aeabi_dmul>
 800501c:	2200      	movs	r2, #0
 800501e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005022:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005026:	4b06      	ldr	r3, [pc, #24]	; (8005040 <_dtoa_r+0x5b0>)
 8005028:	f7fb fa56 	bl	80004d8 <__aeabi_dmul>
 800502c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005030:	e7c3      	b.n	8004fba <_dtoa_r+0x52a>
 8005032:	bf00      	nop
 8005034:	08006f80 	.word	0x08006f80
 8005038:	08006f58 	.word	0x08006f58
 800503c:	3ff00000 	.word	0x3ff00000
 8005040:	40240000 	.word	0x40240000
 8005044:	401c0000 	.word	0x401c0000
 8005048:	40140000 	.word	0x40140000
 800504c:	3fe00000 	.word	0x3fe00000
 8005050:	4630      	mov	r0, r6
 8005052:	4639      	mov	r1, r7
 8005054:	f7fb fa40 	bl	80004d8 <__aeabi_dmul>
 8005058:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800505a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800505e:	9c08      	ldr	r4, [sp, #32]
 8005060:	9314      	str	r3, [sp, #80]	; 0x50
 8005062:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005066:	f7fb fce7 	bl	8000a38 <__aeabi_d2iz>
 800506a:	9015      	str	r0, [sp, #84]	; 0x54
 800506c:	f7fb f9ca 	bl	8000404 <__aeabi_i2d>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005078:	f7fb f876 	bl	8000168 <__aeabi_dsub>
 800507c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800507e:	4606      	mov	r6, r0
 8005080:	3330      	adds	r3, #48	; 0x30
 8005082:	f804 3b01 	strb.w	r3, [r4], #1
 8005086:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005088:	460f      	mov	r7, r1
 800508a:	429c      	cmp	r4, r3
 800508c:	f04f 0200 	mov.w	r2, #0
 8005090:	d124      	bne.n	80050dc <_dtoa_r+0x64c>
 8005092:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005096:	4bb3      	ldr	r3, [pc, #716]	; (8005364 <_dtoa_r+0x8d4>)
 8005098:	f7fb f868 	bl	800016c <__adddf3>
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	4630      	mov	r0, r6
 80050a2:	4639      	mov	r1, r7
 80050a4:	f7fb fca8 	bl	80009f8 <__aeabi_dcmpgt>
 80050a8:	2800      	cmp	r0, #0
 80050aa:	d162      	bne.n	8005172 <_dtoa_r+0x6e2>
 80050ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80050b0:	2000      	movs	r0, #0
 80050b2:	49ac      	ldr	r1, [pc, #688]	; (8005364 <_dtoa_r+0x8d4>)
 80050b4:	f7fb f858 	bl	8000168 <__aeabi_dsub>
 80050b8:	4602      	mov	r2, r0
 80050ba:	460b      	mov	r3, r1
 80050bc:	4630      	mov	r0, r6
 80050be:	4639      	mov	r1, r7
 80050c0:	f7fb fc7c 	bl	80009bc <__aeabi_dcmplt>
 80050c4:	2800      	cmp	r0, #0
 80050c6:	f43f af1d 	beq.w	8004f04 <_dtoa_r+0x474>
 80050ca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80050cc:	1e7b      	subs	r3, r7, #1
 80050ce:	9314      	str	r3, [sp, #80]	; 0x50
 80050d0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80050d4:	2b30      	cmp	r3, #48	; 0x30
 80050d6:	d0f8      	beq.n	80050ca <_dtoa_r+0x63a>
 80050d8:	46c1      	mov	r9, r8
 80050da:	e03a      	b.n	8005152 <_dtoa_r+0x6c2>
 80050dc:	4ba2      	ldr	r3, [pc, #648]	; (8005368 <_dtoa_r+0x8d8>)
 80050de:	f7fb f9fb 	bl	80004d8 <__aeabi_dmul>
 80050e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050e6:	e7bc      	b.n	8005062 <_dtoa_r+0x5d2>
 80050e8:	9f08      	ldr	r7, [sp, #32]
 80050ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80050ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050f2:	f7fb fb1b 	bl	800072c <__aeabi_ddiv>
 80050f6:	f7fb fc9f 	bl	8000a38 <__aeabi_d2iz>
 80050fa:	4604      	mov	r4, r0
 80050fc:	f7fb f982 	bl	8000404 <__aeabi_i2d>
 8005100:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005104:	f7fb f9e8 	bl	80004d8 <__aeabi_dmul>
 8005108:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800510c:	460b      	mov	r3, r1
 800510e:	4602      	mov	r2, r0
 8005110:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005114:	f7fb f828 	bl	8000168 <__aeabi_dsub>
 8005118:	f807 6b01 	strb.w	r6, [r7], #1
 800511c:	9e08      	ldr	r6, [sp, #32]
 800511e:	9b02      	ldr	r3, [sp, #8]
 8005120:	1bbe      	subs	r6, r7, r6
 8005122:	42b3      	cmp	r3, r6
 8005124:	d13a      	bne.n	800519c <_dtoa_r+0x70c>
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	f7fb f81f 	bl	800016c <__adddf3>
 800512e:	4602      	mov	r2, r0
 8005130:	460b      	mov	r3, r1
 8005132:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005136:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800513a:	f7fb fc5d 	bl	80009f8 <__aeabi_dcmpgt>
 800513e:	bb58      	cbnz	r0, 8005198 <_dtoa_r+0x708>
 8005140:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005144:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005148:	f7fb fc2e 	bl	80009a8 <__aeabi_dcmpeq>
 800514c:	b108      	cbz	r0, 8005152 <_dtoa_r+0x6c2>
 800514e:	07e1      	lsls	r1, r4, #31
 8005150:	d422      	bmi.n	8005198 <_dtoa_r+0x708>
 8005152:	4628      	mov	r0, r5
 8005154:	4651      	mov	r1, sl
 8005156:	f000 faf1 	bl	800573c <_Bfree>
 800515a:	2300      	movs	r3, #0
 800515c:	703b      	strb	r3, [r7, #0]
 800515e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005160:	f109 0001 	add.w	r0, r9, #1
 8005164:	6018      	str	r0, [r3, #0]
 8005166:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005168:	2b00      	cmp	r3, #0
 800516a:	f43f acdf 	beq.w	8004b2c <_dtoa_r+0x9c>
 800516e:	601f      	str	r7, [r3, #0]
 8005170:	e4dc      	b.n	8004b2c <_dtoa_r+0x9c>
 8005172:	4627      	mov	r7, r4
 8005174:	463b      	mov	r3, r7
 8005176:	461f      	mov	r7, r3
 8005178:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800517c:	2a39      	cmp	r2, #57	; 0x39
 800517e:	d107      	bne.n	8005190 <_dtoa_r+0x700>
 8005180:	9a08      	ldr	r2, [sp, #32]
 8005182:	429a      	cmp	r2, r3
 8005184:	d1f7      	bne.n	8005176 <_dtoa_r+0x6e6>
 8005186:	2230      	movs	r2, #48	; 0x30
 8005188:	9908      	ldr	r1, [sp, #32]
 800518a:	f108 0801 	add.w	r8, r8, #1
 800518e:	700a      	strb	r2, [r1, #0]
 8005190:	781a      	ldrb	r2, [r3, #0]
 8005192:	3201      	adds	r2, #1
 8005194:	701a      	strb	r2, [r3, #0]
 8005196:	e79f      	b.n	80050d8 <_dtoa_r+0x648>
 8005198:	46c8      	mov	r8, r9
 800519a:	e7eb      	b.n	8005174 <_dtoa_r+0x6e4>
 800519c:	2200      	movs	r2, #0
 800519e:	4b72      	ldr	r3, [pc, #456]	; (8005368 <_dtoa_r+0x8d8>)
 80051a0:	f7fb f99a 	bl	80004d8 <__aeabi_dmul>
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80051ac:	2200      	movs	r2, #0
 80051ae:	2300      	movs	r3, #0
 80051b0:	f7fb fbfa 	bl	80009a8 <__aeabi_dcmpeq>
 80051b4:	2800      	cmp	r0, #0
 80051b6:	d098      	beq.n	80050ea <_dtoa_r+0x65a>
 80051b8:	e7cb      	b.n	8005152 <_dtoa_r+0x6c2>
 80051ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80051bc:	2a00      	cmp	r2, #0
 80051be:	f000 80cd 	beq.w	800535c <_dtoa_r+0x8cc>
 80051c2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80051c4:	2a01      	cmp	r2, #1
 80051c6:	f300 80af 	bgt.w	8005328 <_dtoa_r+0x898>
 80051ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80051cc:	2a00      	cmp	r2, #0
 80051ce:	f000 80a7 	beq.w	8005320 <_dtoa_r+0x890>
 80051d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80051d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80051d8:	9f06      	ldr	r7, [sp, #24]
 80051da:	9a06      	ldr	r2, [sp, #24]
 80051dc:	2101      	movs	r1, #1
 80051de:	441a      	add	r2, r3
 80051e0:	9206      	str	r2, [sp, #24]
 80051e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051e4:	4628      	mov	r0, r5
 80051e6:	441a      	add	r2, r3
 80051e8:	9209      	str	r2, [sp, #36]	; 0x24
 80051ea:	f000 fb61 	bl	80058b0 <__i2b>
 80051ee:	4606      	mov	r6, r0
 80051f0:	2f00      	cmp	r7, #0
 80051f2:	dd0c      	ble.n	800520e <_dtoa_r+0x77e>
 80051f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	dd09      	ble.n	800520e <_dtoa_r+0x77e>
 80051fa:	42bb      	cmp	r3, r7
 80051fc:	bfa8      	it	ge
 80051fe:	463b      	movge	r3, r7
 8005200:	9a06      	ldr	r2, [sp, #24]
 8005202:	1aff      	subs	r7, r7, r3
 8005204:	1ad2      	subs	r2, r2, r3
 8005206:	9206      	str	r2, [sp, #24]
 8005208:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	9309      	str	r3, [sp, #36]	; 0x24
 800520e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005210:	b1f3      	cbz	r3, 8005250 <_dtoa_r+0x7c0>
 8005212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 80a9 	beq.w	800536c <_dtoa_r+0x8dc>
 800521a:	2c00      	cmp	r4, #0
 800521c:	dd10      	ble.n	8005240 <_dtoa_r+0x7b0>
 800521e:	4631      	mov	r1, r6
 8005220:	4622      	mov	r2, r4
 8005222:	4628      	mov	r0, r5
 8005224:	f000 fbfe 	bl	8005a24 <__pow5mult>
 8005228:	4652      	mov	r2, sl
 800522a:	4601      	mov	r1, r0
 800522c:	4606      	mov	r6, r0
 800522e:	4628      	mov	r0, r5
 8005230:	f000 fb54 	bl	80058dc <__multiply>
 8005234:	4680      	mov	r8, r0
 8005236:	4651      	mov	r1, sl
 8005238:	4628      	mov	r0, r5
 800523a:	f000 fa7f 	bl	800573c <_Bfree>
 800523e:	46c2      	mov	sl, r8
 8005240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005242:	1b1a      	subs	r2, r3, r4
 8005244:	d004      	beq.n	8005250 <_dtoa_r+0x7c0>
 8005246:	4651      	mov	r1, sl
 8005248:	4628      	mov	r0, r5
 800524a:	f000 fbeb 	bl	8005a24 <__pow5mult>
 800524e:	4682      	mov	sl, r0
 8005250:	2101      	movs	r1, #1
 8005252:	4628      	mov	r0, r5
 8005254:	f000 fb2c 	bl	80058b0 <__i2b>
 8005258:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800525a:	4604      	mov	r4, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	f340 8087 	ble.w	8005370 <_dtoa_r+0x8e0>
 8005262:	461a      	mov	r2, r3
 8005264:	4601      	mov	r1, r0
 8005266:	4628      	mov	r0, r5
 8005268:	f000 fbdc 	bl	8005a24 <__pow5mult>
 800526c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800526e:	4604      	mov	r4, r0
 8005270:	2b01      	cmp	r3, #1
 8005272:	f340 8080 	ble.w	8005376 <_dtoa_r+0x8e6>
 8005276:	f04f 0800 	mov.w	r8, #0
 800527a:	6923      	ldr	r3, [r4, #16]
 800527c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005280:	6918      	ldr	r0, [r3, #16]
 8005282:	f000 fac7 	bl	8005814 <__hi0bits>
 8005286:	f1c0 0020 	rsb	r0, r0, #32
 800528a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800528c:	4418      	add	r0, r3
 800528e:	f010 001f 	ands.w	r0, r0, #31
 8005292:	f000 8092 	beq.w	80053ba <_dtoa_r+0x92a>
 8005296:	f1c0 0320 	rsb	r3, r0, #32
 800529a:	2b04      	cmp	r3, #4
 800529c:	f340 808a 	ble.w	80053b4 <_dtoa_r+0x924>
 80052a0:	f1c0 001c 	rsb	r0, r0, #28
 80052a4:	9b06      	ldr	r3, [sp, #24]
 80052a6:	4407      	add	r7, r0
 80052a8:	4403      	add	r3, r0
 80052aa:	9306      	str	r3, [sp, #24]
 80052ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ae:	4403      	add	r3, r0
 80052b0:	9309      	str	r3, [sp, #36]	; 0x24
 80052b2:	9b06      	ldr	r3, [sp, #24]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	dd05      	ble.n	80052c4 <_dtoa_r+0x834>
 80052b8:	4651      	mov	r1, sl
 80052ba:	461a      	mov	r2, r3
 80052bc:	4628      	mov	r0, r5
 80052be:	f000 fc0b 	bl	8005ad8 <__lshift>
 80052c2:	4682      	mov	sl, r0
 80052c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	dd05      	ble.n	80052d6 <_dtoa_r+0x846>
 80052ca:	4621      	mov	r1, r4
 80052cc:	461a      	mov	r2, r3
 80052ce:	4628      	mov	r0, r5
 80052d0:	f000 fc02 	bl	8005ad8 <__lshift>
 80052d4:	4604      	mov	r4, r0
 80052d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d070      	beq.n	80053be <_dtoa_r+0x92e>
 80052dc:	4621      	mov	r1, r4
 80052de:	4650      	mov	r0, sl
 80052e0:	f000 fc66 	bl	8005bb0 <__mcmp>
 80052e4:	2800      	cmp	r0, #0
 80052e6:	da6a      	bge.n	80053be <_dtoa_r+0x92e>
 80052e8:	2300      	movs	r3, #0
 80052ea:	4651      	mov	r1, sl
 80052ec:	220a      	movs	r2, #10
 80052ee:	4628      	mov	r0, r5
 80052f0:	f000 fa46 	bl	8005780 <__multadd>
 80052f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052f6:	4682      	mov	sl, r0
 80052f8:	f109 39ff 	add.w	r9, r9, #4294967295
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 8193 	beq.w	8005628 <_dtoa_r+0xb98>
 8005302:	4631      	mov	r1, r6
 8005304:	2300      	movs	r3, #0
 8005306:	220a      	movs	r2, #10
 8005308:	4628      	mov	r0, r5
 800530a:	f000 fa39 	bl	8005780 <__multadd>
 800530e:	f1bb 0f00 	cmp.w	fp, #0
 8005312:	4606      	mov	r6, r0
 8005314:	f300 8093 	bgt.w	800543e <_dtoa_r+0x9ae>
 8005318:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800531a:	2b02      	cmp	r3, #2
 800531c:	dc57      	bgt.n	80053ce <_dtoa_r+0x93e>
 800531e:	e08e      	b.n	800543e <_dtoa_r+0x9ae>
 8005320:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005322:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005326:	e756      	b.n	80051d6 <_dtoa_r+0x746>
 8005328:	9b02      	ldr	r3, [sp, #8]
 800532a:	1e5c      	subs	r4, r3, #1
 800532c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800532e:	42a3      	cmp	r3, r4
 8005330:	bfb7      	itett	lt
 8005332:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005334:	1b1c      	subge	r4, r3, r4
 8005336:	1ae2      	sublt	r2, r4, r3
 8005338:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800533a:	bfbe      	ittt	lt
 800533c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800533e:	189b      	addlt	r3, r3, r2
 8005340:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005342:	9b02      	ldr	r3, [sp, #8]
 8005344:	bfb8      	it	lt
 8005346:	2400      	movlt	r4, #0
 8005348:	2b00      	cmp	r3, #0
 800534a:	bfbb      	ittet	lt
 800534c:	9b06      	ldrlt	r3, [sp, #24]
 800534e:	9a02      	ldrlt	r2, [sp, #8]
 8005350:	9f06      	ldrge	r7, [sp, #24]
 8005352:	1a9f      	sublt	r7, r3, r2
 8005354:	bfac      	ite	ge
 8005356:	9b02      	ldrge	r3, [sp, #8]
 8005358:	2300      	movlt	r3, #0
 800535a:	e73e      	b.n	80051da <_dtoa_r+0x74a>
 800535c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800535e:	9f06      	ldr	r7, [sp, #24]
 8005360:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005362:	e745      	b.n	80051f0 <_dtoa_r+0x760>
 8005364:	3fe00000 	.word	0x3fe00000
 8005368:	40240000 	.word	0x40240000
 800536c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800536e:	e76a      	b.n	8005246 <_dtoa_r+0x7b6>
 8005370:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005372:	2b01      	cmp	r3, #1
 8005374:	dc19      	bgt.n	80053aa <_dtoa_r+0x91a>
 8005376:	9b04      	ldr	r3, [sp, #16]
 8005378:	b9bb      	cbnz	r3, 80053aa <_dtoa_r+0x91a>
 800537a:	9b05      	ldr	r3, [sp, #20]
 800537c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005380:	b99b      	cbnz	r3, 80053aa <_dtoa_r+0x91a>
 8005382:	9b05      	ldr	r3, [sp, #20]
 8005384:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005388:	0d1b      	lsrs	r3, r3, #20
 800538a:	051b      	lsls	r3, r3, #20
 800538c:	b183      	cbz	r3, 80053b0 <_dtoa_r+0x920>
 800538e:	f04f 0801 	mov.w	r8, #1
 8005392:	9b06      	ldr	r3, [sp, #24]
 8005394:	3301      	adds	r3, #1
 8005396:	9306      	str	r3, [sp, #24]
 8005398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800539a:	3301      	adds	r3, #1
 800539c:	9309      	str	r3, [sp, #36]	; 0x24
 800539e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f47f af6a 	bne.w	800527a <_dtoa_r+0x7ea>
 80053a6:	2001      	movs	r0, #1
 80053a8:	e76f      	b.n	800528a <_dtoa_r+0x7fa>
 80053aa:	f04f 0800 	mov.w	r8, #0
 80053ae:	e7f6      	b.n	800539e <_dtoa_r+0x90e>
 80053b0:	4698      	mov	r8, r3
 80053b2:	e7f4      	b.n	800539e <_dtoa_r+0x90e>
 80053b4:	f43f af7d 	beq.w	80052b2 <_dtoa_r+0x822>
 80053b8:	4618      	mov	r0, r3
 80053ba:	301c      	adds	r0, #28
 80053bc:	e772      	b.n	80052a4 <_dtoa_r+0x814>
 80053be:	9b02      	ldr	r3, [sp, #8]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	dc36      	bgt.n	8005432 <_dtoa_r+0x9a2>
 80053c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	dd33      	ble.n	8005432 <_dtoa_r+0x9a2>
 80053ca:	f8dd b008 	ldr.w	fp, [sp, #8]
 80053ce:	f1bb 0f00 	cmp.w	fp, #0
 80053d2:	d10d      	bne.n	80053f0 <_dtoa_r+0x960>
 80053d4:	4621      	mov	r1, r4
 80053d6:	465b      	mov	r3, fp
 80053d8:	2205      	movs	r2, #5
 80053da:	4628      	mov	r0, r5
 80053dc:	f000 f9d0 	bl	8005780 <__multadd>
 80053e0:	4601      	mov	r1, r0
 80053e2:	4604      	mov	r4, r0
 80053e4:	4650      	mov	r0, sl
 80053e6:	f000 fbe3 	bl	8005bb0 <__mcmp>
 80053ea:	2800      	cmp	r0, #0
 80053ec:	f73f adb6 	bgt.w	8004f5c <_dtoa_r+0x4cc>
 80053f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80053f2:	9f08      	ldr	r7, [sp, #32]
 80053f4:	ea6f 0903 	mvn.w	r9, r3
 80053f8:	f04f 0800 	mov.w	r8, #0
 80053fc:	4621      	mov	r1, r4
 80053fe:	4628      	mov	r0, r5
 8005400:	f000 f99c 	bl	800573c <_Bfree>
 8005404:	2e00      	cmp	r6, #0
 8005406:	f43f aea4 	beq.w	8005152 <_dtoa_r+0x6c2>
 800540a:	f1b8 0f00 	cmp.w	r8, #0
 800540e:	d005      	beq.n	800541c <_dtoa_r+0x98c>
 8005410:	45b0      	cmp	r8, r6
 8005412:	d003      	beq.n	800541c <_dtoa_r+0x98c>
 8005414:	4641      	mov	r1, r8
 8005416:	4628      	mov	r0, r5
 8005418:	f000 f990 	bl	800573c <_Bfree>
 800541c:	4631      	mov	r1, r6
 800541e:	4628      	mov	r0, r5
 8005420:	f000 f98c 	bl	800573c <_Bfree>
 8005424:	e695      	b.n	8005152 <_dtoa_r+0x6c2>
 8005426:	2400      	movs	r4, #0
 8005428:	4626      	mov	r6, r4
 800542a:	e7e1      	b.n	80053f0 <_dtoa_r+0x960>
 800542c:	46c1      	mov	r9, r8
 800542e:	4626      	mov	r6, r4
 8005430:	e594      	b.n	8004f5c <_dtoa_r+0x4cc>
 8005432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005434:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005438:	2b00      	cmp	r3, #0
 800543a:	f000 80fc 	beq.w	8005636 <_dtoa_r+0xba6>
 800543e:	2f00      	cmp	r7, #0
 8005440:	dd05      	ble.n	800544e <_dtoa_r+0x9be>
 8005442:	4631      	mov	r1, r6
 8005444:	463a      	mov	r2, r7
 8005446:	4628      	mov	r0, r5
 8005448:	f000 fb46 	bl	8005ad8 <__lshift>
 800544c:	4606      	mov	r6, r0
 800544e:	f1b8 0f00 	cmp.w	r8, #0
 8005452:	d05c      	beq.n	800550e <_dtoa_r+0xa7e>
 8005454:	4628      	mov	r0, r5
 8005456:	6871      	ldr	r1, [r6, #4]
 8005458:	f000 f930 	bl	80056bc <_Balloc>
 800545c:	4607      	mov	r7, r0
 800545e:	b928      	cbnz	r0, 800546c <_dtoa_r+0x9dc>
 8005460:	4602      	mov	r2, r0
 8005462:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005466:	4b7e      	ldr	r3, [pc, #504]	; (8005660 <_dtoa_r+0xbd0>)
 8005468:	f7ff bb26 	b.w	8004ab8 <_dtoa_r+0x28>
 800546c:	6932      	ldr	r2, [r6, #16]
 800546e:	f106 010c 	add.w	r1, r6, #12
 8005472:	3202      	adds	r2, #2
 8005474:	0092      	lsls	r2, r2, #2
 8005476:	300c      	adds	r0, #12
 8005478:	f000 f912 	bl	80056a0 <memcpy>
 800547c:	2201      	movs	r2, #1
 800547e:	4639      	mov	r1, r7
 8005480:	4628      	mov	r0, r5
 8005482:	f000 fb29 	bl	8005ad8 <__lshift>
 8005486:	46b0      	mov	r8, r6
 8005488:	4606      	mov	r6, r0
 800548a:	9b08      	ldr	r3, [sp, #32]
 800548c:	3301      	adds	r3, #1
 800548e:	9302      	str	r3, [sp, #8]
 8005490:	9b08      	ldr	r3, [sp, #32]
 8005492:	445b      	add	r3, fp
 8005494:	930a      	str	r3, [sp, #40]	; 0x28
 8005496:	9b04      	ldr	r3, [sp, #16]
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	9309      	str	r3, [sp, #36]	; 0x24
 800549e:	9b02      	ldr	r3, [sp, #8]
 80054a0:	4621      	mov	r1, r4
 80054a2:	4650      	mov	r0, sl
 80054a4:	f103 3bff 	add.w	fp, r3, #4294967295
 80054a8:	f7ff fa62 	bl	8004970 <quorem>
 80054ac:	4603      	mov	r3, r0
 80054ae:	4641      	mov	r1, r8
 80054b0:	3330      	adds	r3, #48	; 0x30
 80054b2:	9004      	str	r0, [sp, #16]
 80054b4:	4650      	mov	r0, sl
 80054b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80054b8:	f000 fb7a 	bl	8005bb0 <__mcmp>
 80054bc:	4632      	mov	r2, r6
 80054be:	9006      	str	r0, [sp, #24]
 80054c0:	4621      	mov	r1, r4
 80054c2:	4628      	mov	r0, r5
 80054c4:	f000 fb90 	bl	8005be8 <__mdiff>
 80054c8:	68c2      	ldr	r2, [r0, #12]
 80054ca:	4607      	mov	r7, r0
 80054cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054ce:	bb02      	cbnz	r2, 8005512 <_dtoa_r+0xa82>
 80054d0:	4601      	mov	r1, r0
 80054d2:	4650      	mov	r0, sl
 80054d4:	f000 fb6c 	bl	8005bb0 <__mcmp>
 80054d8:	4602      	mov	r2, r0
 80054da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054dc:	4639      	mov	r1, r7
 80054de:	4628      	mov	r0, r5
 80054e0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80054e4:	f000 f92a 	bl	800573c <_Bfree>
 80054e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80054ec:	9f02      	ldr	r7, [sp, #8]
 80054ee:	ea43 0102 	orr.w	r1, r3, r2
 80054f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054f4:	430b      	orrs	r3, r1
 80054f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054f8:	d10d      	bne.n	8005516 <_dtoa_r+0xa86>
 80054fa:	2b39      	cmp	r3, #57	; 0x39
 80054fc:	d027      	beq.n	800554e <_dtoa_r+0xabe>
 80054fe:	9a06      	ldr	r2, [sp, #24]
 8005500:	2a00      	cmp	r2, #0
 8005502:	dd01      	ble.n	8005508 <_dtoa_r+0xa78>
 8005504:	9b04      	ldr	r3, [sp, #16]
 8005506:	3331      	adds	r3, #49	; 0x31
 8005508:	f88b 3000 	strb.w	r3, [fp]
 800550c:	e776      	b.n	80053fc <_dtoa_r+0x96c>
 800550e:	4630      	mov	r0, r6
 8005510:	e7b9      	b.n	8005486 <_dtoa_r+0x9f6>
 8005512:	2201      	movs	r2, #1
 8005514:	e7e2      	b.n	80054dc <_dtoa_r+0xa4c>
 8005516:	9906      	ldr	r1, [sp, #24]
 8005518:	2900      	cmp	r1, #0
 800551a:	db04      	blt.n	8005526 <_dtoa_r+0xa96>
 800551c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800551e:	4301      	orrs	r1, r0
 8005520:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005522:	4301      	orrs	r1, r0
 8005524:	d120      	bne.n	8005568 <_dtoa_r+0xad8>
 8005526:	2a00      	cmp	r2, #0
 8005528:	ddee      	ble.n	8005508 <_dtoa_r+0xa78>
 800552a:	4651      	mov	r1, sl
 800552c:	2201      	movs	r2, #1
 800552e:	4628      	mov	r0, r5
 8005530:	9302      	str	r3, [sp, #8]
 8005532:	f000 fad1 	bl	8005ad8 <__lshift>
 8005536:	4621      	mov	r1, r4
 8005538:	4682      	mov	sl, r0
 800553a:	f000 fb39 	bl	8005bb0 <__mcmp>
 800553e:	2800      	cmp	r0, #0
 8005540:	9b02      	ldr	r3, [sp, #8]
 8005542:	dc02      	bgt.n	800554a <_dtoa_r+0xaba>
 8005544:	d1e0      	bne.n	8005508 <_dtoa_r+0xa78>
 8005546:	07da      	lsls	r2, r3, #31
 8005548:	d5de      	bpl.n	8005508 <_dtoa_r+0xa78>
 800554a:	2b39      	cmp	r3, #57	; 0x39
 800554c:	d1da      	bne.n	8005504 <_dtoa_r+0xa74>
 800554e:	2339      	movs	r3, #57	; 0x39
 8005550:	f88b 3000 	strb.w	r3, [fp]
 8005554:	463b      	mov	r3, r7
 8005556:	461f      	mov	r7, r3
 8005558:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800555c:	3b01      	subs	r3, #1
 800555e:	2a39      	cmp	r2, #57	; 0x39
 8005560:	d050      	beq.n	8005604 <_dtoa_r+0xb74>
 8005562:	3201      	adds	r2, #1
 8005564:	701a      	strb	r2, [r3, #0]
 8005566:	e749      	b.n	80053fc <_dtoa_r+0x96c>
 8005568:	2a00      	cmp	r2, #0
 800556a:	dd03      	ble.n	8005574 <_dtoa_r+0xae4>
 800556c:	2b39      	cmp	r3, #57	; 0x39
 800556e:	d0ee      	beq.n	800554e <_dtoa_r+0xabe>
 8005570:	3301      	adds	r3, #1
 8005572:	e7c9      	b.n	8005508 <_dtoa_r+0xa78>
 8005574:	9a02      	ldr	r2, [sp, #8]
 8005576:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005578:	f802 3c01 	strb.w	r3, [r2, #-1]
 800557c:	428a      	cmp	r2, r1
 800557e:	d02a      	beq.n	80055d6 <_dtoa_r+0xb46>
 8005580:	4651      	mov	r1, sl
 8005582:	2300      	movs	r3, #0
 8005584:	220a      	movs	r2, #10
 8005586:	4628      	mov	r0, r5
 8005588:	f000 f8fa 	bl	8005780 <__multadd>
 800558c:	45b0      	cmp	r8, r6
 800558e:	4682      	mov	sl, r0
 8005590:	f04f 0300 	mov.w	r3, #0
 8005594:	f04f 020a 	mov.w	r2, #10
 8005598:	4641      	mov	r1, r8
 800559a:	4628      	mov	r0, r5
 800559c:	d107      	bne.n	80055ae <_dtoa_r+0xb1e>
 800559e:	f000 f8ef 	bl	8005780 <__multadd>
 80055a2:	4680      	mov	r8, r0
 80055a4:	4606      	mov	r6, r0
 80055a6:	9b02      	ldr	r3, [sp, #8]
 80055a8:	3301      	adds	r3, #1
 80055aa:	9302      	str	r3, [sp, #8]
 80055ac:	e777      	b.n	800549e <_dtoa_r+0xa0e>
 80055ae:	f000 f8e7 	bl	8005780 <__multadd>
 80055b2:	4631      	mov	r1, r6
 80055b4:	4680      	mov	r8, r0
 80055b6:	2300      	movs	r3, #0
 80055b8:	220a      	movs	r2, #10
 80055ba:	4628      	mov	r0, r5
 80055bc:	f000 f8e0 	bl	8005780 <__multadd>
 80055c0:	4606      	mov	r6, r0
 80055c2:	e7f0      	b.n	80055a6 <_dtoa_r+0xb16>
 80055c4:	f1bb 0f00 	cmp.w	fp, #0
 80055c8:	bfcc      	ite	gt
 80055ca:	465f      	movgt	r7, fp
 80055cc:	2701      	movle	r7, #1
 80055ce:	f04f 0800 	mov.w	r8, #0
 80055d2:	9a08      	ldr	r2, [sp, #32]
 80055d4:	4417      	add	r7, r2
 80055d6:	4651      	mov	r1, sl
 80055d8:	2201      	movs	r2, #1
 80055da:	4628      	mov	r0, r5
 80055dc:	9302      	str	r3, [sp, #8]
 80055de:	f000 fa7b 	bl	8005ad8 <__lshift>
 80055e2:	4621      	mov	r1, r4
 80055e4:	4682      	mov	sl, r0
 80055e6:	f000 fae3 	bl	8005bb0 <__mcmp>
 80055ea:	2800      	cmp	r0, #0
 80055ec:	dcb2      	bgt.n	8005554 <_dtoa_r+0xac4>
 80055ee:	d102      	bne.n	80055f6 <_dtoa_r+0xb66>
 80055f0:	9b02      	ldr	r3, [sp, #8]
 80055f2:	07db      	lsls	r3, r3, #31
 80055f4:	d4ae      	bmi.n	8005554 <_dtoa_r+0xac4>
 80055f6:	463b      	mov	r3, r7
 80055f8:	461f      	mov	r7, r3
 80055fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80055fe:	2a30      	cmp	r2, #48	; 0x30
 8005600:	d0fa      	beq.n	80055f8 <_dtoa_r+0xb68>
 8005602:	e6fb      	b.n	80053fc <_dtoa_r+0x96c>
 8005604:	9a08      	ldr	r2, [sp, #32]
 8005606:	429a      	cmp	r2, r3
 8005608:	d1a5      	bne.n	8005556 <_dtoa_r+0xac6>
 800560a:	2331      	movs	r3, #49	; 0x31
 800560c:	f109 0901 	add.w	r9, r9, #1
 8005610:	7013      	strb	r3, [r2, #0]
 8005612:	e6f3      	b.n	80053fc <_dtoa_r+0x96c>
 8005614:	4b13      	ldr	r3, [pc, #76]	; (8005664 <_dtoa_r+0xbd4>)
 8005616:	f7ff baa7 	b.w	8004b68 <_dtoa_r+0xd8>
 800561a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800561c:	2b00      	cmp	r3, #0
 800561e:	f47f aa80 	bne.w	8004b22 <_dtoa_r+0x92>
 8005622:	4b11      	ldr	r3, [pc, #68]	; (8005668 <_dtoa_r+0xbd8>)
 8005624:	f7ff baa0 	b.w	8004b68 <_dtoa_r+0xd8>
 8005628:	f1bb 0f00 	cmp.w	fp, #0
 800562c:	dc03      	bgt.n	8005636 <_dtoa_r+0xba6>
 800562e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005630:	2b02      	cmp	r3, #2
 8005632:	f73f aecc 	bgt.w	80053ce <_dtoa_r+0x93e>
 8005636:	9f08      	ldr	r7, [sp, #32]
 8005638:	4621      	mov	r1, r4
 800563a:	4650      	mov	r0, sl
 800563c:	f7ff f998 	bl	8004970 <quorem>
 8005640:	9a08      	ldr	r2, [sp, #32]
 8005642:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005646:	f807 3b01 	strb.w	r3, [r7], #1
 800564a:	1aba      	subs	r2, r7, r2
 800564c:	4593      	cmp	fp, r2
 800564e:	ddb9      	ble.n	80055c4 <_dtoa_r+0xb34>
 8005650:	4651      	mov	r1, sl
 8005652:	2300      	movs	r3, #0
 8005654:	220a      	movs	r2, #10
 8005656:	4628      	mov	r0, r5
 8005658:	f000 f892 	bl	8005780 <__multadd>
 800565c:	4682      	mov	sl, r0
 800565e:	e7eb      	b.n	8005638 <_dtoa_r+0xba8>
 8005660:	08006ee3 	.word	0x08006ee3
 8005664:	08006e3c 	.word	0x08006e3c
 8005668:	08006e60 	.word	0x08006e60

0800566c <_localeconv_r>:
 800566c:	4800      	ldr	r0, [pc, #0]	; (8005670 <_localeconv_r+0x4>)
 800566e:	4770      	bx	lr
 8005670:	20000160 	.word	0x20000160

08005674 <malloc>:
 8005674:	4b02      	ldr	r3, [pc, #8]	; (8005680 <malloc+0xc>)
 8005676:	4601      	mov	r1, r0
 8005678:	6818      	ldr	r0, [r3, #0]
 800567a:	f000 bbfb 	b.w	8005e74 <_malloc_r>
 800567e:	bf00      	nop
 8005680:	2000000c 	.word	0x2000000c

08005684 <memchr>:
 8005684:	4603      	mov	r3, r0
 8005686:	b510      	push	{r4, lr}
 8005688:	b2c9      	uxtb	r1, r1
 800568a:	4402      	add	r2, r0
 800568c:	4293      	cmp	r3, r2
 800568e:	4618      	mov	r0, r3
 8005690:	d101      	bne.n	8005696 <memchr+0x12>
 8005692:	2000      	movs	r0, #0
 8005694:	e003      	b.n	800569e <memchr+0x1a>
 8005696:	7804      	ldrb	r4, [r0, #0]
 8005698:	3301      	adds	r3, #1
 800569a:	428c      	cmp	r4, r1
 800569c:	d1f6      	bne.n	800568c <memchr+0x8>
 800569e:	bd10      	pop	{r4, pc}

080056a0 <memcpy>:
 80056a0:	440a      	add	r2, r1
 80056a2:	4291      	cmp	r1, r2
 80056a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80056a8:	d100      	bne.n	80056ac <memcpy+0xc>
 80056aa:	4770      	bx	lr
 80056ac:	b510      	push	{r4, lr}
 80056ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056b2:	4291      	cmp	r1, r2
 80056b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056b8:	d1f9      	bne.n	80056ae <memcpy+0xe>
 80056ba:	bd10      	pop	{r4, pc}

080056bc <_Balloc>:
 80056bc:	b570      	push	{r4, r5, r6, lr}
 80056be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80056c0:	4604      	mov	r4, r0
 80056c2:	460d      	mov	r5, r1
 80056c4:	b976      	cbnz	r6, 80056e4 <_Balloc+0x28>
 80056c6:	2010      	movs	r0, #16
 80056c8:	f7ff ffd4 	bl	8005674 <malloc>
 80056cc:	4602      	mov	r2, r0
 80056ce:	6260      	str	r0, [r4, #36]	; 0x24
 80056d0:	b920      	cbnz	r0, 80056dc <_Balloc+0x20>
 80056d2:	2166      	movs	r1, #102	; 0x66
 80056d4:	4b17      	ldr	r3, [pc, #92]	; (8005734 <_Balloc+0x78>)
 80056d6:	4818      	ldr	r0, [pc, #96]	; (8005738 <_Balloc+0x7c>)
 80056d8:	f000 fd92 	bl	8006200 <__assert_func>
 80056dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80056e0:	6006      	str	r6, [r0, #0]
 80056e2:	60c6      	str	r6, [r0, #12]
 80056e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80056e6:	68f3      	ldr	r3, [r6, #12]
 80056e8:	b183      	cbz	r3, 800570c <_Balloc+0x50>
 80056ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80056f2:	b9b8      	cbnz	r0, 8005724 <_Balloc+0x68>
 80056f4:	2101      	movs	r1, #1
 80056f6:	fa01 f605 	lsl.w	r6, r1, r5
 80056fa:	1d72      	adds	r2, r6, #5
 80056fc:	4620      	mov	r0, r4
 80056fe:	0092      	lsls	r2, r2, #2
 8005700:	f000 fb5e 	bl	8005dc0 <_calloc_r>
 8005704:	b160      	cbz	r0, 8005720 <_Balloc+0x64>
 8005706:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800570a:	e00e      	b.n	800572a <_Balloc+0x6e>
 800570c:	2221      	movs	r2, #33	; 0x21
 800570e:	2104      	movs	r1, #4
 8005710:	4620      	mov	r0, r4
 8005712:	f000 fb55 	bl	8005dc0 <_calloc_r>
 8005716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005718:	60f0      	str	r0, [r6, #12]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1e4      	bne.n	80056ea <_Balloc+0x2e>
 8005720:	2000      	movs	r0, #0
 8005722:	bd70      	pop	{r4, r5, r6, pc}
 8005724:	6802      	ldr	r2, [r0, #0]
 8005726:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800572a:	2300      	movs	r3, #0
 800572c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005730:	e7f7      	b.n	8005722 <_Balloc+0x66>
 8005732:	bf00      	nop
 8005734:	08006e6d 	.word	0x08006e6d
 8005738:	08006ef4 	.word	0x08006ef4

0800573c <_Bfree>:
 800573c:	b570      	push	{r4, r5, r6, lr}
 800573e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005740:	4605      	mov	r5, r0
 8005742:	460c      	mov	r4, r1
 8005744:	b976      	cbnz	r6, 8005764 <_Bfree+0x28>
 8005746:	2010      	movs	r0, #16
 8005748:	f7ff ff94 	bl	8005674 <malloc>
 800574c:	4602      	mov	r2, r0
 800574e:	6268      	str	r0, [r5, #36]	; 0x24
 8005750:	b920      	cbnz	r0, 800575c <_Bfree+0x20>
 8005752:	218a      	movs	r1, #138	; 0x8a
 8005754:	4b08      	ldr	r3, [pc, #32]	; (8005778 <_Bfree+0x3c>)
 8005756:	4809      	ldr	r0, [pc, #36]	; (800577c <_Bfree+0x40>)
 8005758:	f000 fd52 	bl	8006200 <__assert_func>
 800575c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005760:	6006      	str	r6, [r0, #0]
 8005762:	60c6      	str	r6, [r0, #12]
 8005764:	b13c      	cbz	r4, 8005776 <_Bfree+0x3a>
 8005766:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005768:	6862      	ldr	r2, [r4, #4]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005770:	6021      	str	r1, [r4, #0]
 8005772:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005776:	bd70      	pop	{r4, r5, r6, pc}
 8005778:	08006e6d 	.word	0x08006e6d
 800577c:	08006ef4 	.word	0x08006ef4

08005780 <__multadd>:
 8005780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005784:	4698      	mov	r8, r3
 8005786:	460c      	mov	r4, r1
 8005788:	2300      	movs	r3, #0
 800578a:	690e      	ldr	r6, [r1, #16]
 800578c:	4607      	mov	r7, r0
 800578e:	f101 0014 	add.w	r0, r1, #20
 8005792:	6805      	ldr	r5, [r0, #0]
 8005794:	3301      	adds	r3, #1
 8005796:	b2a9      	uxth	r1, r5
 8005798:	fb02 8101 	mla	r1, r2, r1, r8
 800579c:	0c2d      	lsrs	r5, r5, #16
 800579e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80057a2:	fb02 c505 	mla	r5, r2, r5, ip
 80057a6:	b289      	uxth	r1, r1
 80057a8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80057ac:	429e      	cmp	r6, r3
 80057ae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80057b2:	f840 1b04 	str.w	r1, [r0], #4
 80057b6:	dcec      	bgt.n	8005792 <__multadd+0x12>
 80057b8:	f1b8 0f00 	cmp.w	r8, #0
 80057bc:	d022      	beq.n	8005804 <__multadd+0x84>
 80057be:	68a3      	ldr	r3, [r4, #8]
 80057c0:	42b3      	cmp	r3, r6
 80057c2:	dc19      	bgt.n	80057f8 <__multadd+0x78>
 80057c4:	6861      	ldr	r1, [r4, #4]
 80057c6:	4638      	mov	r0, r7
 80057c8:	3101      	adds	r1, #1
 80057ca:	f7ff ff77 	bl	80056bc <_Balloc>
 80057ce:	4605      	mov	r5, r0
 80057d0:	b928      	cbnz	r0, 80057de <__multadd+0x5e>
 80057d2:	4602      	mov	r2, r0
 80057d4:	21b5      	movs	r1, #181	; 0xb5
 80057d6:	4b0d      	ldr	r3, [pc, #52]	; (800580c <__multadd+0x8c>)
 80057d8:	480d      	ldr	r0, [pc, #52]	; (8005810 <__multadd+0x90>)
 80057da:	f000 fd11 	bl	8006200 <__assert_func>
 80057de:	6922      	ldr	r2, [r4, #16]
 80057e0:	f104 010c 	add.w	r1, r4, #12
 80057e4:	3202      	adds	r2, #2
 80057e6:	0092      	lsls	r2, r2, #2
 80057e8:	300c      	adds	r0, #12
 80057ea:	f7ff ff59 	bl	80056a0 <memcpy>
 80057ee:	4621      	mov	r1, r4
 80057f0:	4638      	mov	r0, r7
 80057f2:	f7ff ffa3 	bl	800573c <_Bfree>
 80057f6:	462c      	mov	r4, r5
 80057f8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80057fc:	3601      	adds	r6, #1
 80057fe:	f8c3 8014 	str.w	r8, [r3, #20]
 8005802:	6126      	str	r6, [r4, #16]
 8005804:	4620      	mov	r0, r4
 8005806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800580a:	bf00      	nop
 800580c:	08006ee3 	.word	0x08006ee3
 8005810:	08006ef4 	.word	0x08006ef4

08005814 <__hi0bits>:
 8005814:	0c02      	lsrs	r2, r0, #16
 8005816:	0412      	lsls	r2, r2, #16
 8005818:	4603      	mov	r3, r0
 800581a:	b9ca      	cbnz	r2, 8005850 <__hi0bits+0x3c>
 800581c:	0403      	lsls	r3, r0, #16
 800581e:	2010      	movs	r0, #16
 8005820:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005824:	bf04      	itt	eq
 8005826:	021b      	lsleq	r3, r3, #8
 8005828:	3008      	addeq	r0, #8
 800582a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800582e:	bf04      	itt	eq
 8005830:	011b      	lsleq	r3, r3, #4
 8005832:	3004      	addeq	r0, #4
 8005834:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005838:	bf04      	itt	eq
 800583a:	009b      	lsleq	r3, r3, #2
 800583c:	3002      	addeq	r0, #2
 800583e:	2b00      	cmp	r3, #0
 8005840:	db05      	blt.n	800584e <__hi0bits+0x3a>
 8005842:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005846:	f100 0001 	add.w	r0, r0, #1
 800584a:	bf08      	it	eq
 800584c:	2020      	moveq	r0, #32
 800584e:	4770      	bx	lr
 8005850:	2000      	movs	r0, #0
 8005852:	e7e5      	b.n	8005820 <__hi0bits+0xc>

08005854 <__lo0bits>:
 8005854:	6803      	ldr	r3, [r0, #0]
 8005856:	4602      	mov	r2, r0
 8005858:	f013 0007 	ands.w	r0, r3, #7
 800585c:	d00b      	beq.n	8005876 <__lo0bits+0x22>
 800585e:	07d9      	lsls	r1, r3, #31
 8005860:	d422      	bmi.n	80058a8 <__lo0bits+0x54>
 8005862:	0798      	lsls	r0, r3, #30
 8005864:	bf49      	itett	mi
 8005866:	085b      	lsrmi	r3, r3, #1
 8005868:	089b      	lsrpl	r3, r3, #2
 800586a:	2001      	movmi	r0, #1
 800586c:	6013      	strmi	r3, [r2, #0]
 800586e:	bf5c      	itt	pl
 8005870:	2002      	movpl	r0, #2
 8005872:	6013      	strpl	r3, [r2, #0]
 8005874:	4770      	bx	lr
 8005876:	b299      	uxth	r1, r3
 8005878:	b909      	cbnz	r1, 800587e <__lo0bits+0x2a>
 800587a:	2010      	movs	r0, #16
 800587c:	0c1b      	lsrs	r3, r3, #16
 800587e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005882:	bf04      	itt	eq
 8005884:	0a1b      	lsreq	r3, r3, #8
 8005886:	3008      	addeq	r0, #8
 8005888:	0719      	lsls	r1, r3, #28
 800588a:	bf04      	itt	eq
 800588c:	091b      	lsreq	r3, r3, #4
 800588e:	3004      	addeq	r0, #4
 8005890:	0799      	lsls	r1, r3, #30
 8005892:	bf04      	itt	eq
 8005894:	089b      	lsreq	r3, r3, #2
 8005896:	3002      	addeq	r0, #2
 8005898:	07d9      	lsls	r1, r3, #31
 800589a:	d403      	bmi.n	80058a4 <__lo0bits+0x50>
 800589c:	085b      	lsrs	r3, r3, #1
 800589e:	f100 0001 	add.w	r0, r0, #1
 80058a2:	d003      	beq.n	80058ac <__lo0bits+0x58>
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	4770      	bx	lr
 80058a8:	2000      	movs	r0, #0
 80058aa:	4770      	bx	lr
 80058ac:	2020      	movs	r0, #32
 80058ae:	4770      	bx	lr

080058b0 <__i2b>:
 80058b0:	b510      	push	{r4, lr}
 80058b2:	460c      	mov	r4, r1
 80058b4:	2101      	movs	r1, #1
 80058b6:	f7ff ff01 	bl	80056bc <_Balloc>
 80058ba:	4602      	mov	r2, r0
 80058bc:	b928      	cbnz	r0, 80058ca <__i2b+0x1a>
 80058be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80058c2:	4b04      	ldr	r3, [pc, #16]	; (80058d4 <__i2b+0x24>)
 80058c4:	4804      	ldr	r0, [pc, #16]	; (80058d8 <__i2b+0x28>)
 80058c6:	f000 fc9b 	bl	8006200 <__assert_func>
 80058ca:	2301      	movs	r3, #1
 80058cc:	6144      	str	r4, [r0, #20]
 80058ce:	6103      	str	r3, [r0, #16]
 80058d0:	bd10      	pop	{r4, pc}
 80058d2:	bf00      	nop
 80058d4:	08006ee3 	.word	0x08006ee3
 80058d8:	08006ef4 	.word	0x08006ef4

080058dc <__multiply>:
 80058dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e0:	4614      	mov	r4, r2
 80058e2:	690a      	ldr	r2, [r1, #16]
 80058e4:	6923      	ldr	r3, [r4, #16]
 80058e6:	460d      	mov	r5, r1
 80058e8:	429a      	cmp	r2, r3
 80058ea:	bfbe      	ittt	lt
 80058ec:	460b      	movlt	r3, r1
 80058ee:	4625      	movlt	r5, r4
 80058f0:	461c      	movlt	r4, r3
 80058f2:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80058f6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80058fa:	68ab      	ldr	r3, [r5, #8]
 80058fc:	6869      	ldr	r1, [r5, #4]
 80058fe:	eb0a 0709 	add.w	r7, sl, r9
 8005902:	42bb      	cmp	r3, r7
 8005904:	b085      	sub	sp, #20
 8005906:	bfb8      	it	lt
 8005908:	3101      	addlt	r1, #1
 800590a:	f7ff fed7 	bl	80056bc <_Balloc>
 800590e:	b930      	cbnz	r0, 800591e <__multiply+0x42>
 8005910:	4602      	mov	r2, r0
 8005912:	f240 115d 	movw	r1, #349	; 0x15d
 8005916:	4b41      	ldr	r3, [pc, #260]	; (8005a1c <__multiply+0x140>)
 8005918:	4841      	ldr	r0, [pc, #260]	; (8005a20 <__multiply+0x144>)
 800591a:	f000 fc71 	bl	8006200 <__assert_func>
 800591e:	f100 0614 	add.w	r6, r0, #20
 8005922:	4633      	mov	r3, r6
 8005924:	2200      	movs	r2, #0
 8005926:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800592a:	4543      	cmp	r3, r8
 800592c:	d31e      	bcc.n	800596c <__multiply+0x90>
 800592e:	f105 0c14 	add.w	ip, r5, #20
 8005932:	f104 0314 	add.w	r3, r4, #20
 8005936:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800593a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800593e:	9202      	str	r2, [sp, #8]
 8005940:	ebac 0205 	sub.w	r2, ip, r5
 8005944:	3a15      	subs	r2, #21
 8005946:	f022 0203 	bic.w	r2, r2, #3
 800594a:	3204      	adds	r2, #4
 800594c:	f105 0115 	add.w	r1, r5, #21
 8005950:	458c      	cmp	ip, r1
 8005952:	bf38      	it	cc
 8005954:	2204      	movcc	r2, #4
 8005956:	9201      	str	r2, [sp, #4]
 8005958:	9a02      	ldr	r2, [sp, #8]
 800595a:	9303      	str	r3, [sp, #12]
 800595c:	429a      	cmp	r2, r3
 800595e:	d808      	bhi.n	8005972 <__multiply+0x96>
 8005960:	2f00      	cmp	r7, #0
 8005962:	dc55      	bgt.n	8005a10 <__multiply+0x134>
 8005964:	6107      	str	r7, [r0, #16]
 8005966:	b005      	add	sp, #20
 8005968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800596c:	f843 2b04 	str.w	r2, [r3], #4
 8005970:	e7db      	b.n	800592a <__multiply+0x4e>
 8005972:	f8b3 a000 	ldrh.w	sl, [r3]
 8005976:	f1ba 0f00 	cmp.w	sl, #0
 800597a:	d020      	beq.n	80059be <__multiply+0xe2>
 800597c:	46b1      	mov	r9, r6
 800597e:	2200      	movs	r2, #0
 8005980:	f105 0e14 	add.w	lr, r5, #20
 8005984:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005988:	f8d9 b000 	ldr.w	fp, [r9]
 800598c:	b2a1      	uxth	r1, r4
 800598e:	fa1f fb8b 	uxth.w	fp, fp
 8005992:	fb0a b101 	mla	r1, sl, r1, fp
 8005996:	4411      	add	r1, r2
 8005998:	f8d9 2000 	ldr.w	r2, [r9]
 800599c:	0c24      	lsrs	r4, r4, #16
 800599e:	0c12      	lsrs	r2, r2, #16
 80059a0:	fb0a 2404 	mla	r4, sl, r4, r2
 80059a4:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80059a8:	b289      	uxth	r1, r1
 80059aa:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80059ae:	45f4      	cmp	ip, lr
 80059b0:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80059b4:	f849 1b04 	str.w	r1, [r9], #4
 80059b8:	d8e4      	bhi.n	8005984 <__multiply+0xa8>
 80059ba:	9901      	ldr	r1, [sp, #4]
 80059bc:	5072      	str	r2, [r6, r1]
 80059be:	9a03      	ldr	r2, [sp, #12]
 80059c0:	3304      	adds	r3, #4
 80059c2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80059c6:	f1b9 0f00 	cmp.w	r9, #0
 80059ca:	d01f      	beq.n	8005a0c <__multiply+0x130>
 80059cc:	46b6      	mov	lr, r6
 80059ce:	f04f 0a00 	mov.w	sl, #0
 80059d2:	6834      	ldr	r4, [r6, #0]
 80059d4:	f105 0114 	add.w	r1, r5, #20
 80059d8:	880a      	ldrh	r2, [r1, #0]
 80059da:	f8be b002 	ldrh.w	fp, [lr, #2]
 80059de:	b2a4      	uxth	r4, r4
 80059e0:	fb09 b202 	mla	r2, r9, r2, fp
 80059e4:	4492      	add	sl, r2
 80059e6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80059ea:	f84e 4b04 	str.w	r4, [lr], #4
 80059ee:	f851 4b04 	ldr.w	r4, [r1], #4
 80059f2:	f8be 2000 	ldrh.w	r2, [lr]
 80059f6:	0c24      	lsrs	r4, r4, #16
 80059f8:	fb09 2404 	mla	r4, r9, r4, r2
 80059fc:	458c      	cmp	ip, r1
 80059fe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005a02:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005a06:	d8e7      	bhi.n	80059d8 <__multiply+0xfc>
 8005a08:	9a01      	ldr	r2, [sp, #4]
 8005a0a:	50b4      	str	r4, [r6, r2]
 8005a0c:	3604      	adds	r6, #4
 8005a0e:	e7a3      	b.n	8005958 <__multiply+0x7c>
 8005a10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1a5      	bne.n	8005964 <__multiply+0x88>
 8005a18:	3f01      	subs	r7, #1
 8005a1a:	e7a1      	b.n	8005960 <__multiply+0x84>
 8005a1c:	08006ee3 	.word	0x08006ee3
 8005a20:	08006ef4 	.word	0x08006ef4

08005a24 <__pow5mult>:
 8005a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a28:	4615      	mov	r5, r2
 8005a2a:	f012 0203 	ands.w	r2, r2, #3
 8005a2e:	4606      	mov	r6, r0
 8005a30:	460f      	mov	r7, r1
 8005a32:	d007      	beq.n	8005a44 <__pow5mult+0x20>
 8005a34:	4c25      	ldr	r4, [pc, #148]	; (8005acc <__pow5mult+0xa8>)
 8005a36:	3a01      	subs	r2, #1
 8005a38:	2300      	movs	r3, #0
 8005a3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a3e:	f7ff fe9f 	bl	8005780 <__multadd>
 8005a42:	4607      	mov	r7, r0
 8005a44:	10ad      	asrs	r5, r5, #2
 8005a46:	d03d      	beq.n	8005ac4 <__pow5mult+0xa0>
 8005a48:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005a4a:	b97c      	cbnz	r4, 8005a6c <__pow5mult+0x48>
 8005a4c:	2010      	movs	r0, #16
 8005a4e:	f7ff fe11 	bl	8005674 <malloc>
 8005a52:	4602      	mov	r2, r0
 8005a54:	6270      	str	r0, [r6, #36]	; 0x24
 8005a56:	b928      	cbnz	r0, 8005a64 <__pow5mult+0x40>
 8005a58:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005a5c:	4b1c      	ldr	r3, [pc, #112]	; (8005ad0 <__pow5mult+0xac>)
 8005a5e:	481d      	ldr	r0, [pc, #116]	; (8005ad4 <__pow5mult+0xb0>)
 8005a60:	f000 fbce 	bl	8006200 <__assert_func>
 8005a64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a68:	6004      	str	r4, [r0, #0]
 8005a6a:	60c4      	str	r4, [r0, #12]
 8005a6c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005a70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005a74:	b94c      	cbnz	r4, 8005a8a <__pow5mult+0x66>
 8005a76:	f240 2171 	movw	r1, #625	; 0x271
 8005a7a:	4630      	mov	r0, r6
 8005a7c:	f7ff ff18 	bl	80058b0 <__i2b>
 8005a80:	2300      	movs	r3, #0
 8005a82:	4604      	mov	r4, r0
 8005a84:	f8c8 0008 	str.w	r0, [r8, #8]
 8005a88:	6003      	str	r3, [r0, #0]
 8005a8a:	f04f 0900 	mov.w	r9, #0
 8005a8e:	07eb      	lsls	r3, r5, #31
 8005a90:	d50a      	bpl.n	8005aa8 <__pow5mult+0x84>
 8005a92:	4639      	mov	r1, r7
 8005a94:	4622      	mov	r2, r4
 8005a96:	4630      	mov	r0, r6
 8005a98:	f7ff ff20 	bl	80058dc <__multiply>
 8005a9c:	4680      	mov	r8, r0
 8005a9e:	4639      	mov	r1, r7
 8005aa0:	4630      	mov	r0, r6
 8005aa2:	f7ff fe4b 	bl	800573c <_Bfree>
 8005aa6:	4647      	mov	r7, r8
 8005aa8:	106d      	asrs	r5, r5, #1
 8005aaa:	d00b      	beq.n	8005ac4 <__pow5mult+0xa0>
 8005aac:	6820      	ldr	r0, [r4, #0]
 8005aae:	b938      	cbnz	r0, 8005ac0 <__pow5mult+0x9c>
 8005ab0:	4622      	mov	r2, r4
 8005ab2:	4621      	mov	r1, r4
 8005ab4:	4630      	mov	r0, r6
 8005ab6:	f7ff ff11 	bl	80058dc <__multiply>
 8005aba:	6020      	str	r0, [r4, #0]
 8005abc:	f8c0 9000 	str.w	r9, [r0]
 8005ac0:	4604      	mov	r4, r0
 8005ac2:	e7e4      	b.n	8005a8e <__pow5mult+0x6a>
 8005ac4:	4638      	mov	r0, r7
 8005ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aca:	bf00      	nop
 8005acc:	08007048 	.word	0x08007048
 8005ad0:	08006e6d 	.word	0x08006e6d
 8005ad4:	08006ef4 	.word	0x08006ef4

08005ad8 <__lshift>:
 8005ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005adc:	460c      	mov	r4, r1
 8005ade:	4607      	mov	r7, r0
 8005ae0:	4691      	mov	r9, r2
 8005ae2:	6923      	ldr	r3, [r4, #16]
 8005ae4:	6849      	ldr	r1, [r1, #4]
 8005ae6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005aea:	68a3      	ldr	r3, [r4, #8]
 8005aec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005af0:	f108 0601 	add.w	r6, r8, #1
 8005af4:	42b3      	cmp	r3, r6
 8005af6:	db0b      	blt.n	8005b10 <__lshift+0x38>
 8005af8:	4638      	mov	r0, r7
 8005afa:	f7ff fddf 	bl	80056bc <_Balloc>
 8005afe:	4605      	mov	r5, r0
 8005b00:	b948      	cbnz	r0, 8005b16 <__lshift+0x3e>
 8005b02:	4602      	mov	r2, r0
 8005b04:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005b08:	4b27      	ldr	r3, [pc, #156]	; (8005ba8 <__lshift+0xd0>)
 8005b0a:	4828      	ldr	r0, [pc, #160]	; (8005bac <__lshift+0xd4>)
 8005b0c:	f000 fb78 	bl	8006200 <__assert_func>
 8005b10:	3101      	adds	r1, #1
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	e7ee      	b.n	8005af4 <__lshift+0x1c>
 8005b16:	2300      	movs	r3, #0
 8005b18:	f100 0114 	add.w	r1, r0, #20
 8005b1c:	f100 0210 	add.w	r2, r0, #16
 8005b20:	4618      	mov	r0, r3
 8005b22:	4553      	cmp	r3, sl
 8005b24:	db33      	blt.n	8005b8e <__lshift+0xb6>
 8005b26:	6920      	ldr	r0, [r4, #16]
 8005b28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b2c:	f104 0314 	add.w	r3, r4, #20
 8005b30:	f019 091f 	ands.w	r9, r9, #31
 8005b34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005b3c:	d02b      	beq.n	8005b96 <__lshift+0xbe>
 8005b3e:	468a      	mov	sl, r1
 8005b40:	2200      	movs	r2, #0
 8005b42:	f1c9 0e20 	rsb	lr, r9, #32
 8005b46:	6818      	ldr	r0, [r3, #0]
 8005b48:	fa00 f009 	lsl.w	r0, r0, r9
 8005b4c:	4302      	orrs	r2, r0
 8005b4e:	f84a 2b04 	str.w	r2, [sl], #4
 8005b52:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b56:	459c      	cmp	ip, r3
 8005b58:	fa22 f20e 	lsr.w	r2, r2, lr
 8005b5c:	d8f3      	bhi.n	8005b46 <__lshift+0x6e>
 8005b5e:	ebac 0304 	sub.w	r3, ip, r4
 8005b62:	3b15      	subs	r3, #21
 8005b64:	f023 0303 	bic.w	r3, r3, #3
 8005b68:	3304      	adds	r3, #4
 8005b6a:	f104 0015 	add.w	r0, r4, #21
 8005b6e:	4584      	cmp	ip, r0
 8005b70:	bf38      	it	cc
 8005b72:	2304      	movcc	r3, #4
 8005b74:	50ca      	str	r2, [r1, r3]
 8005b76:	b10a      	cbz	r2, 8005b7c <__lshift+0xa4>
 8005b78:	f108 0602 	add.w	r6, r8, #2
 8005b7c:	3e01      	subs	r6, #1
 8005b7e:	4638      	mov	r0, r7
 8005b80:	4621      	mov	r1, r4
 8005b82:	612e      	str	r6, [r5, #16]
 8005b84:	f7ff fdda 	bl	800573c <_Bfree>
 8005b88:	4628      	mov	r0, r5
 8005b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005b92:	3301      	adds	r3, #1
 8005b94:	e7c5      	b.n	8005b22 <__lshift+0x4a>
 8005b96:	3904      	subs	r1, #4
 8005b98:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b9c:	459c      	cmp	ip, r3
 8005b9e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ba2:	d8f9      	bhi.n	8005b98 <__lshift+0xc0>
 8005ba4:	e7ea      	b.n	8005b7c <__lshift+0xa4>
 8005ba6:	bf00      	nop
 8005ba8:	08006ee3 	.word	0x08006ee3
 8005bac:	08006ef4 	.word	0x08006ef4

08005bb0 <__mcmp>:
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	690a      	ldr	r2, [r1, #16]
 8005bb4:	6900      	ldr	r0, [r0, #16]
 8005bb6:	b530      	push	{r4, r5, lr}
 8005bb8:	1a80      	subs	r0, r0, r2
 8005bba:	d10d      	bne.n	8005bd8 <__mcmp+0x28>
 8005bbc:	3314      	adds	r3, #20
 8005bbe:	3114      	adds	r1, #20
 8005bc0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005bc4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005bc8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005bcc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005bd0:	4295      	cmp	r5, r2
 8005bd2:	d002      	beq.n	8005bda <__mcmp+0x2a>
 8005bd4:	d304      	bcc.n	8005be0 <__mcmp+0x30>
 8005bd6:	2001      	movs	r0, #1
 8005bd8:	bd30      	pop	{r4, r5, pc}
 8005bda:	42a3      	cmp	r3, r4
 8005bdc:	d3f4      	bcc.n	8005bc8 <__mcmp+0x18>
 8005bde:	e7fb      	b.n	8005bd8 <__mcmp+0x28>
 8005be0:	f04f 30ff 	mov.w	r0, #4294967295
 8005be4:	e7f8      	b.n	8005bd8 <__mcmp+0x28>
	...

08005be8 <__mdiff>:
 8005be8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bec:	460c      	mov	r4, r1
 8005bee:	4606      	mov	r6, r0
 8005bf0:	4611      	mov	r1, r2
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	4692      	mov	sl, r2
 8005bf6:	f7ff ffdb 	bl	8005bb0 <__mcmp>
 8005bfa:	1e05      	subs	r5, r0, #0
 8005bfc:	d111      	bne.n	8005c22 <__mdiff+0x3a>
 8005bfe:	4629      	mov	r1, r5
 8005c00:	4630      	mov	r0, r6
 8005c02:	f7ff fd5b 	bl	80056bc <_Balloc>
 8005c06:	4602      	mov	r2, r0
 8005c08:	b928      	cbnz	r0, 8005c16 <__mdiff+0x2e>
 8005c0a:	f240 2132 	movw	r1, #562	; 0x232
 8005c0e:	4b3c      	ldr	r3, [pc, #240]	; (8005d00 <__mdiff+0x118>)
 8005c10:	483c      	ldr	r0, [pc, #240]	; (8005d04 <__mdiff+0x11c>)
 8005c12:	f000 faf5 	bl	8006200 <__assert_func>
 8005c16:	2301      	movs	r3, #1
 8005c18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005c1c:	4610      	mov	r0, r2
 8005c1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c22:	bfa4      	itt	ge
 8005c24:	4653      	movge	r3, sl
 8005c26:	46a2      	movge	sl, r4
 8005c28:	4630      	mov	r0, r6
 8005c2a:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005c2e:	bfa6      	itte	ge
 8005c30:	461c      	movge	r4, r3
 8005c32:	2500      	movge	r5, #0
 8005c34:	2501      	movlt	r5, #1
 8005c36:	f7ff fd41 	bl	80056bc <_Balloc>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	b918      	cbnz	r0, 8005c46 <__mdiff+0x5e>
 8005c3e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005c42:	4b2f      	ldr	r3, [pc, #188]	; (8005d00 <__mdiff+0x118>)
 8005c44:	e7e4      	b.n	8005c10 <__mdiff+0x28>
 8005c46:	f100 0814 	add.w	r8, r0, #20
 8005c4a:	f8da 7010 	ldr.w	r7, [sl, #16]
 8005c4e:	60c5      	str	r5, [r0, #12]
 8005c50:	f04f 0c00 	mov.w	ip, #0
 8005c54:	f10a 0514 	add.w	r5, sl, #20
 8005c58:	f10a 0010 	add.w	r0, sl, #16
 8005c5c:	46c2      	mov	sl, r8
 8005c5e:	6926      	ldr	r6, [r4, #16]
 8005c60:	f104 0914 	add.w	r9, r4, #20
 8005c64:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8005c68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005c6c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8005c70:	f859 3b04 	ldr.w	r3, [r9], #4
 8005c74:	fa1f f18b 	uxth.w	r1, fp
 8005c78:	4461      	add	r1, ip
 8005c7a:	fa1f fc83 	uxth.w	ip, r3
 8005c7e:	0c1b      	lsrs	r3, r3, #16
 8005c80:	eba1 010c 	sub.w	r1, r1, ip
 8005c84:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005c88:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005c8c:	b289      	uxth	r1, r1
 8005c8e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005c92:	454e      	cmp	r6, r9
 8005c94:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005c98:	f84a 3b04 	str.w	r3, [sl], #4
 8005c9c:	d8e6      	bhi.n	8005c6c <__mdiff+0x84>
 8005c9e:	1b33      	subs	r3, r6, r4
 8005ca0:	3b15      	subs	r3, #21
 8005ca2:	f023 0303 	bic.w	r3, r3, #3
 8005ca6:	3415      	adds	r4, #21
 8005ca8:	3304      	adds	r3, #4
 8005caa:	42a6      	cmp	r6, r4
 8005cac:	bf38      	it	cc
 8005cae:	2304      	movcc	r3, #4
 8005cb0:	441d      	add	r5, r3
 8005cb2:	4443      	add	r3, r8
 8005cb4:	461e      	mov	r6, r3
 8005cb6:	462c      	mov	r4, r5
 8005cb8:	4574      	cmp	r4, lr
 8005cba:	d30e      	bcc.n	8005cda <__mdiff+0xf2>
 8005cbc:	f10e 0103 	add.w	r1, lr, #3
 8005cc0:	1b49      	subs	r1, r1, r5
 8005cc2:	f021 0103 	bic.w	r1, r1, #3
 8005cc6:	3d03      	subs	r5, #3
 8005cc8:	45ae      	cmp	lr, r5
 8005cca:	bf38      	it	cc
 8005ccc:	2100      	movcc	r1, #0
 8005cce:	4419      	add	r1, r3
 8005cd0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005cd4:	b18b      	cbz	r3, 8005cfa <__mdiff+0x112>
 8005cd6:	6117      	str	r7, [r2, #16]
 8005cd8:	e7a0      	b.n	8005c1c <__mdiff+0x34>
 8005cda:	f854 8b04 	ldr.w	r8, [r4], #4
 8005cde:	fa1f f188 	uxth.w	r1, r8
 8005ce2:	4461      	add	r1, ip
 8005ce4:	1408      	asrs	r0, r1, #16
 8005ce6:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8005cea:	b289      	uxth	r1, r1
 8005cec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005cf0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005cf4:	f846 1b04 	str.w	r1, [r6], #4
 8005cf8:	e7de      	b.n	8005cb8 <__mdiff+0xd0>
 8005cfa:	3f01      	subs	r7, #1
 8005cfc:	e7e8      	b.n	8005cd0 <__mdiff+0xe8>
 8005cfe:	bf00      	nop
 8005d00:	08006ee3 	.word	0x08006ee3
 8005d04:	08006ef4 	.word	0x08006ef4

08005d08 <__d2b>:
 8005d08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005d12:	4690      	mov	r8, r2
 8005d14:	461d      	mov	r5, r3
 8005d16:	f7ff fcd1 	bl	80056bc <_Balloc>
 8005d1a:	4604      	mov	r4, r0
 8005d1c:	b930      	cbnz	r0, 8005d2c <__d2b+0x24>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	f240 310a 	movw	r1, #778	; 0x30a
 8005d24:	4b24      	ldr	r3, [pc, #144]	; (8005db8 <__d2b+0xb0>)
 8005d26:	4825      	ldr	r0, [pc, #148]	; (8005dbc <__d2b+0xb4>)
 8005d28:	f000 fa6a 	bl	8006200 <__assert_func>
 8005d2c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005d30:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005d34:	bb2d      	cbnz	r5, 8005d82 <__d2b+0x7a>
 8005d36:	9301      	str	r3, [sp, #4]
 8005d38:	f1b8 0300 	subs.w	r3, r8, #0
 8005d3c:	d026      	beq.n	8005d8c <__d2b+0x84>
 8005d3e:	4668      	mov	r0, sp
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	f7ff fd87 	bl	8005854 <__lo0bits>
 8005d46:	9900      	ldr	r1, [sp, #0]
 8005d48:	b1f0      	cbz	r0, 8005d88 <__d2b+0x80>
 8005d4a:	9a01      	ldr	r2, [sp, #4]
 8005d4c:	f1c0 0320 	rsb	r3, r0, #32
 8005d50:	fa02 f303 	lsl.w	r3, r2, r3
 8005d54:	430b      	orrs	r3, r1
 8005d56:	40c2      	lsrs	r2, r0
 8005d58:	6163      	str	r3, [r4, #20]
 8005d5a:	9201      	str	r2, [sp, #4]
 8005d5c:	9b01      	ldr	r3, [sp, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	bf14      	ite	ne
 8005d62:	2102      	movne	r1, #2
 8005d64:	2101      	moveq	r1, #1
 8005d66:	61a3      	str	r3, [r4, #24]
 8005d68:	6121      	str	r1, [r4, #16]
 8005d6a:	b1c5      	cbz	r5, 8005d9e <__d2b+0x96>
 8005d6c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005d70:	4405      	add	r5, r0
 8005d72:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005d76:	603d      	str	r5, [r7, #0]
 8005d78:	6030      	str	r0, [r6, #0]
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	b002      	add	sp, #8
 8005d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d86:	e7d6      	b.n	8005d36 <__d2b+0x2e>
 8005d88:	6161      	str	r1, [r4, #20]
 8005d8a:	e7e7      	b.n	8005d5c <__d2b+0x54>
 8005d8c:	a801      	add	r0, sp, #4
 8005d8e:	f7ff fd61 	bl	8005854 <__lo0bits>
 8005d92:	2101      	movs	r1, #1
 8005d94:	9b01      	ldr	r3, [sp, #4]
 8005d96:	6121      	str	r1, [r4, #16]
 8005d98:	6163      	str	r3, [r4, #20]
 8005d9a:	3020      	adds	r0, #32
 8005d9c:	e7e5      	b.n	8005d6a <__d2b+0x62>
 8005d9e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005da2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005da6:	6038      	str	r0, [r7, #0]
 8005da8:	6918      	ldr	r0, [r3, #16]
 8005daa:	f7ff fd33 	bl	8005814 <__hi0bits>
 8005dae:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005db2:	6031      	str	r1, [r6, #0]
 8005db4:	e7e1      	b.n	8005d7a <__d2b+0x72>
 8005db6:	bf00      	nop
 8005db8:	08006ee3 	.word	0x08006ee3
 8005dbc:	08006ef4 	.word	0x08006ef4

08005dc0 <_calloc_r>:
 8005dc0:	b538      	push	{r3, r4, r5, lr}
 8005dc2:	fb02 f501 	mul.w	r5, r2, r1
 8005dc6:	4629      	mov	r1, r5
 8005dc8:	f000 f854 	bl	8005e74 <_malloc_r>
 8005dcc:	4604      	mov	r4, r0
 8005dce:	b118      	cbz	r0, 8005dd8 <_calloc_r+0x18>
 8005dd0:	462a      	mov	r2, r5
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	f7fe f944 	bl	8004060 <memset>
 8005dd8:	4620      	mov	r0, r4
 8005dda:	bd38      	pop	{r3, r4, r5, pc}

08005ddc <_free_r>:
 8005ddc:	b538      	push	{r3, r4, r5, lr}
 8005dde:	4605      	mov	r5, r0
 8005de0:	2900      	cmp	r1, #0
 8005de2:	d043      	beq.n	8005e6c <_free_r+0x90>
 8005de4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005de8:	1f0c      	subs	r4, r1, #4
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	bfb8      	it	lt
 8005dee:	18e4      	addlt	r4, r4, r3
 8005df0:	f000 fa62 	bl	80062b8 <__malloc_lock>
 8005df4:	4a1e      	ldr	r2, [pc, #120]	; (8005e70 <_free_r+0x94>)
 8005df6:	6813      	ldr	r3, [r2, #0]
 8005df8:	4610      	mov	r0, r2
 8005dfa:	b933      	cbnz	r3, 8005e0a <_free_r+0x2e>
 8005dfc:	6063      	str	r3, [r4, #4]
 8005dfe:	6014      	str	r4, [r2, #0]
 8005e00:	4628      	mov	r0, r5
 8005e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e06:	f000 ba5d 	b.w	80062c4 <__malloc_unlock>
 8005e0a:	42a3      	cmp	r3, r4
 8005e0c:	d90a      	bls.n	8005e24 <_free_r+0x48>
 8005e0e:	6821      	ldr	r1, [r4, #0]
 8005e10:	1862      	adds	r2, r4, r1
 8005e12:	4293      	cmp	r3, r2
 8005e14:	bf01      	itttt	eq
 8005e16:	681a      	ldreq	r2, [r3, #0]
 8005e18:	685b      	ldreq	r3, [r3, #4]
 8005e1a:	1852      	addeq	r2, r2, r1
 8005e1c:	6022      	streq	r2, [r4, #0]
 8005e1e:	6063      	str	r3, [r4, #4]
 8005e20:	6004      	str	r4, [r0, #0]
 8005e22:	e7ed      	b.n	8005e00 <_free_r+0x24>
 8005e24:	461a      	mov	r2, r3
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	b10b      	cbz	r3, 8005e2e <_free_r+0x52>
 8005e2a:	42a3      	cmp	r3, r4
 8005e2c:	d9fa      	bls.n	8005e24 <_free_r+0x48>
 8005e2e:	6811      	ldr	r1, [r2, #0]
 8005e30:	1850      	adds	r0, r2, r1
 8005e32:	42a0      	cmp	r0, r4
 8005e34:	d10b      	bne.n	8005e4e <_free_r+0x72>
 8005e36:	6820      	ldr	r0, [r4, #0]
 8005e38:	4401      	add	r1, r0
 8005e3a:	1850      	adds	r0, r2, r1
 8005e3c:	4283      	cmp	r3, r0
 8005e3e:	6011      	str	r1, [r2, #0]
 8005e40:	d1de      	bne.n	8005e00 <_free_r+0x24>
 8005e42:	6818      	ldr	r0, [r3, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	4401      	add	r1, r0
 8005e48:	6011      	str	r1, [r2, #0]
 8005e4a:	6053      	str	r3, [r2, #4]
 8005e4c:	e7d8      	b.n	8005e00 <_free_r+0x24>
 8005e4e:	d902      	bls.n	8005e56 <_free_r+0x7a>
 8005e50:	230c      	movs	r3, #12
 8005e52:	602b      	str	r3, [r5, #0]
 8005e54:	e7d4      	b.n	8005e00 <_free_r+0x24>
 8005e56:	6820      	ldr	r0, [r4, #0]
 8005e58:	1821      	adds	r1, r4, r0
 8005e5a:	428b      	cmp	r3, r1
 8005e5c:	bf01      	itttt	eq
 8005e5e:	6819      	ldreq	r1, [r3, #0]
 8005e60:	685b      	ldreq	r3, [r3, #4]
 8005e62:	1809      	addeq	r1, r1, r0
 8005e64:	6021      	streq	r1, [r4, #0]
 8005e66:	6063      	str	r3, [r4, #4]
 8005e68:	6054      	str	r4, [r2, #4]
 8005e6a:	e7c9      	b.n	8005e00 <_free_r+0x24>
 8005e6c:	bd38      	pop	{r3, r4, r5, pc}
 8005e6e:	bf00      	nop
 8005e70:	2000028c 	.word	0x2000028c

08005e74 <_malloc_r>:
 8005e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e76:	1ccd      	adds	r5, r1, #3
 8005e78:	f025 0503 	bic.w	r5, r5, #3
 8005e7c:	3508      	adds	r5, #8
 8005e7e:	2d0c      	cmp	r5, #12
 8005e80:	bf38      	it	cc
 8005e82:	250c      	movcc	r5, #12
 8005e84:	2d00      	cmp	r5, #0
 8005e86:	4606      	mov	r6, r0
 8005e88:	db01      	blt.n	8005e8e <_malloc_r+0x1a>
 8005e8a:	42a9      	cmp	r1, r5
 8005e8c:	d903      	bls.n	8005e96 <_malloc_r+0x22>
 8005e8e:	230c      	movs	r3, #12
 8005e90:	6033      	str	r3, [r6, #0]
 8005e92:	2000      	movs	r0, #0
 8005e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e96:	f000 fa0f 	bl	80062b8 <__malloc_lock>
 8005e9a:	4921      	ldr	r1, [pc, #132]	; (8005f20 <_malloc_r+0xac>)
 8005e9c:	680a      	ldr	r2, [r1, #0]
 8005e9e:	4614      	mov	r4, r2
 8005ea0:	b99c      	cbnz	r4, 8005eca <_malloc_r+0x56>
 8005ea2:	4f20      	ldr	r7, [pc, #128]	; (8005f24 <_malloc_r+0xb0>)
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	b923      	cbnz	r3, 8005eb2 <_malloc_r+0x3e>
 8005ea8:	4621      	mov	r1, r4
 8005eaa:	4630      	mov	r0, r6
 8005eac:	f000 f998 	bl	80061e0 <_sbrk_r>
 8005eb0:	6038      	str	r0, [r7, #0]
 8005eb2:	4629      	mov	r1, r5
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	f000 f993 	bl	80061e0 <_sbrk_r>
 8005eba:	1c43      	adds	r3, r0, #1
 8005ebc:	d123      	bne.n	8005f06 <_malloc_r+0x92>
 8005ebe:	230c      	movs	r3, #12
 8005ec0:	4630      	mov	r0, r6
 8005ec2:	6033      	str	r3, [r6, #0]
 8005ec4:	f000 f9fe 	bl	80062c4 <__malloc_unlock>
 8005ec8:	e7e3      	b.n	8005e92 <_malloc_r+0x1e>
 8005eca:	6823      	ldr	r3, [r4, #0]
 8005ecc:	1b5b      	subs	r3, r3, r5
 8005ece:	d417      	bmi.n	8005f00 <_malloc_r+0x8c>
 8005ed0:	2b0b      	cmp	r3, #11
 8005ed2:	d903      	bls.n	8005edc <_malloc_r+0x68>
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	441c      	add	r4, r3
 8005ed8:	6025      	str	r5, [r4, #0]
 8005eda:	e004      	b.n	8005ee6 <_malloc_r+0x72>
 8005edc:	6863      	ldr	r3, [r4, #4]
 8005ede:	42a2      	cmp	r2, r4
 8005ee0:	bf0c      	ite	eq
 8005ee2:	600b      	streq	r3, [r1, #0]
 8005ee4:	6053      	strne	r3, [r2, #4]
 8005ee6:	4630      	mov	r0, r6
 8005ee8:	f000 f9ec 	bl	80062c4 <__malloc_unlock>
 8005eec:	f104 000b 	add.w	r0, r4, #11
 8005ef0:	1d23      	adds	r3, r4, #4
 8005ef2:	f020 0007 	bic.w	r0, r0, #7
 8005ef6:	1ac2      	subs	r2, r0, r3
 8005ef8:	d0cc      	beq.n	8005e94 <_malloc_r+0x20>
 8005efa:	1a1b      	subs	r3, r3, r0
 8005efc:	50a3      	str	r3, [r4, r2]
 8005efe:	e7c9      	b.n	8005e94 <_malloc_r+0x20>
 8005f00:	4622      	mov	r2, r4
 8005f02:	6864      	ldr	r4, [r4, #4]
 8005f04:	e7cc      	b.n	8005ea0 <_malloc_r+0x2c>
 8005f06:	1cc4      	adds	r4, r0, #3
 8005f08:	f024 0403 	bic.w	r4, r4, #3
 8005f0c:	42a0      	cmp	r0, r4
 8005f0e:	d0e3      	beq.n	8005ed8 <_malloc_r+0x64>
 8005f10:	1a21      	subs	r1, r4, r0
 8005f12:	4630      	mov	r0, r6
 8005f14:	f000 f964 	bl	80061e0 <_sbrk_r>
 8005f18:	3001      	adds	r0, #1
 8005f1a:	d1dd      	bne.n	8005ed8 <_malloc_r+0x64>
 8005f1c:	e7cf      	b.n	8005ebe <_malloc_r+0x4a>
 8005f1e:	bf00      	nop
 8005f20:	2000028c 	.word	0x2000028c
 8005f24:	20000290 	.word	0x20000290

08005f28 <__ssputs_r>:
 8005f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f2c:	688e      	ldr	r6, [r1, #8]
 8005f2e:	4682      	mov	sl, r0
 8005f30:	429e      	cmp	r6, r3
 8005f32:	460c      	mov	r4, r1
 8005f34:	4690      	mov	r8, r2
 8005f36:	461f      	mov	r7, r3
 8005f38:	d838      	bhi.n	8005fac <__ssputs_r+0x84>
 8005f3a:	898a      	ldrh	r2, [r1, #12]
 8005f3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f40:	d032      	beq.n	8005fa8 <__ssputs_r+0x80>
 8005f42:	6825      	ldr	r5, [r4, #0]
 8005f44:	6909      	ldr	r1, [r1, #16]
 8005f46:	3301      	adds	r3, #1
 8005f48:	eba5 0901 	sub.w	r9, r5, r1
 8005f4c:	6965      	ldr	r5, [r4, #20]
 8005f4e:	444b      	add	r3, r9
 8005f50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f58:	106d      	asrs	r5, r5, #1
 8005f5a:	429d      	cmp	r5, r3
 8005f5c:	bf38      	it	cc
 8005f5e:	461d      	movcc	r5, r3
 8005f60:	0553      	lsls	r3, r2, #21
 8005f62:	d531      	bpl.n	8005fc8 <__ssputs_r+0xa0>
 8005f64:	4629      	mov	r1, r5
 8005f66:	f7ff ff85 	bl	8005e74 <_malloc_r>
 8005f6a:	4606      	mov	r6, r0
 8005f6c:	b950      	cbnz	r0, 8005f84 <__ssputs_r+0x5c>
 8005f6e:	230c      	movs	r3, #12
 8005f70:	f04f 30ff 	mov.w	r0, #4294967295
 8005f74:	f8ca 3000 	str.w	r3, [sl]
 8005f78:	89a3      	ldrh	r3, [r4, #12]
 8005f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f7e:	81a3      	strh	r3, [r4, #12]
 8005f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f84:	464a      	mov	r2, r9
 8005f86:	6921      	ldr	r1, [r4, #16]
 8005f88:	f7ff fb8a 	bl	80056a0 <memcpy>
 8005f8c:	89a3      	ldrh	r3, [r4, #12]
 8005f8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f96:	81a3      	strh	r3, [r4, #12]
 8005f98:	6126      	str	r6, [r4, #16]
 8005f9a:	444e      	add	r6, r9
 8005f9c:	6026      	str	r6, [r4, #0]
 8005f9e:	463e      	mov	r6, r7
 8005fa0:	6165      	str	r5, [r4, #20]
 8005fa2:	eba5 0509 	sub.w	r5, r5, r9
 8005fa6:	60a5      	str	r5, [r4, #8]
 8005fa8:	42be      	cmp	r6, r7
 8005faa:	d900      	bls.n	8005fae <__ssputs_r+0x86>
 8005fac:	463e      	mov	r6, r7
 8005fae:	4632      	mov	r2, r6
 8005fb0:	4641      	mov	r1, r8
 8005fb2:	6820      	ldr	r0, [r4, #0]
 8005fb4:	f000 f966 	bl	8006284 <memmove>
 8005fb8:	68a3      	ldr	r3, [r4, #8]
 8005fba:	6822      	ldr	r2, [r4, #0]
 8005fbc:	1b9b      	subs	r3, r3, r6
 8005fbe:	4432      	add	r2, r6
 8005fc0:	2000      	movs	r0, #0
 8005fc2:	60a3      	str	r3, [r4, #8]
 8005fc4:	6022      	str	r2, [r4, #0]
 8005fc6:	e7db      	b.n	8005f80 <__ssputs_r+0x58>
 8005fc8:	462a      	mov	r2, r5
 8005fca:	f000 f981 	bl	80062d0 <_realloc_r>
 8005fce:	4606      	mov	r6, r0
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	d1e1      	bne.n	8005f98 <__ssputs_r+0x70>
 8005fd4:	4650      	mov	r0, sl
 8005fd6:	6921      	ldr	r1, [r4, #16]
 8005fd8:	f7ff ff00 	bl	8005ddc <_free_r>
 8005fdc:	e7c7      	b.n	8005f6e <__ssputs_r+0x46>
	...

08005fe0 <_svfiprintf_r>:
 8005fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe4:	4698      	mov	r8, r3
 8005fe6:	898b      	ldrh	r3, [r1, #12]
 8005fe8:	4607      	mov	r7, r0
 8005fea:	061b      	lsls	r3, r3, #24
 8005fec:	460d      	mov	r5, r1
 8005fee:	4614      	mov	r4, r2
 8005ff0:	b09d      	sub	sp, #116	; 0x74
 8005ff2:	d50e      	bpl.n	8006012 <_svfiprintf_r+0x32>
 8005ff4:	690b      	ldr	r3, [r1, #16]
 8005ff6:	b963      	cbnz	r3, 8006012 <_svfiprintf_r+0x32>
 8005ff8:	2140      	movs	r1, #64	; 0x40
 8005ffa:	f7ff ff3b 	bl	8005e74 <_malloc_r>
 8005ffe:	6028      	str	r0, [r5, #0]
 8006000:	6128      	str	r0, [r5, #16]
 8006002:	b920      	cbnz	r0, 800600e <_svfiprintf_r+0x2e>
 8006004:	230c      	movs	r3, #12
 8006006:	603b      	str	r3, [r7, #0]
 8006008:	f04f 30ff 	mov.w	r0, #4294967295
 800600c:	e0d1      	b.n	80061b2 <_svfiprintf_r+0x1d2>
 800600e:	2340      	movs	r3, #64	; 0x40
 8006010:	616b      	str	r3, [r5, #20]
 8006012:	2300      	movs	r3, #0
 8006014:	9309      	str	r3, [sp, #36]	; 0x24
 8006016:	2320      	movs	r3, #32
 8006018:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800601c:	2330      	movs	r3, #48	; 0x30
 800601e:	f04f 0901 	mov.w	r9, #1
 8006022:	f8cd 800c 	str.w	r8, [sp, #12]
 8006026:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80061cc <_svfiprintf_r+0x1ec>
 800602a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800602e:	4623      	mov	r3, r4
 8006030:	469a      	mov	sl, r3
 8006032:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006036:	b10a      	cbz	r2, 800603c <_svfiprintf_r+0x5c>
 8006038:	2a25      	cmp	r2, #37	; 0x25
 800603a:	d1f9      	bne.n	8006030 <_svfiprintf_r+0x50>
 800603c:	ebba 0b04 	subs.w	fp, sl, r4
 8006040:	d00b      	beq.n	800605a <_svfiprintf_r+0x7a>
 8006042:	465b      	mov	r3, fp
 8006044:	4622      	mov	r2, r4
 8006046:	4629      	mov	r1, r5
 8006048:	4638      	mov	r0, r7
 800604a:	f7ff ff6d 	bl	8005f28 <__ssputs_r>
 800604e:	3001      	adds	r0, #1
 8006050:	f000 80aa 	beq.w	80061a8 <_svfiprintf_r+0x1c8>
 8006054:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006056:	445a      	add	r2, fp
 8006058:	9209      	str	r2, [sp, #36]	; 0x24
 800605a:	f89a 3000 	ldrb.w	r3, [sl]
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 80a2 	beq.w	80061a8 <_svfiprintf_r+0x1c8>
 8006064:	2300      	movs	r3, #0
 8006066:	f04f 32ff 	mov.w	r2, #4294967295
 800606a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800606e:	f10a 0a01 	add.w	sl, sl, #1
 8006072:	9304      	str	r3, [sp, #16]
 8006074:	9307      	str	r3, [sp, #28]
 8006076:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800607a:	931a      	str	r3, [sp, #104]	; 0x68
 800607c:	4654      	mov	r4, sl
 800607e:	2205      	movs	r2, #5
 8006080:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006084:	4851      	ldr	r0, [pc, #324]	; (80061cc <_svfiprintf_r+0x1ec>)
 8006086:	f7ff fafd 	bl	8005684 <memchr>
 800608a:	9a04      	ldr	r2, [sp, #16]
 800608c:	b9d8      	cbnz	r0, 80060c6 <_svfiprintf_r+0xe6>
 800608e:	06d0      	lsls	r0, r2, #27
 8006090:	bf44      	itt	mi
 8006092:	2320      	movmi	r3, #32
 8006094:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006098:	0711      	lsls	r1, r2, #28
 800609a:	bf44      	itt	mi
 800609c:	232b      	movmi	r3, #43	; 0x2b
 800609e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060a2:	f89a 3000 	ldrb.w	r3, [sl]
 80060a6:	2b2a      	cmp	r3, #42	; 0x2a
 80060a8:	d015      	beq.n	80060d6 <_svfiprintf_r+0xf6>
 80060aa:	4654      	mov	r4, sl
 80060ac:	2000      	movs	r0, #0
 80060ae:	f04f 0c0a 	mov.w	ip, #10
 80060b2:	9a07      	ldr	r2, [sp, #28]
 80060b4:	4621      	mov	r1, r4
 80060b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060ba:	3b30      	subs	r3, #48	; 0x30
 80060bc:	2b09      	cmp	r3, #9
 80060be:	d94e      	bls.n	800615e <_svfiprintf_r+0x17e>
 80060c0:	b1b0      	cbz	r0, 80060f0 <_svfiprintf_r+0x110>
 80060c2:	9207      	str	r2, [sp, #28]
 80060c4:	e014      	b.n	80060f0 <_svfiprintf_r+0x110>
 80060c6:	eba0 0308 	sub.w	r3, r0, r8
 80060ca:	fa09 f303 	lsl.w	r3, r9, r3
 80060ce:	4313      	orrs	r3, r2
 80060d0:	46a2      	mov	sl, r4
 80060d2:	9304      	str	r3, [sp, #16]
 80060d4:	e7d2      	b.n	800607c <_svfiprintf_r+0x9c>
 80060d6:	9b03      	ldr	r3, [sp, #12]
 80060d8:	1d19      	adds	r1, r3, #4
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	9103      	str	r1, [sp, #12]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	bfbb      	ittet	lt
 80060e2:	425b      	neglt	r3, r3
 80060e4:	f042 0202 	orrlt.w	r2, r2, #2
 80060e8:	9307      	strge	r3, [sp, #28]
 80060ea:	9307      	strlt	r3, [sp, #28]
 80060ec:	bfb8      	it	lt
 80060ee:	9204      	strlt	r2, [sp, #16]
 80060f0:	7823      	ldrb	r3, [r4, #0]
 80060f2:	2b2e      	cmp	r3, #46	; 0x2e
 80060f4:	d10c      	bne.n	8006110 <_svfiprintf_r+0x130>
 80060f6:	7863      	ldrb	r3, [r4, #1]
 80060f8:	2b2a      	cmp	r3, #42	; 0x2a
 80060fa:	d135      	bne.n	8006168 <_svfiprintf_r+0x188>
 80060fc:	9b03      	ldr	r3, [sp, #12]
 80060fe:	3402      	adds	r4, #2
 8006100:	1d1a      	adds	r2, r3, #4
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	9203      	str	r2, [sp, #12]
 8006106:	2b00      	cmp	r3, #0
 8006108:	bfb8      	it	lt
 800610a:	f04f 33ff 	movlt.w	r3, #4294967295
 800610e:	9305      	str	r3, [sp, #20]
 8006110:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80061dc <_svfiprintf_r+0x1fc>
 8006114:	2203      	movs	r2, #3
 8006116:	4650      	mov	r0, sl
 8006118:	7821      	ldrb	r1, [r4, #0]
 800611a:	f7ff fab3 	bl	8005684 <memchr>
 800611e:	b140      	cbz	r0, 8006132 <_svfiprintf_r+0x152>
 8006120:	2340      	movs	r3, #64	; 0x40
 8006122:	eba0 000a 	sub.w	r0, r0, sl
 8006126:	fa03 f000 	lsl.w	r0, r3, r0
 800612a:	9b04      	ldr	r3, [sp, #16]
 800612c:	3401      	adds	r4, #1
 800612e:	4303      	orrs	r3, r0
 8006130:	9304      	str	r3, [sp, #16]
 8006132:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006136:	2206      	movs	r2, #6
 8006138:	4825      	ldr	r0, [pc, #148]	; (80061d0 <_svfiprintf_r+0x1f0>)
 800613a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800613e:	f7ff faa1 	bl	8005684 <memchr>
 8006142:	2800      	cmp	r0, #0
 8006144:	d038      	beq.n	80061b8 <_svfiprintf_r+0x1d8>
 8006146:	4b23      	ldr	r3, [pc, #140]	; (80061d4 <_svfiprintf_r+0x1f4>)
 8006148:	bb1b      	cbnz	r3, 8006192 <_svfiprintf_r+0x1b2>
 800614a:	9b03      	ldr	r3, [sp, #12]
 800614c:	3307      	adds	r3, #7
 800614e:	f023 0307 	bic.w	r3, r3, #7
 8006152:	3308      	adds	r3, #8
 8006154:	9303      	str	r3, [sp, #12]
 8006156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006158:	4433      	add	r3, r6
 800615a:	9309      	str	r3, [sp, #36]	; 0x24
 800615c:	e767      	b.n	800602e <_svfiprintf_r+0x4e>
 800615e:	460c      	mov	r4, r1
 8006160:	2001      	movs	r0, #1
 8006162:	fb0c 3202 	mla	r2, ip, r2, r3
 8006166:	e7a5      	b.n	80060b4 <_svfiprintf_r+0xd4>
 8006168:	2300      	movs	r3, #0
 800616a:	f04f 0c0a 	mov.w	ip, #10
 800616e:	4619      	mov	r1, r3
 8006170:	3401      	adds	r4, #1
 8006172:	9305      	str	r3, [sp, #20]
 8006174:	4620      	mov	r0, r4
 8006176:	f810 2b01 	ldrb.w	r2, [r0], #1
 800617a:	3a30      	subs	r2, #48	; 0x30
 800617c:	2a09      	cmp	r2, #9
 800617e:	d903      	bls.n	8006188 <_svfiprintf_r+0x1a8>
 8006180:	2b00      	cmp	r3, #0
 8006182:	d0c5      	beq.n	8006110 <_svfiprintf_r+0x130>
 8006184:	9105      	str	r1, [sp, #20]
 8006186:	e7c3      	b.n	8006110 <_svfiprintf_r+0x130>
 8006188:	4604      	mov	r4, r0
 800618a:	2301      	movs	r3, #1
 800618c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006190:	e7f0      	b.n	8006174 <_svfiprintf_r+0x194>
 8006192:	ab03      	add	r3, sp, #12
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	462a      	mov	r2, r5
 8006198:	4638      	mov	r0, r7
 800619a:	4b0f      	ldr	r3, [pc, #60]	; (80061d8 <_svfiprintf_r+0x1f8>)
 800619c:	a904      	add	r1, sp, #16
 800619e:	f7fe f805 	bl	80041ac <_printf_float>
 80061a2:	1c42      	adds	r2, r0, #1
 80061a4:	4606      	mov	r6, r0
 80061a6:	d1d6      	bne.n	8006156 <_svfiprintf_r+0x176>
 80061a8:	89ab      	ldrh	r3, [r5, #12]
 80061aa:	065b      	lsls	r3, r3, #25
 80061ac:	f53f af2c 	bmi.w	8006008 <_svfiprintf_r+0x28>
 80061b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061b2:	b01d      	add	sp, #116	; 0x74
 80061b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b8:	ab03      	add	r3, sp, #12
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	462a      	mov	r2, r5
 80061be:	4638      	mov	r0, r7
 80061c0:	4b05      	ldr	r3, [pc, #20]	; (80061d8 <_svfiprintf_r+0x1f8>)
 80061c2:	a904      	add	r1, sp, #16
 80061c4:	f7fe fa8e 	bl	80046e4 <_printf_i>
 80061c8:	e7eb      	b.n	80061a2 <_svfiprintf_r+0x1c2>
 80061ca:	bf00      	nop
 80061cc:	08007054 	.word	0x08007054
 80061d0:	0800705e 	.word	0x0800705e
 80061d4:	080041ad 	.word	0x080041ad
 80061d8:	08005f29 	.word	0x08005f29
 80061dc:	0800705a 	.word	0x0800705a

080061e0 <_sbrk_r>:
 80061e0:	b538      	push	{r3, r4, r5, lr}
 80061e2:	2300      	movs	r3, #0
 80061e4:	4d05      	ldr	r5, [pc, #20]	; (80061fc <_sbrk_r+0x1c>)
 80061e6:	4604      	mov	r4, r0
 80061e8:	4608      	mov	r0, r1
 80061ea:	602b      	str	r3, [r5, #0]
 80061ec:	f7fb fb7a 	bl	80018e4 <_sbrk>
 80061f0:	1c43      	adds	r3, r0, #1
 80061f2:	d102      	bne.n	80061fa <_sbrk_r+0x1a>
 80061f4:	682b      	ldr	r3, [r5, #0]
 80061f6:	b103      	cbz	r3, 80061fa <_sbrk_r+0x1a>
 80061f8:	6023      	str	r3, [r4, #0]
 80061fa:	bd38      	pop	{r3, r4, r5, pc}
 80061fc:	20000374 	.word	0x20000374

08006200 <__assert_func>:
 8006200:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006202:	4614      	mov	r4, r2
 8006204:	461a      	mov	r2, r3
 8006206:	4b09      	ldr	r3, [pc, #36]	; (800622c <__assert_func+0x2c>)
 8006208:	4605      	mov	r5, r0
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68d8      	ldr	r0, [r3, #12]
 800620e:	b14c      	cbz	r4, 8006224 <__assert_func+0x24>
 8006210:	4b07      	ldr	r3, [pc, #28]	; (8006230 <__assert_func+0x30>)
 8006212:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006216:	9100      	str	r1, [sp, #0]
 8006218:	462b      	mov	r3, r5
 800621a:	4906      	ldr	r1, [pc, #24]	; (8006234 <__assert_func+0x34>)
 800621c:	f000 f80e 	bl	800623c <fiprintf>
 8006220:	f000 faa2 	bl	8006768 <abort>
 8006224:	4b04      	ldr	r3, [pc, #16]	; (8006238 <__assert_func+0x38>)
 8006226:	461c      	mov	r4, r3
 8006228:	e7f3      	b.n	8006212 <__assert_func+0x12>
 800622a:	bf00      	nop
 800622c:	2000000c 	.word	0x2000000c
 8006230:	08007065 	.word	0x08007065
 8006234:	08007072 	.word	0x08007072
 8006238:	080070a0 	.word	0x080070a0

0800623c <fiprintf>:
 800623c:	b40e      	push	{r1, r2, r3}
 800623e:	b503      	push	{r0, r1, lr}
 8006240:	4601      	mov	r1, r0
 8006242:	ab03      	add	r3, sp, #12
 8006244:	4805      	ldr	r0, [pc, #20]	; (800625c <fiprintf+0x20>)
 8006246:	f853 2b04 	ldr.w	r2, [r3], #4
 800624a:	6800      	ldr	r0, [r0, #0]
 800624c:	9301      	str	r3, [sp, #4]
 800624e:	f000 f88d 	bl	800636c <_vfiprintf_r>
 8006252:	b002      	add	sp, #8
 8006254:	f85d eb04 	ldr.w	lr, [sp], #4
 8006258:	b003      	add	sp, #12
 800625a:	4770      	bx	lr
 800625c:	2000000c 	.word	0x2000000c

08006260 <__ascii_mbtowc>:
 8006260:	b082      	sub	sp, #8
 8006262:	b901      	cbnz	r1, 8006266 <__ascii_mbtowc+0x6>
 8006264:	a901      	add	r1, sp, #4
 8006266:	b142      	cbz	r2, 800627a <__ascii_mbtowc+0x1a>
 8006268:	b14b      	cbz	r3, 800627e <__ascii_mbtowc+0x1e>
 800626a:	7813      	ldrb	r3, [r2, #0]
 800626c:	600b      	str	r3, [r1, #0]
 800626e:	7812      	ldrb	r2, [r2, #0]
 8006270:	1e10      	subs	r0, r2, #0
 8006272:	bf18      	it	ne
 8006274:	2001      	movne	r0, #1
 8006276:	b002      	add	sp, #8
 8006278:	4770      	bx	lr
 800627a:	4610      	mov	r0, r2
 800627c:	e7fb      	b.n	8006276 <__ascii_mbtowc+0x16>
 800627e:	f06f 0001 	mvn.w	r0, #1
 8006282:	e7f8      	b.n	8006276 <__ascii_mbtowc+0x16>

08006284 <memmove>:
 8006284:	4288      	cmp	r0, r1
 8006286:	b510      	push	{r4, lr}
 8006288:	eb01 0402 	add.w	r4, r1, r2
 800628c:	d902      	bls.n	8006294 <memmove+0x10>
 800628e:	4284      	cmp	r4, r0
 8006290:	4623      	mov	r3, r4
 8006292:	d807      	bhi.n	80062a4 <memmove+0x20>
 8006294:	1e43      	subs	r3, r0, #1
 8006296:	42a1      	cmp	r1, r4
 8006298:	d008      	beq.n	80062ac <memmove+0x28>
 800629a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800629e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062a2:	e7f8      	b.n	8006296 <memmove+0x12>
 80062a4:	4601      	mov	r1, r0
 80062a6:	4402      	add	r2, r0
 80062a8:	428a      	cmp	r2, r1
 80062aa:	d100      	bne.n	80062ae <memmove+0x2a>
 80062ac:	bd10      	pop	{r4, pc}
 80062ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80062b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80062b6:	e7f7      	b.n	80062a8 <memmove+0x24>

080062b8 <__malloc_lock>:
 80062b8:	4801      	ldr	r0, [pc, #4]	; (80062c0 <__malloc_lock+0x8>)
 80062ba:	f000 bc15 	b.w	8006ae8 <__retarget_lock_acquire_recursive>
 80062be:	bf00      	nop
 80062c0:	2000037c 	.word	0x2000037c

080062c4 <__malloc_unlock>:
 80062c4:	4801      	ldr	r0, [pc, #4]	; (80062cc <__malloc_unlock+0x8>)
 80062c6:	f000 bc10 	b.w	8006aea <__retarget_lock_release_recursive>
 80062ca:	bf00      	nop
 80062cc:	2000037c 	.word	0x2000037c

080062d0 <_realloc_r>:
 80062d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d2:	4607      	mov	r7, r0
 80062d4:	4614      	mov	r4, r2
 80062d6:	460e      	mov	r6, r1
 80062d8:	b921      	cbnz	r1, 80062e4 <_realloc_r+0x14>
 80062da:	4611      	mov	r1, r2
 80062dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80062e0:	f7ff bdc8 	b.w	8005e74 <_malloc_r>
 80062e4:	b922      	cbnz	r2, 80062f0 <_realloc_r+0x20>
 80062e6:	f7ff fd79 	bl	8005ddc <_free_r>
 80062ea:	4625      	mov	r5, r4
 80062ec:	4628      	mov	r0, r5
 80062ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062f0:	f000 fc60 	bl	8006bb4 <_malloc_usable_size_r>
 80062f4:	42a0      	cmp	r0, r4
 80062f6:	d20f      	bcs.n	8006318 <_realloc_r+0x48>
 80062f8:	4621      	mov	r1, r4
 80062fa:	4638      	mov	r0, r7
 80062fc:	f7ff fdba 	bl	8005e74 <_malloc_r>
 8006300:	4605      	mov	r5, r0
 8006302:	2800      	cmp	r0, #0
 8006304:	d0f2      	beq.n	80062ec <_realloc_r+0x1c>
 8006306:	4631      	mov	r1, r6
 8006308:	4622      	mov	r2, r4
 800630a:	f7ff f9c9 	bl	80056a0 <memcpy>
 800630e:	4631      	mov	r1, r6
 8006310:	4638      	mov	r0, r7
 8006312:	f7ff fd63 	bl	8005ddc <_free_r>
 8006316:	e7e9      	b.n	80062ec <_realloc_r+0x1c>
 8006318:	4635      	mov	r5, r6
 800631a:	e7e7      	b.n	80062ec <_realloc_r+0x1c>

0800631c <__sfputc_r>:
 800631c:	6893      	ldr	r3, [r2, #8]
 800631e:	b410      	push	{r4}
 8006320:	3b01      	subs	r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	6093      	str	r3, [r2, #8]
 8006326:	da07      	bge.n	8006338 <__sfputc_r+0x1c>
 8006328:	6994      	ldr	r4, [r2, #24]
 800632a:	42a3      	cmp	r3, r4
 800632c:	db01      	blt.n	8006332 <__sfputc_r+0x16>
 800632e:	290a      	cmp	r1, #10
 8006330:	d102      	bne.n	8006338 <__sfputc_r+0x1c>
 8006332:	bc10      	pop	{r4}
 8006334:	f000 b94a 	b.w	80065cc <__swbuf_r>
 8006338:	6813      	ldr	r3, [r2, #0]
 800633a:	1c58      	adds	r0, r3, #1
 800633c:	6010      	str	r0, [r2, #0]
 800633e:	7019      	strb	r1, [r3, #0]
 8006340:	4608      	mov	r0, r1
 8006342:	bc10      	pop	{r4}
 8006344:	4770      	bx	lr

08006346 <__sfputs_r>:
 8006346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006348:	4606      	mov	r6, r0
 800634a:	460f      	mov	r7, r1
 800634c:	4614      	mov	r4, r2
 800634e:	18d5      	adds	r5, r2, r3
 8006350:	42ac      	cmp	r4, r5
 8006352:	d101      	bne.n	8006358 <__sfputs_r+0x12>
 8006354:	2000      	movs	r0, #0
 8006356:	e007      	b.n	8006368 <__sfputs_r+0x22>
 8006358:	463a      	mov	r2, r7
 800635a:	4630      	mov	r0, r6
 800635c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006360:	f7ff ffdc 	bl	800631c <__sfputc_r>
 8006364:	1c43      	adds	r3, r0, #1
 8006366:	d1f3      	bne.n	8006350 <__sfputs_r+0xa>
 8006368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800636c <_vfiprintf_r>:
 800636c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006370:	460d      	mov	r5, r1
 8006372:	4614      	mov	r4, r2
 8006374:	4698      	mov	r8, r3
 8006376:	4606      	mov	r6, r0
 8006378:	b09d      	sub	sp, #116	; 0x74
 800637a:	b118      	cbz	r0, 8006384 <_vfiprintf_r+0x18>
 800637c:	6983      	ldr	r3, [r0, #24]
 800637e:	b90b      	cbnz	r3, 8006384 <_vfiprintf_r+0x18>
 8006380:	f000 fb14 	bl	80069ac <__sinit>
 8006384:	4b89      	ldr	r3, [pc, #548]	; (80065ac <_vfiprintf_r+0x240>)
 8006386:	429d      	cmp	r5, r3
 8006388:	d11b      	bne.n	80063c2 <_vfiprintf_r+0x56>
 800638a:	6875      	ldr	r5, [r6, #4]
 800638c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800638e:	07d9      	lsls	r1, r3, #31
 8006390:	d405      	bmi.n	800639e <_vfiprintf_r+0x32>
 8006392:	89ab      	ldrh	r3, [r5, #12]
 8006394:	059a      	lsls	r2, r3, #22
 8006396:	d402      	bmi.n	800639e <_vfiprintf_r+0x32>
 8006398:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800639a:	f000 fba5 	bl	8006ae8 <__retarget_lock_acquire_recursive>
 800639e:	89ab      	ldrh	r3, [r5, #12]
 80063a0:	071b      	lsls	r3, r3, #28
 80063a2:	d501      	bpl.n	80063a8 <_vfiprintf_r+0x3c>
 80063a4:	692b      	ldr	r3, [r5, #16]
 80063a6:	b9eb      	cbnz	r3, 80063e4 <_vfiprintf_r+0x78>
 80063a8:	4629      	mov	r1, r5
 80063aa:	4630      	mov	r0, r6
 80063ac:	f000 f96e 	bl	800668c <__swsetup_r>
 80063b0:	b1c0      	cbz	r0, 80063e4 <_vfiprintf_r+0x78>
 80063b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063b4:	07dc      	lsls	r4, r3, #31
 80063b6:	d50e      	bpl.n	80063d6 <_vfiprintf_r+0x6a>
 80063b8:	f04f 30ff 	mov.w	r0, #4294967295
 80063bc:	b01d      	add	sp, #116	; 0x74
 80063be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c2:	4b7b      	ldr	r3, [pc, #492]	; (80065b0 <_vfiprintf_r+0x244>)
 80063c4:	429d      	cmp	r5, r3
 80063c6:	d101      	bne.n	80063cc <_vfiprintf_r+0x60>
 80063c8:	68b5      	ldr	r5, [r6, #8]
 80063ca:	e7df      	b.n	800638c <_vfiprintf_r+0x20>
 80063cc:	4b79      	ldr	r3, [pc, #484]	; (80065b4 <_vfiprintf_r+0x248>)
 80063ce:	429d      	cmp	r5, r3
 80063d0:	bf08      	it	eq
 80063d2:	68f5      	ldreq	r5, [r6, #12]
 80063d4:	e7da      	b.n	800638c <_vfiprintf_r+0x20>
 80063d6:	89ab      	ldrh	r3, [r5, #12]
 80063d8:	0598      	lsls	r0, r3, #22
 80063da:	d4ed      	bmi.n	80063b8 <_vfiprintf_r+0x4c>
 80063dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063de:	f000 fb84 	bl	8006aea <__retarget_lock_release_recursive>
 80063e2:	e7e9      	b.n	80063b8 <_vfiprintf_r+0x4c>
 80063e4:	2300      	movs	r3, #0
 80063e6:	9309      	str	r3, [sp, #36]	; 0x24
 80063e8:	2320      	movs	r3, #32
 80063ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063ee:	2330      	movs	r3, #48	; 0x30
 80063f0:	f04f 0901 	mov.w	r9, #1
 80063f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80063f8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80065b8 <_vfiprintf_r+0x24c>
 80063fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006400:	4623      	mov	r3, r4
 8006402:	469a      	mov	sl, r3
 8006404:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006408:	b10a      	cbz	r2, 800640e <_vfiprintf_r+0xa2>
 800640a:	2a25      	cmp	r2, #37	; 0x25
 800640c:	d1f9      	bne.n	8006402 <_vfiprintf_r+0x96>
 800640e:	ebba 0b04 	subs.w	fp, sl, r4
 8006412:	d00b      	beq.n	800642c <_vfiprintf_r+0xc0>
 8006414:	465b      	mov	r3, fp
 8006416:	4622      	mov	r2, r4
 8006418:	4629      	mov	r1, r5
 800641a:	4630      	mov	r0, r6
 800641c:	f7ff ff93 	bl	8006346 <__sfputs_r>
 8006420:	3001      	adds	r0, #1
 8006422:	f000 80aa 	beq.w	800657a <_vfiprintf_r+0x20e>
 8006426:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006428:	445a      	add	r2, fp
 800642a:	9209      	str	r2, [sp, #36]	; 0x24
 800642c:	f89a 3000 	ldrb.w	r3, [sl]
 8006430:	2b00      	cmp	r3, #0
 8006432:	f000 80a2 	beq.w	800657a <_vfiprintf_r+0x20e>
 8006436:	2300      	movs	r3, #0
 8006438:	f04f 32ff 	mov.w	r2, #4294967295
 800643c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006440:	f10a 0a01 	add.w	sl, sl, #1
 8006444:	9304      	str	r3, [sp, #16]
 8006446:	9307      	str	r3, [sp, #28]
 8006448:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800644c:	931a      	str	r3, [sp, #104]	; 0x68
 800644e:	4654      	mov	r4, sl
 8006450:	2205      	movs	r2, #5
 8006452:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006456:	4858      	ldr	r0, [pc, #352]	; (80065b8 <_vfiprintf_r+0x24c>)
 8006458:	f7ff f914 	bl	8005684 <memchr>
 800645c:	9a04      	ldr	r2, [sp, #16]
 800645e:	b9d8      	cbnz	r0, 8006498 <_vfiprintf_r+0x12c>
 8006460:	06d1      	lsls	r1, r2, #27
 8006462:	bf44      	itt	mi
 8006464:	2320      	movmi	r3, #32
 8006466:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800646a:	0713      	lsls	r3, r2, #28
 800646c:	bf44      	itt	mi
 800646e:	232b      	movmi	r3, #43	; 0x2b
 8006470:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006474:	f89a 3000 	ldrb.w	r3, [sl]
 8006478:	2b2a      	cmp	r3, #42	; 0x2a
 800647a:	d015      	beq.n	80064a8 <_vfiprintf_r+0x13c>
 800647c:	4654      	mov	r4, sl
 800647e:	2000      	movs	r0, #0
 8006480:	f04f 0c0a 	mov.w	ip, #10
 8006484:	9a07      	ldr	r2, [sp, #28]
 8006486:	4621      	mov	r1, r4
 8006488:	f811 3b01 	ldrb.w	r3, [r1], #1
 800648c:	3b30      	subs	r3, #48	; 0x30
 800648e:	2b09      	cmp	r3, #9
 8006490:	d94e      	bls.n	8006530 <_vfiprintf_r+0x1c4>
 8006492:	b1b0      	cbz	r0, 80064c2 <_vfiprintf_r+0x156>
 8006494:	9207      	str	r2, [sp, #28]
 8006496:	e014      	b.n	80064c2 <_vfiprintf_r+0x156>
 8006498:	eba0 0308 	sub.w	r3, r0, r8
 800649c:	fa09 f303 	lsl.w	r3, r9, r3
 80064a0:	4313      	orrs	r3, r2
 80064a2:	46a2      	mov	sl, r4
 80064a4:	9304      	str	r3, [sp, #16]
 80064a6:	e7d2      	b.n	800644e <_vfiprintf_r+0xe2>
 80064a8:	9b03      	ldr	r3, [sp, #12]
 80064aa:	1d19      	adds	r1, r3, #4
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	9103      	str	r1, [sp, #12]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	bfbb      	ittet	lt
 80064b4:	425b      	neglt	r3, r3
 80064b6:	f042 0202 	orrlt.w	r2, r2, #2
 80064ba:	9307      	strge	r3, [sp, #28]
 80064bc:	9307      	strlt	r3, [sp, #28]
 80064be:	bfb8      	it	lt
 80064c0:	9204      	strlt	r2, [sp, #16]
 80064c2:	7823      	ldrb	r3, [r4, #0]
 80064c4:	2b2e      	cmp	r3, #46	; 0x2e
 80064c6:	d10c      	bne.n	80064e2 <_vfiprintf_r+0x176>
 80064c8:	7863      	ldrb	r3, [r4, #1]
 80064ca:	2b2a      	cmp	r3, #42	; 0x2a
 80064cc:	d135      	bne.n	800653a <_vfiprintf_r+0x1ce>
 80064ce:	9b03      	ldr	r3, [sp, #12]
 80064d0:	3402      	adds	r4, #2
 80064d2:	1d1a      	adds	r2, r3, #4
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	9203      	str	r2, [sp, #12]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	bfb8      	it	lt
 80064dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80064e0:	9305      	str	r3, [sp, #20]
 80064e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80065c8 <_vfiprintf_r+0x25c>
 80064e6:	2203      	movs	r2, #3
 80064e8:	4650      	mov	r0, sl
 80064ea:	7821      	ldrb	r1, [r4, #0]
 80064ec:	f7ff f8ca 	bl	8005684 <memchr>
 80064f0:	b140      	cbz	r0, 8006504 <_vfiprintf_r+0x198>
 80064f2:	2340      	movs	r3, #64	; 0x40
 80064f4:	eba0 000a 	sub.w	r0, r0, sl
 80064f8:	fa03 f000 	lsl.w	r0, r3, r0
 80064fc:	9b04      	ldr	r3, [sp, #16]
 80064fe:	3401      	adds	r4, #1
 8006500:	4303      	orrs	r3, r0
 8006502:	9304      	str	r3, [sp, #16]
 8006504:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006508:	2206      	movs	r2, #6
 800650a:	482c      	ldr	r0, [pc, #176]	; (80065bc <_vfiprintf_r+0x250>)
 800650c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006510:	f7ff f8b8 	bl	8005684 <memchr>
 8006514:	2800      	cmp	r0, #0
 8006516:	d03f      	beq.n	8006598 <_vfiprintf_r+0x22c>
 8006518:	4b29      	ldr	r3, [pc, #164]	; (80065c0 <_vfiprintf_r+0x254>)
 800651a:	bb1b      	cbnz	r3, 8006564 <_vfiprintf_r+0x1f8>
 800651c:	9b03      	ldr	r3, [sp, #12]
 800651e:	3307      	adds	r3, #7
 8006520:	f023 0307 	bic.w	r3, r3, #7
 8006524:	3308      	adds	r3, #8
 8006526:	9303      	str	r3, [sp, #12]
 8006528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800652a:	443b      	add	r3, r7
 800652c:	9309      	str	r3, [sp, #36]	; 0x24
 800652e:	e767      	b.n	8006400 <_vfiprintf_r+0x94>
 8006530:	460c      	mov	r4, r1
 8006532:	2001      	movs	r0, #1
 8006534:	fb0c 3202 	mla	r2, ip, r2, r3
 8006538:	e7a5      	b.n	8006486 <_vfiprintf_r+0x11a>
 800653a:	2300      	movs	r3, #0
 800653c:	f04f 0c0a 	mov.w	ip, #10
 8006540:	4619      	mov	r1, r3
 8006542:	3401      	adds	r4, #1
 8006544:	9305      	str	r3, [sp, #20]
 8006546:	4620      	mov	r0, r4
 8006548:	f810 2b01 	ldrb.w	r2, [r0], #1
 800654c:	3a30      	subs	r2, #48	; 0x30
 800654e:	2a09      	cmp	r2, #9
 8006550:	d903      	bls.n	800655a <_vfiprintf_r+0x1ee>
 8006552:	2b00      	cmp	r3, #0
 8006554:	d0c5      	beq.n	80064e2 <_vfiprintf_r+0x176>
 8006556:	9105      	str	r1, [sp, #20]
 8006558:	e7c3      	b.n	80064e2 <_vfiprintf_r+0x176>
 800655a:	4604      	mov	r4, r0
 800655c:	2301      	movs	r3, #1
 800655e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006562:	e7f0      	b.n	8006546 <_vfiprintf_r+0x1da>
 8006564:	ab03      	add	r3, sp, #12
 8006566:	9300      	str	r3, [sp, #0]
 8006568:	462a      	mov	r2, r5
 800656a:	4630      	mov	r0, r6
 800656c:	4b15      	ldr	r3, [pc, #84]	; (80065c4 <_vfiprintf_r+0x258>)
 800656e:	a904      	add	r1, sp, #16
 8006570:	f7fd fe1c 	bl	80041ac <_printf_float>
 8006574:	4607      	mov	r7, r0
 8006576:	1c78      	adds	r0, r7, #1
 8006578:	d1d6      	bne.n	8006528 <_vfiprintf_r+0x1bc>
 800657a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800657c:	07d9      	lsls	r1, r3, #31
 800657e:	d405      	bmi.n	800658c <_vfiprintf_r+0x220>
 8006580:	89ab      	ldrh	r3, [r5, #12]
 8006582:	059a      	lsls	r2, r3, #22
 8006584:	d402      	bmi.n	800658c <_vfiprintf_r+0x220>
 8006586:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006588:	f000 faaf 	bl	8006aea <__retarget_lock_release_recursive>
 800658c:	89ab      	ldrh	r3, [r5, #12]
 800658e:	065b      	lsls	r3, r3, #25
 8006590:	f53f af12 	bmi.w	80063b8 <_vfiprintf_r+0x4c>
 8006594:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006596:	e711      	b.n	80063bc <_vfiprintf_r+0x50>
 8006598:	ab03      	add	r3, sp, #12
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	462a      	mov	r2, r5
 800659e:	4630      	mov	r0, r6
 80065a0:	4b08      	ldr	r3, [pc, #32]	; (80065c4 <_vfiprintf_r+0x258>)
 80065a2:	a904      	add	r1, sp, #16
 80065a4:	f7fe f89e 	bl	80046e4 <_printf_i>
 80065a8:	e7e4      	b.n	8006574 <_vfiprintf_r+0x208>
 80065aa:	bf00      	nop
 80065ac:	080071cc 	.word	0x080071cc
 80065b0:	080071ec 	.word	0x080071ec
 80065b4:	080071ac 	.word	0x080071ac
 80065b8:	08007054 	.word	0x08007054
 80065bc:	0800705e 	.word	0x0800705e
 80065c0:	080041ad 	.word	0x080041ad
 80065c4:	08006347 	.word	0x08006347
 80065c8:	0800705a 	.word	0x0800705a

080065cc <__swbuf_r>:
 80065cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ce:	460e      	mov	r6, r1
 80065d0:	4614      	mov	r4, r2
 80065d2:	4605      	mov	r5, r0
 80065d4:	b118      	cbz	r0, 80065de <__swbuf_r+0x12>
 80065d6:	6983      	ldr	r3, [r0, #24]
 80065d8:	b90b      	cbnz	r3, 80065de <__swbuf_r+0x12>
 80065da:	f000 f9e7 	bl	80069ac <__sinit>
 80065de:	4b21      	ldr	r3, [pc, #132]	; (8006664 <__swbuf_r+0x98>)
 80065e0:	429c      	cmp	r4, r3
 80065e2:	d12b      	bne.n	800663c <__swbuf_r+0x70>
 80065e4:	686c      	ldr	r4, [r5, #4]
 80065e6:	69a3      	ldr	r3, [r4, #24]
 80065e8:	60a3      	str	r3, [r4, #8]
 80065ea:	89a3      	ldrh	r3, [r4, #12]
 80065ec:	071a      	lsls	r2, r3, #28
 80065ee:	d52f      	bpl.n	8006650 <__swbuf_r+0x84>
 80065f0:	6923      	ldr	r3, [r4, #16]
 80065f2:	b36b      	cbz	r3, 8006650 <__swbuf_r+0x84>
 80065f4:	6923      	ldr	r3, [r4, #16]
 80065f6:	6820      	ldr	r0, [r4, #0]
 80065f8:	b2f6      	uxtb	r6, r6
 80065fa:	1ac0      	subs	r0, r0, r3
 80065fc:	6963      	ldr	r3, [r4, #20]
 80065fe:	4637      	mov	r7, r6
 8006600:	4283      	cmp	r3, r0
 8006602:	dc04      	bgt.n	800660e <__swbuf_r+0x42>
 8006604:	4621      	mov	r1, r4
 8006606:	4628      	mov	r0, r5
 8006608:	f000 f93c 	bl	8006884 <_fflush_r>
 800660c:	bb30      	cbnz	r0, 800665c <__swbuf_r+0x90>
 800660e:	68a3      	ldr	r3, [r4, #8]
 8006610:	3001      	adds	r0, #1
 8006612:	3b01      	subs	r3, #1
 8006614:	60a3      	str	r3, [r4, #8]
 8006616:	6823      	ldr	r3, [r4, #0]
 8006618:	1c5a      	adds	r2, r3, #1
 800661a:	6022      	str	r2, [r4, #0]
 800661c:	701e      	strb	r6, [r3, #0]
 800661e:	6963      	ldr	r3, [r4, #20]
 8006620:	4283      	cmp	r3, r0
 8006622:	d004      	beq.n	800662e <__swbuf_r+0x62>
 8006624:	89a3      	ldrh	r3, [r4, #12]
 8006626:	07db      	lsls	r3, r3, #31
 8006628:	d506      	bpl.n	8006638 <__swbuf_r+0x6c>
 800662a:	2e0a      	cmp	r6, #10
 800662c:	d104      	bne.n	8006638 <__swbuf_r+0x6c>
 800662e:	4621      	mov	r1, r4
 8006630:	4628      	mov	r0, r5
 8006632:	f000 f927 	bl	8006884 <_fflush_r>
 8006636:	b988      	cbnz	r0, 800665c <__swbuf_r+0x90>
 8006638:	4638      	mov	r0, r7
 800663a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800663c:	4b0a      	ldr	r3, [pc, #40]	; (8006668 <__swbuf_r+0x9c>)
 800663e:	429c      	cmp	r4, r3
 8006640:	d101      	bne.n	8006646 <__swbuf_r+0x7a>
 8006642:	68ac      	ldr	r4, [r5, #8]
 8006644:	e7cf      	b.n	80065e6 <__swbuf_r+0x1a>
 8006646:	4b09      	ldr	r3, [pc, #36]	; (800666c <__swbuf_r+0xa0>)
 8006648:	429c      	cmp	r4, r3
 800664a:	bf08      	it	eq
 800664c:	68ec      	ldreq	r4, [r5, #12]
 800664e:	e7ca      	b.n	80065e6 <__swbuf_r+0x1a>
 8006650:	4621      	mov	r1, r4
 8006652:	4628      	mov	r0, r5
 8006654:	f000 f81a 	bl	800668c <__swsetup_r>
 8006658:	2800      	cmp	r0, #0
 800665a:	d0cb      	beq.n	80065f4 <__swbuf_r+0x28>
 800665c:	f04f 37ff 	mov.w	r7, #4294967295
 8006660:	e7ea      	b.n	8006638 <__swbuf_r+0x6c>
 8006662:	bf00      	nop
 8006664:	080071cc 	.word	0x080071cc
 8006668:	080071ec 	.word	0x080071ec
 800666c:	080071ac 	.word	0x080071ac

08006670 <__ascii_wctomb>:
 8006670:	4603      	mov	r3, r0
 8006672:	4608      	mov	r0, r1
 8006674:	b141      	cbz	r1, 8006688 <__ascii_wctomb+0x18>
 8006676:	2aff      	cmp	r2, #255	; 0xff
 8006678:	d904      	bls.n	8006684 <__ascii_wctomb+0x14>
 800667a:	228a      	movs	r2, #138	; 0x8a
 800667c:	f04f 30ff 	mov.w	r0, #4294967295
 8006680:	601a      	str	r2, [r3, #0]
 8006682:	4770      	bx	lr
 8006684:	2001      	movs	r0, #1
 8006686:	700a      	strb	r2, [r1, #0]
 8006688:	4770      	bx	lr
	...

0800668c <__swsetup_r>:
 800668c:	4b32      	ldr	r3, [pc, #200]	; (8006758 <__swsetup_r+0xcc>)
 800668e:	b570      	push	{r4, r5, r6, lr}
 8006690:	681d      	ldr	r5, [r3, #0]
 8006692:	4606      	mov	r6, r0
 8006694:	460c      	mov	r4, r1
 8006696:	b125      	cbz	r5, 80066a2 <__swsetup_r+0x16>
 8006698:	69ab      	ldr	r3, [r5, #24]
 800669a:	b913      	cbnz	r3, 80066a2 <__swsetup_r+0x16>
 800669c:	4628      	mov	r0, r5
 800669e:	f000 f985 	bl	80069ac <__sinit>
 80066a2:	4b2e      	ldr	r3, [pc, #184]	; (800675c <__swsetup_r+0xd0>)
 80066a4:	429c      	cmp	r4, r3
 80066a6:	d10f      	bne.n	80066c8 <__swsetup_r+0x3c>
 80066a8:	686c      	ldr	r4, [r5, #4]
 80066aa:	89a3      	ldrh	r3, [r4, #12]
 80066ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066b0:	0719      	lsls	r1, r3, #28
 80066b2:	d42c      	bmi.n	800670e <__swsetup_r+0x82>
 80066b4:	06dd      	lsls	r5, r3, #27
 80066b6:	d411      	bmi.n	80066dc <__swsetup_r+0x50>
 80066b8:	2309      	movs	r3, #9
 80066ba:	6033      	str	r3, [r6, #0]
 80066bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80066c0:	f04f 30ff 	mov.w	r0, #4294967295
 80066c4:	81a3      	strh	r3, [r4, #12]
 80066c6:	e03e      	b.n	8006746 <__swsetup_r+0xba>
 80066c8:	4b25      	ldr	r3, [pc, #148]	; (8006760 <__swsetup_r+0xd4>)
 80066ca:	429c      	cmp	r4, r3
 80066cc:	d101      	bne.n	80066d2 <__swsetup_r+0x46>
 80066ce:	68ac      	ldr	r4, [r5, #8]
 80066d0:	e7eb      	b.n	80066aa <__swsetup_r+0x1e>
 80066d2:	4b24      	ldr	r3, [pc, #144]	; (8006764 <__swsetup_r+0xd8>)
 80066d4:	429c      	cmp	r4, r3
 80066d6:	bf08      	it	eq
 80066d8:	68ec      	ldreq	r4, [r5, #12]
 80066da:	e7e6      	b.n	80066aa <__swsetup_r+0x1e>
 80066dc:	0758      	lsls	r0, r3, #29
 80066de:	d512      	bpl.n	8006706 <__swsetup_r+0x7a>
 80066e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066e2:	b141      	cbz	r1, 80066f6 <__swsetup_r+0x6a>
 80066e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066e8:	4299      	cmp	r1, r3
 80066ea:	d002      	beq.n	80066f2 <__swsetup_r+0x66>
 80066ec:	4630      	mov	r0, r6
 80066ee:	f7ff fb75 	bl	8005ddc <_free_r>
 80066f2:	2300      	movs	r3, #0
 80066f4:	6363      	str	r3, [r4, #52]	; 0x34
 80066f6:	89a3      	ldrh	r3, [r4, #12]
 80066f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80066fc:	81a3      	strh	r3, [r4, #12]
 80066fe:	2300      	movs	r3, #0
 8006700:	6063      	str	r3, [r4, #4]
 8006702:	6923      	ldr	r3, [r4, #16]
 8006704:	6023      	str	r3, [r4, #0]
 8006706:	89a3      	ldrh	r3, [r4, #12]
 8006708:	f043 0308 	orr.w	r3, r3, #8
 800670c:	81a3      	strh	r3, [r4, #12]
 800670e:	6923      	ldr	r3, [r4, #16]
 8006710:	b94b      	cbnz	r3, 8006726 <__swsetup_r+0x9a>
 8006712:	89a3      	ldrh	r3, [r4, #12]
 8006714:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800671c:	d003      	beq.n	8006726 <__swsetup_r+0x9a>
 800671e:	4621      	mov	r1, r4
 8006720:	4630      	mov	r0, r6
 8006722:	f000 fa07 	bl	8006b34 <__smakebuf_r>
 8006726:	89a0      	ldrh	r0, [r4, #12]
 8006728:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800672c:	f010 0301 	ands.w	r3, r0, #1
 8006730:	d00a      	beq.n	8006748 <__swsetup_r+0xbc>
 8006732:	2300      	movs	r3, #0
 8006734:	60a3      	str	r3, [r4, #8]
 8006736:	6963      	ldr	r3, [r4, #20]
 8006738:	425b      	negs	r3, r3
 800673a:	61a3      	str	r3, [r4, #24]
 800673c:	6923      	ldr	r3, [r4, #16]
 800673e:	b943      	cbnz	r3, 8006752 <__swsetup_r+0xc6>
 8006740:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006744:	d1ba      	bne.n	80066bc <__swsetup_r+0x30>
 8006746:	bd70      	pop	{r4, r5, r6, pc}
 8006748:	0781      	lsls	r1, r0, #30
 800674a:	bf58      	it	pl
 800674c:	6963      	ldrpl	r3, [r4, #20]
 800674e:	60a3      	str	r3, [r4, #8]
 8006750:	e7f4      	b.n	800673c <__swsetup_r+0xb0>
 8006752:	2000      	movs	r0, #0
 8006754:	e7f7      	b.n	8006746 <__swsetup_r+0xba>
 8006756:	bf00      	nop
 8006758:	2000000c 	.word	0x2000000c
 800675c:	080071cc 	.word	0x080071cc
 8006760:	080071ec 	.word	0x080071ec
 8006764:	080071ac 	.word	0x080071ac

08006768 <abort>:
 8006768:	2006      	movs	r0, #6
 800676a:	b508      	push	{r3, lr}
 800676c:	f000 fa52 	bl	8006c14 <raise>
 8006770:	2001      	movs	r0, #1
 8006772:	f7fb f844 	bl	80017fe <_exit>
	...

08006778 <__sflush_r>:
 8006778:	898a      	ldrh	r2, [r1, #12]
 800677a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800677e:	4605      	mov	r5, r0
 8006780:	0710      	lsls	r0, r2, #28
 8006782:	460c      	mov	r4, r1
 8006784:	d458      	bmi.n	8006838 <__sflush_r+0xc0>
 8006786:	684b      	ldr	r3, [r1, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	dc05      	bgt.n	8006798 <__sflush_r+0x20>
 800678c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800678e:	2b00      	cmp	r3, #0
 8006790:	dc02      	bgt.n	8006798 <__sflush_r+0x20>
 8006792:	2000      	movs	r0, #0
 8006794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006798:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800679a:	2e00      	cmp	r6, #0
 800679c:	d0f9      	beq.n	8006792 <__sflush_r+0x1a>
 800679e:	2300      	movs	r3, #0
 80067a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80067a4:	682f      	ldr	r7, [r5, #0]
 80067a6:	602b      	str	r3, [r5, #0]
 80067a8:	d032      	beq.n	8006810 <__sflush_r+0x98>
 80067aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80067ac:	89a3      	ldrh	r3, [r4, #12]
 80067ae:	075a      	lsls	r2, r3, #29
 80067b0:	d505      	bpl.n	80067be <__sflush_r+0x46>
 80067b2:	6863      	ldr	r3, [r4, #4]
 80067b4:	1ac0      	subs	r0, r0, r3
 80067b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067b8:	b10b      	cbz	r3, 80067be <__sflush_r+0x46>
 80067ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067bc:	1ac0      	subs	r0, r0, r3
 80067be:	2300      	movs	r3, #0
 80067c0:	4602      	mov	r2, r0
 80067c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067c4:	4628      	mov	r0, r5
 80067c6:	6a21      	ldr	r1, [r4, #32]
 80067c8:	47b0      	blx	r6
 80067ca:	1c43      	adds	r3, r0, #1
 80067cc:	89a3      	ldrh	r3, [r4, #12]
 80067ce:	d106      	bne.n	80067de <__sflush_r+0x66>
 80067d0:	6829      	ldr	r1, [r5, #0]
 80067d2:	291d      	cmp	r1, #29
 80067d4:	d82c      	bhi.n	8006830 <__sflush_r+0xb8>
 80067d6:	4a2a      	ldr	r2, [pc, #168]	; (8006880 <__sflush_r+0x108>)
 80067d8:	40ca      	lsrs	r2, r1
 80067da:	07d6      	lsls	r6, r2, #31
 80067dc:	d528      	bpl.n	8006830 <__sflush_r+0xb8>
 80067de:	2200      	movs	r2, #0
 80067e0:	6062      	str	r2, [r4, #4]
 80067e2:	6922      	ldr	r2, [r4, #16]
 80067e4:	04d9      	lsls	r1, r3, #19
 80067e6:	6022      	str	r2, [r4, #0]
 80067e8:	d504      	bpl.n	80067f4 <__sflush_r+0x7c>
 80067ea:	1c42      	adds	r2, r0, #1
 80067ec:	d101      	bne.n	80067f2 <__sflush_r+0x7a>
 80067ee:	682b      	ldr	r3, [r5, #0]
 80067f0:	b903      	cbnz	r3, 80067f4 <__sflush_r+0x7c>
 80067f2:	6560      	str	r0, [r4, #84]	; 0x54
 80067f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067f6:	602f      	str	r7, [r5, #0]
 80067f8:	2900      	cmp	r1, #0
 80067fa:	d0ca      	beq.n	8006792 <__sflush_r+0x1a>
 80067fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006800:	4299      	cmp	r1, r3
 8006802:	d002      	beq.n	800680a <__sflush_r+0x92>
 8006804:	4628      	mov	r0, r5
 8006806:	f7ff fae9 	bl	8005ddc <_free_r>
 800680a:	2000      	movs	r0, #0
 800680c:	6360      	str	r0, [r4, #52]	; 0x34
 800680e:	e7c1      	b.n	8006794 <__sflush_r+0x1c>
 8006810:	6a21      	ldr	r1, [r4, #32]
 8006812:	2301      	movs	r3, #1
 8006814:	4628      	mov	r0, r5
 8006816:	47b0      	blx	r6
 8006818:	1c41      	adds	r1, r0, #1
 800681a:	d1c7      	bne.n	80067ac <__sflush_r+0x34>
 800681c:	682b      	ldr	r3, [r5, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d0c4      	beq.n	80067ac <__sflush_r+0x34>
 8006822:	2b1d      	cmp	r3, #29
 8006824:	d001      	beq.n	800682a <__sflush_r+0xb2>
 8006826:	2b16      	cmp	r3, #22
 8006828:	d101      	bne.n	800682e <__sflush_r+0xb6>
 800682a:	602f      	str	r7, [r5, #0]
 800682c:	e7b1      	b.n	8006792 <__sflush_r+0x1a>
 800682e:	89a3      	ldrh	r3, [r4, #12]
 8006830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006834:	81a3      	strh	r3, [r4, #12]
 8006836:	e7ad      	b.n	8006794 <__sflush_r+0x1c>
 8006838:	690f      	ldr	r7, [r1, #16]
 800683a:	2f00      	cmp	r7, #0
 800683c:	d0a9      	beq.n	8006792 <__sflush_r+0x1a>
 800683e:	0793      	lsls	r3, r2, #30
 8006840:	bf18      	it	ne
 8006842:	2300      	movne	r3, #0
 8006844:	680e      	ldr	r6, [r1, #0]
 8006846:	bf08      	it	eq
 8006848:	694b      	ldreq	r3, [r1, #20]
 800684a:	eba6 0807 	sub.w	r8, r6, r7
 800684e:	600f      	str	r7, [r1, #0]
 8006850:	608b      	str	r3, [r1, #8]
 8006852:	f1b8 0f00 	cmp.w	r8, #0
 8006856:	dd9c      	ble.n	8006792 <__sflush_r+0x1a>
 8006858:	4643      	mov	r3, r8
 800685a:	463a      	mov	r2, r7
 800685c:	4628      	mov	r0, r5
 800685e:	6a21      	ldr	r1, [r4, #32]
 8006860:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006862:	47b0      	blx	r6
 8006864:	2800      	cmp	r0, #0
 8006866:	dc06      	bgt.n	8006876 <__sflush_r+0xfe>
 8006868:	89a3      	ldrh	r3, [r4, #12]
 800686a:	f04f 30ff 	mov.w	r0, #4294967295
 800686e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006872:	81a3      	strh	r3, [r4, #12]
 8006874:	e78e      	b.n	8006794 <__sflush_r+0x1c>
 8006876:	4407      	add	r7, r0
 8006878:	eba8 0800 	sub.w	r8, r8, r0
 800687c:	e7e9      	b.n	8006852 <__sflush_r+0xda>
 800687e:	bf00      	nop
 8006880:	20400001 	.word	0x20400001

08006884 <_fflush_r>:
 8006884:	b538      	push	{r3, r4, r5, lr}
 8006886:	690b      	ldr	r3, [r1, #16]
 8006888:	4605      	mov	r5, r0
 800688a:	460c      	mov	r4, r1
 800688c:	b913      	cbnz	r3, 8006894 <_fflush_r+0x10>
 800688e:	2500      	movs	r5, #0
 8006890:	4628      	mov	r0, r5
 8006892:	bd38      	pop	{r3, r4, r5, pc}
 8006894:	b118      	cbz	r0, 800689e <_fflush_r+0x1a>
 8006896:	6983      	ldr	r3, [r0, #24]
 8006898:	b90b      	cbnz	r3, 800689e <_fflush_r+0x1a>
 800689a:	f000 f887 	bl	80069ac <__sinit>
 800689e:	4b14      	ldr	r3, [pc, #80]	; (80068f0 <_fflush_r+0x6c>)
 80068a0:	429c      	cmp	r4, r3
 80068a2:	d11b      	bne.n	80068dc <_fflush_r+0x58>
 80068a4:	686c      	ldr	r4, [r5, #4]
 80068a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d0ef      	beq.n	800688e <_fflush_r+0xa>
 80068ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80068b0:	07d0      	lsls	r0, r2, #31
 80068b2:	d404      	bmi.n	80068be <_fflush_r+0x3a>
 80068b4:	0599      	lsls	r1, r3, #22
 80068b6:	d402      	bmi.n	80068be <_fflush_r+0x3a>
 80068b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068ba:	f000 f915 	bl	8006ae8 <__retarget_lock_acquire_recursive>
 80068be:	4628      	mov	r0, r5
 80068c0:	4621      	mov	r1, r4
 80068c2:	f7ff ff59 	bl	8006778 <__sflush_r>
 80068c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068c8:	4605      	mov	r5, r0
 80068ca:	07da      	lsls	r2, r3, #31
 80068cc:	d4e0      	bmi.n	8006890 <_fflush_r+0xc>
 80068ce:	89a3      	ldrh	r3, [r4, #12]
 80068d0:	059b      	lsls	r3, r3, #22
 80068d2:	d4dd      	bmi.n	8006890 <_fflush_r+0xc>
 80068d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068d6:	f000 f908 	bl	8006aea <__retarget_lock_release_recursive>
 80068da:	e7d9      	b.n	8006890 <_fflush_r+0xc>
 80068dc:	4b05      	ldr	r3, [pc, #20]	; (80068f4 <_fflush_r+0x70>)
 80068de:	429c      	cmp	r4, r3
 80068e0:	d101      	bne.n	80068e6 <_fflush_r+0x62>
 80068e2:	68ac      	ldr	r4, [r5, #8]
 80068e4:	e7df      	b.n	80068a6 <_fflush_r+0x22>
 80068e6:	4b04      	ldr	r3, [pc, #16]	; (80068f8 <_fflush_r+0x74>)
 80068e8:	429c      	cmp	r4, r3
 80068ea:	bf08      	it	eq
 80068ec:	68ec      	ldreq	r4, [r5, #12]
 80068ee:	e7da      	b.n	80068a6 <_fflush_r+0x22>
 80068f0:	080071cc 	.word	0x080071cc
 80068f4:	080071ec 	.word	0x080071ec
 80068f8:	080071ac 	.word	0x080071ac

080068fc <std>:
 80068fc:	2300      	movs	r3, #0
 80068fe:	b510      	push	{r4, lr}
 8006900:	4604      	mov	r4, r0
 8006902:	e9c0 3300 	strd	r3, r3, [r0]
 8006906:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800690a:	6083      	str	r3, [r0, #8]
 800690c:	8181      	strh	r1, [r0, #12]
 800690e:	6643      	str	r3, [r0, #100]	; 0x64
 8006910:	81c2      	strh	r2, [r0, #14]
 8006912:	6183      	str	r3, [r0, #24]
 8006914:	4619      	mov	r1, r3
 8006916:	2208      	movs	r2, #8
 8006918:	305c      	adds	r0, #92	; 0x5c
 800691a:	f7fd fba1 	bl	8004060 <memset>
 800691e:	4b05      	ldr	r3, [pc, #20]	; (8006934 <std+0x38>)
 8006920:	6224      	str	r4, [r4, #32]
 8006922:	6263      	str	r3, [r4, #36]	; 0x24
 8006924:	4b04      	ldr	r3, [pc, #16]	; (8006938 <std+0x3c>)
 8006926:	62a3      	str	r3, [r4, #40]	; 0x28
 8006928:	4b04      	ldr	r3, [pc, #16]	; (800693c <std+0x40>)
 800692a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800692c:	4b04      	ldr	r3, [pc, #16]	; (8006940 <std+0x44>)
 800692e:	6323      	str	r3, [r4, #48]	; 0x30
 8006930:	bd10      	pop	{r4, pc}
 8006932:	bf00      	nop
 8006934:	08006c4d 	.word	0x08006c4d
 8006938:	08006c6f 	.word	0x08006c6f
 800693c:	08006ca7 	.word	0x08006ca7
 8006940:	08006ccb 	.word	0x08006ccb

08006944 <_cleanup_r>:
 8006944:	4901      	ldr	r1, [pc, #4]	; (800694c <_cleanup_r+0x8>)
 8006946:	f000 b8af 	b.w	8006aa8 <_fwalk_reent>
 800694a:	bf00      	nop
 800694c:	08006885 	.word	0x08006885

08006950 <__sfmoreglue>:
 8006950:	b570      	push	{r4, r5, r6, lr}
 8006952:	2568      	movs	r5, #104	; 0x68
 8006954:	1e4a      	subs	r2, r1, #1
 8006956:	4355      	muls	r5, r2
 8006958:	460e      	mov	r6, r1
 800695a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800695e:	f7ff fa89 	bl	8005e74 <_malloc_r>
 8006962:	4604      	mov	r4, r0
 8006964:	b140      	cbz	r0, 8006978 <__sfmoreglue+0x28>
 8006966:	2100      	movs	r1, #0
 8006968:	e9c0 1600 	strd	r1, r6, [r0]
 800696c:	300c      	adds	r0, #12
 800696e:	60a0      	str	r0, [r4, #8]
 8006970:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006974:	f7fd fb74 	bl	8004060 <memset>
 8006978:	4620      	mov	r0, r4
 800697a:	bd70      	pop	{r4, r5, r6, pc}

0800697c <__sfp_lock_acquire>:
 800697c:	4801      	ldr	r0, [pc, #4]	; (8006984 <__sfp_lock_acquire+0x8>)
 800697e:	f000 b8b3 	b.w	8006ae8 <__retarget_lock_acquire_recursive>
 8006982:	bf00      	nop
 8006984:	20000380 	.word	0x20000380

08006988 <__sfp_lock_release>:
 8006988:	4801      	ldr	r0, [pc, #4]	; (8006990 <__sfp_lock_release+0x8>)
 800698a:	f000 b8ae 	b.w	8006aea <__retarget_lock_release_recursive>
 800698e:	bf00      	nop
 8006990:	20000380 	.word	0x20000380

08006994 <__sinit_lock_acquire>:
 8006994:	4801      	ldr	r0, [pc, #4]	; (800699c <__sinit_lock_acquire+0x8>)
 8006996:	f000 b8a7 	b.w	8006ae8 <__retarget_lock_acquire_recursive>
 800699a:	bf00      	nop
 800699c:	2000037b 	.word	0x2000037b

080069a0 <__sinit_lock_release>:
 80069a0:	4801      	ldr	r0, [pc, #4]	; (80069a8 <__sinit_lock_release+0x8>)
 80069a2:	f000 b8a2 	b.w	8006aea <__retarget_lock_release_recursive>
 80069a6:	bf00      	nop
 80069a8:	2000037b 	.word	0x2000037b

080069ac <__sinit>:
 80069ac:	b510      	push	{r4, lr}
 80069ae:	4604      	mov	r4, r0
 80069b0:	f7ff fff0 	bl	8006994 <__sinit_lock_acquire>
 80069b4:	69a3      	ldr	r3, [r4, #24]
 80069b6:	b11b      	cbz	r3, 80069c0 <__sinit+0x14>
 80069b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069bc:	f7ff bff0 	b.w	80069a0 <__sinit_lock_release>
 80069c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80069c4:	6523      	str	r3, [r4, #80]	; 0x50
 80069c6:	4b13      	ldr	r3, [pc, #76]	; (8006a14 <__sinit+0x68>)
 80069c8:	4a13      	ldr	r2, [pc, #76]	; (8006a18 <__sinit+0x6c>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80069ce:	42a3      	cmp	r3, r4
 80069d0:	bf08      	it	eq
 80069d2:	2301      	moveq	r3, #1
 80069d4:	4620      	mov	r0, r4
 80069d6:	bf08      	it	eq
 80069d8:	61a3      	streq	r3, [r4, #24]
 80069da:	f000 f81f 	bl	8006a1c <__sfp>
 80069de:	6060      	str	r0, [r4, #4]
 80069e0:	4620      	mov	r0, r4
 80069e2:	f000 f81b 	bl	8006a1c <__sfp>
 80069e6:	60a0      	str	r0, [r4, #8]
 80069e8:	4620      	mov	r0, r4
 80069ea:	f000 f817 	bl	8006a1c <__sfp>
 80069ee:	2200      	movs	r2, #0
 80069f0:	2104      	movs	r1, #4
 80069f2:	60e0      	str	r0, [r4, #12]
 80069f4:	6860      	ldr	r0, [r4, #4]
 80069f6:	f7ff ff81 	bl	80068fc <std>
 80069fa:	2201      	movs	r2, #1
 80069fc:	2109      	movs	r1, #9
 80069fe:	68a0      	ldr	r0, [r4, #8]
 8006a00:	f7ff ff7c 	bl	80068fc <std>
 8006a04:	2202      	movs	r2, #2
 8006a06:	2112      	movs	r1, #18
 8006a08:	68e0      	ldr	r0, [r4, #12]
 8006a0a:	f7ff ff77 	bl	80068fc <std>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	61a3      	str	r3, [r4, #24]
 8006a12:	e7d1      	b.n	80069b8 <__sinit+0xc>
 8006a14:	08006e28 	.word	0x08006e28
 8006a18:	08006945 	.word	0x08006945

08006a1c <__sfp>:
 8006a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a1e:	4607      	mov	r7, r0
 8006a20:	f7ff ffac 	bl	800697c <__sfp_lock_acquire>
 8006a24:	4b1e      	ldr	r3, [pc, #120]	; (8006aa0 <__sfp+0x84>)
 8006a26:	681e      	ldr	r6, [r3, #0]
 8006a28:	69b3      	ldr	r3, [r6, #24]
 8006a2a:	b913      	cbnz	r3, 8006a32 <__sfp+0x16>
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	f7ff ffbd 	bl	80069ac <__sinit>
 8006a32:	3648      	adds	r6, #72	; 0x48
 8006a34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	d503      	bpl.n	8006a44 <__sfp+0x28>
 8006a3c:	6833      	ldr	r3, [r6, #0]
 8006a3e:	b30b      	cbz	r3, 8006a84 <__sfp+0x68>
 8006a40:	6836      	ldr	r6, [r6, #0]
 8006a42:	e7f7      	b.n	8006a34 <__sfp+0x18>
 8006a44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a48:	b9d5      	cbnz	r5, 8006a80 <__sfp+0x64>
 8006a4a:	4b16      	ldr	r3, [pc, #88]	; (8006aa4 <__sfp+0x88>)
 8006a4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a50:	60e3      	str	r3, [r4, #12]
 8006a52:	6665      	str	r5, [r4, #100]	; 0x64
 8006a54:	f000 f847 	bl	8006ae6 <__retarget_lock_init_recursive>
 8006a58:	f7ff ff96 	bl	8006988 <__sfp_lock_release>
 8006a5c:	2208      	movs	r2, #8
 8006a5e:	4629      	mov	r1, r5
 8006a60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006a64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006a68:	6025      	str	r5, [r4, #0]
 8006a6a:	61a5      	str	r5, [r4, #24]
 8006a6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a70:	f7fd faf6 	bl	8004060 <memset>
 8006a74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a80:	3468      	adds	r4, #104	; 0x68
 8006a82:	e7d9      	b.n	8006a38 <__sfp+0x1c>
 8006a84:	2104      	movs	r1, #4
 8006a86:	4638      	mov	r0, r7
 8006a88:	f7ff ff62 	bl	8006950 <__sfmoreglue>
 8006a8c:	4604      	mov	r4, r0
 8006a8e:	6030      	str	r0, [r6, #0]
 8006a90:	2800      	cmp	r0, #0
 8006a92:	d1d5      	bne.n	8006a40 <__sfp+0x24>
 8006a94:	f7ff ff78 	bl	8006988 <__sfp_lock_release>
 8006a98:	230c      	movs	r3, #12
 8006a9a:	603b      	str	r3, [r7, #0]
 8006a9c:	e7ee      	b.n	8006a7c <__sfp+0x60>
 8006a9e:	bf00      	nop
 8006aa0:	08006e28 	.word	0x08006e28
 8006aa4:	ffff0001 	.word	0xffff0001

08006aa8 <_fwalk_reent>:
 8006aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006aac:	4606      	mov	r6, r0
 8006aae:	4688      	mov	r8, r1
 8006ab0:	2700      	movs	r7, #0
 8006ab2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ab6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006aba:	f1b9 0901 	subs.w	r9, r9, #1
 8006abe:	d505      	bpl.n	8006acc <_fwalk_reent+0x24>
 8006ac0:	6824      	ldr	r4, [r4, #0]
 8006ac2:	2c00      	cmp	r4, #0
 8006ac4:	d1f7      	bne.n	8006ab6 <_fwalk_reent+0xe>
 8006ac6:	4638      	mov	r0, r7
 8006ac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006acc:	89ab      	ldrh	r3, [r5, #12]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d907      	bls.n	8006ae2 <_fwalk_reent+0x3a>
 8006ad2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	d003      	beq.n	8006ae2 <_fwalk_reent+0x3a>
 8006ada:	4629      	mov	r1, r5
 8006adc:	4630      	mov	r0, r6
 8006ade:	47c0      	blx	r8
 8006ae0:	4307      	orrs	r7, r0
 8006ae2:	3568      	adds	r5, #104	; 0x68
 8006ae4:	e7e9      	b.n	8006aba <_fwalk_reent+0x12>

08006ae6 <__retarget_lock_init_recursive>:
 8006ae6:	4770      	bx	lr

08006ae8 <__retarget_lock_acquire_recursive>:
 8006ae8:	4770      	bx	lr

08006aea <__retarget_lock_release_recursive>:
 8006aea:	4770      	bx	lr

08006aec <__swhatbuf_r>:
 8006aec:	b570      	push	{r4, r5, r6, lr}
 8006aee:	460e      	mov	r6, r1
 8006af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006af4:	4614      	mov	r4, r2
 8006af6:	2900      	cmp	r1, #0
 8006af8:	461d      	mov	r5, r3
 8006afa:	b096      	sub	sp, #88	; 0x58
 8006afc:	da07      	bge.n	8006b0e <__swhatbuf_r+0x22>
 8006afe:	2300      	movs	r3, #0
 8006b00:	602b      	str	r3, [r5, #0]
 8006b02:	89b3      	ldrh	r3, [r6, #12]
 8006b04:	061a      	lsls	r2, r3, #24
 8006b06:	d410      	bmi.n	8006b2a <__swhatbuf_r+0x3e>
 8006b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b0c:	e00e      	b.n	8006b2c <__swhatbuf_r+0x40>
 8006b0e:	466a      	mov	r2, sp
 8006b10:	f000 f902 	bl	8006d18 <_fstat_r>
 8006b14:	2800      	cmp	r0, #0
 8006b16:	dbf2      	blt.n	8006afe <__swhatbuf_r+0x12>
 8006b18:	9a01      	ldr	r2, [sp, #4]
 8006b1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006b22:	425a      	negs	r2, r3
 8006b24:	415a      	adcs	r2, r3
 8006b26:	602a      	str	r2, [r5, #0]
 8006b28:	e7ee      	b.n	8006b08 <__swhatbuf_r+0x1c>
 8006b2a:	2340      	movs	r3, #64	; 0x40
 8006b2c:	2000      	movs	r0, #0
 8006b2e:	6023      	str	r3, [r4, #0]
 8006b30:	b016      	add	sp, #88	; 0x58
 8006b32:	bd70      	pop	{r4, r5, r6, pc}

08006b34 <__smakebuf_r>:
 8006b34:	898b      	ldrh	r3, [r1, #12]
 8006b36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b38:	079d      	lsls	r5, r3, #30
 8006b3a:	4606      	mov	r6, r0
 8006b3c:	460c      	mov	r4, r1
 8006b3e:	d507      	bpl.n	8006b50 <__smakebuf_r+0x1c>
 8006b40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b44:	6023      	str	r3, [r4, #0]
 8006b46:	6123      	str	r3, [r4, #16]
 8006b48:	2301      	movs	r3, #1
 8006b4a:	6163      	str	r3, [r4, #20]
 8006b4c:	b002      	add	sp, #8
 8006b4e:	bd70      	pop	{r4, r5, r6, pc}
 8006b50:	466a      	mov	r2, sp
 8006b52:	ab01      	add	r3, sp, #4
 8006b54:	f7ff ffca 	bl	8006aec <__swhatbuf_r>
 8006b58:	9900      	ldr	r1, [sp, #0]
 8006b5a:	4605      	mov	r5, r0
 8006b5c:	4630      	mov	r0, r6
 8006b5e:	f7ff f989 	bl	8005e74 <_malloc_r>
 8006b62:	b948      	cbnz	r0, 8006b78 <__smakebuf_r+0x44>
 8006b64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b68:	059a      	lsls	r2, r3, #22
 8006b6a:	d4ef      	bmi.n	8006b4c <__smakebuf_r+0x18>
 8006b6c:	f023 0303 	bic.w	r3, r3, #3
 8006b70:	f043 0302 	orr.w	r3, r3, #2
 8006b74:	81a3      	strh	r3, [r4, #12]
 8006b76:	e7e3      	b.n	8006b40 <__smakebuf_r+0xc>
 8006b78:	4b0d      	ldr	r3, [pc, #52]	; (8006bb0 <__smakebuf_r+0x7c>)
 8006b7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b7c:	89a3      	ldrh	r3, [r4, #12]
 8006b7e:	6020      	str	r0, [r4, #0]
 8006b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b84:	81a3      	strh	r3, [r4, #12]
 8006b86:	9b00      	ldr	r3, [sp, #0]
 8006b88:	6120      	str	r0, [r4, #16]
 8006b8a:	6163      	str	r3, [r4, #20]
 8006b8c:	9b01      	ldr	r3, [sp, #4]
 8006b8e:	b15b      	cbz	r3, 8006ba8 <__smakebuf_r+0x74>
 8006b90:	4630      	mov	r0, r6
 8006b92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b96:	f000 f8d1 	bl	8006d3c <_isatty_r>
 8006b9a:	b128      	cbz	r0, 8006ba8 <__smakebuf_r+0x74>
 8006b9c:	89a3      	ldrh	r3, [r4, #12]
 8006b9e:	f023 0303 	bic.w	r3, r3, #3
 8006ba2:	f043 0301 	orr.w	r3, r3, #1
 8006ba6:	81a3      	strh	r3, [r4, #12]
 8006ba8:	89a0      	ldrh	r0, [r4, #12]
 8006baa:	4305      	orrs	r5, r0
 8006bac:	81a5      	strh	r5, [r4, #12]
 8006bae:	e7cd      	b.n	8006b4c <__smakebuf_r+0x18>
 8006bb0:	08006945 	.word	0x08006945

08006bb4 <_malloc_usable_size_r>:
 8006bb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bb8:	1f18      	subs	r0, r3, #4
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	bfbc      	itt	lt
 8006bbe:	580b      	ldrlt	r3, [r1, r0]
 8006bc0:	18c0      	addlt	r0, r0, r3
 8006bc2:	4770      	bx	lr

08006bc4 <_raise_r>:
 8006bc4:	291f      	cmp	r1, #31
 8006bc6:	b538      	push	{r3, r4, r5, lr}
 8006bc8:	4604      	mov	r4, r0
 8006bca:	460d      	mov	r5, r1
 8006bcc:	d904      	bls.n	8006bd8 <_raise_r+0x14>
 8006bce:	2316      	movs	r3, #22
 8006bd0:	6003      	str	r3, [r0, #0]
 8006bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd6:	bd38      	pop	{r3, r4, r5, pc}
 8006bd8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006bda:	b112      	cbz	r2, 8006be2 <_raise_r+0x1e>
 8006bdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006be0:	b94b      	cbnz	r3, 8006bf6 <_raise_r+0x32>
 8006be2:	4620      	mov	r0, r4
 8006be4:	f000 f830 	bl	8006c48 <_getpid_r>
 8006be8:	462a      	mov	r2, r5
 8006bea:	4601      	mov	r1, r0
 8006bec:	4620      	mov	r0, r4
 8006bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bf2:	f000 b817 	b.w	8006c24 <_kill_r>
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d00a      	beq.n	8006c10 <_raise_r+0x4c>
 8006bfa:	1c59      	adds	r1, r3, #1
 8006bfc:	d103      	bne.n	8006c06 <_raise_r+0x42>
 8006bfe:	2316      	movs	r3, #22
 8006c00:	6003      	str	r3, [r0, #0]
 8006c02:	2001      	movs	r0, #1
 8006c04:	e7e7      	b.n	8006bd6 <_raise_r+0x12>
 8006c06:	2400      	movs	r4, #0
 8006c08:	4628      	mov	r0, r5
 8006c0a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006c0e:	4798      	blx	r3
 8006c10:	2000      	movs	r0, #0
 8006c12:	e7e0      	b.n	8006bd6 <_raise_r+0x12>

08006c14 <raise>:
 8006c14:	4b02      	ldr	r3, [pc, #8]	; (8006c20 <raise+0xc>)
 8006c16:	4601      	mov	r1, r0
 8006c18:	6818      	ldr	r0, [r3, #0]
 8006c1a:	f7ff bfd3 	b.w	8006bc4 <_raise_r>
 8006c1e:	bf00      	nop
 8006c20:	2000000c 	.word	0x2000000c

08006c24 <_kill_r>:
 8006c24:	b538      	push	{r3, r4, r5, lr}
 8006c26:	2300      	movs	r3, #0
 8006c28:	4d06      	ldr	r5, [pc, #24]	; (8006c44 <_kill_r+0x20>)
 8006c2a:	4604      	mov	r4, r0
 8006c2c:	4608      	mov	r0, r1
 8006c2e:	4611      	mov	r1, r2
 8006c30:	602b      	str	r3, [r5, #0]
 8006c32:	f7fa fdd4 	bl	80017de <_kill>
 8006c36:	1c43      	adds	r3, r0, #1
 8006c38:	d102      	bne.n	8006c40 <_kill_r+0x1c>
 8006c3a:	682b      	ldr	r3, [r5, #0]
 8006c3c:	b103      	cbz	r3, 8006c40 <_kill_r+0x1c>
 8006c3e:	6023      	str	r3, [r4, #0]
 8006c40:	bd38      	pop	{r3, r4, r5, pc}
 8006c42:	bf00      	nop
 8006c44:	20000374 	.word	0x20000374

08006c48 <_getpid_r>:
 8006c48:	f7fa bdc2 	b.w	80017d0 <_getpid>

08006c4c <__sread>:
 8006c4c:	b510      	push	{r4, lr}
 8006c4e:	460c      	mov	r4, r1
 8006c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c54:	f000 f894 	bl	8006d80 <_read_r>
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	bfab      	itete	ge
 8006c5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c5e:	89a3      	ldrhlt	r3, [r4, #12]
 8006c60:	181b      	addge	r3, r3, r0
 8006c62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c66:	bfac      	ite	ge
 8006c68:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c6a:	81a3      	strhlt	r3, [r4, #12]
 8006c6c:	bd10      	pop	{r4, pc}

08006c6e <__swrite>:
 8006c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c72:	461f      	mov	r7, r3
 8006c74:	898b      	ldrh	r3, [r1, #12]
 8006c76:	4605      	mov	r5, r0
 8006c78:	05db      	lsls	r3, r3, #23
 8006c7a:	460c      	mov	r4, r1
 8006c7c:	4616      	mov	r6, r2
 8006c7e:	d505      	bpl.n	8006c8c <__swrite+0x1e>
 8006c80:	2302      	movs	r3, #2
 8006c82:	2200      	movs	r2, #0
 8006c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c88:	f000 f868 	bl	8006d5c <_lseek_r>
 8006c8c:	89a3      	ldrh	r3, [r4, #12]
 8006c8e:	4632      	mov	r2, r6
 8006c90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c94:	81a3      	strh	r3, [r4, #12]
 8006c96:	4628      	mov	r0, r5
 8006c98:	463b      	mov	r3, r7
 8006c9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca2:	f000 b817 	b.w	8006cd4 <_write_r>

08006ca6 <__sseek>:
 8006ca6:	b510      	push	{r4, lr}
 8006ca8:	460c      	mov	r4, r1
 8006caa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cae:	f000 f855 	bl	8006d5c <_lseek_r>
 8006cb2:	1c43      	adds	r3, r0, #1
 8006cb4:	89a3      	ldrh	r3, [r4, #12]
 8006cb6:	bf15      	itete	ne
 8006cb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006cba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006cbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006cc2:	81a3      	strheq	r3, [r4, #12]
 8006cc4:	bf18      	it	ne
 8006cc6:	81a3      	strhne	r3, [r4, #12]
 8006cc8:	bd10      	pop	{r4, pc}

08006cca <__sclose>:
 8006cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cce:	f000 b813 	b.w	8006cf8 <_close_r>
	...

08006cd4 <_write_r>:
 8006cd4:	b538      	push	{r3, r4, r5, lr}
 8006cd6:	4604      	mov	r4, r0
 8006cd8:	4608      	mov	r0, r1
 8006cda:	4611      	mov	r1, r2
 8006cdc:	2200      	movs	r2, #0
 8006cde:	4d05      	ldr	r5, [pc, #20]	; (8006cf4 <_write_r+0x20>)
 8006ce0:	602a      	str	r2, [r5, #0]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	f7fa fdb2 	bl	800184c <_write>
 8006ce8:	1c43      	adds	r3, r0, #1
 8006cea:	d102      	bne.n	8006cf2 <_write_r+0x1e>
 8006cec:	682b      	ldr	r3, [r5, #0]
 8006cee:	b103      	cbz	r3, 8006cf2 <_write_r+0x1e>
 8006cf0:	6023      	str	r3, [r4, #0]
 8006cf2:	bd38      	pop	{r3, r4, r5, pc}
 8006cf4:	20000374 	.word	0x20000374

08006cf8 <_close_r>:
 8006cf8:	b538      	push	{r3, r4, r5, lr}
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	4d05      	ldr	r5, [pc, #20]	; (8006d14 <_close_r+0x1c>)
 8006cfe:	4604      	mov	r4, r0
 8006d00:	4608      	mov	r0, r1
 8006d02:	602b      	str	r3, [r5, #0]
 8006d04:	f7fa fdbe 	bl	8001884 <_close>
 8006d08:	1c43      	adds	r3, r0, #1
 8006d0a:	d102      	bne.n	8006d12 <_close_r+0x1a>
 8006d0c:	682b      	ldr	r3, [r5, #0]
 8006d0e:	b103      	cbz	r3, 8006d12 <_close_r+0x1a>
 8006d10:	6023      	str	r3, [r4, #0]
 8006d12:	bd38      	pop	{r3, r4, r5, pc}
 8006d14:	20000374 	.word	0x20000374

08006d18 <_fstat_r>:
 8006d18:	b538      	push	{r3, r4, r5, lr}
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	4d06      	ldr	r5, [pc, #24]	; (8006d38 <_fstat_r+0x20>)
 8006d1e:	4604      	mov	r4, r0
 8006d20:	4608      	mov	r0, r1
 8006d22:	4611      	mov	r1, r2
 8006d24:	602b      	str	r3, [r5, #0]
 8006d26:	f7fa fdb8 	bl	800189a <_fstat>
 8006d2a:	1c43      	adds	r3, r0, #1
 8006d2c:	d102      	bne.n	8006d34 <_fstat_r+0x1c>
 8006d2e:	682b      	ldr	r3, [r5, #0]
 8006d30:	b103      	cbz	r3, 8006d34 <_fstat_r+0x1c>
 8006d32:	6023      	str	r3, [r4, #0]
 8006d34:	bd38      	pop	{r3, r4, r5, pc}
 8006d36:	bf00      	nop
 8006d38:	20000374 	.word	0x20000374

08006d3c <_isatty_r>:
 8006d3c:	b538      	push	{r3, r4, r5, lr}
 8006d3e:	2300      	movs	r3, #0
 8006d40:	4d05      	ldr	r5, [pc, #20]	; (8006d58 <_isatty_r+0x1c>)
 8006d42:	4604      	mov	r4, r0
 8006d44:	4608      	mov	r0, r1
 8006d46:	602b      	str	r3, [r5, #0]
 8006d48:	f7fa fdb6 	bl	80018b8 <_isatty>
 8006d4c:	1c43      	adds	r3, r0, #1
 8006d4e:	d102      	bne.n	8006d56 <_isatty_r+0x1a>
 8006d50:	682b      	ldr	r3, [r5, #0]
 8006d52:	b103      	cbz	r3, 8006d56 <_isatty_r+0x1a>
 8006d54:	6023      	str	r3, [r4, #0]
 8006d56:	bd38      	pop	{r3, r4, r5, pc}
 8006d58:	20000374 	.word	0x20000374

08006d5c <_lseek_r>:
 8006d5c:	b538      	push	{r3, r4, r5, lr}
 8006d5e:	4604      	mov	r4, r0
 8006d60:	4608      	mov	r0, r1
 8006d62:	4611      	mov	r1, r2
 8006d64:	2200      	movs	r2, #0
 8006d66:	4d05      	ldr	r5, [pc, #20]	; (8006d7c <_lseek_r+0x20>)
 8006d68:	602a      	str	r2, [r5, #0]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	f7fa fdae 	bl	80018cc <_lseek>
 8006d70:	1c43      	adds	r3, r0, #1
 8006d72:	d102      	bne.n	8006d7a <_lseek_r+0x1e>
 8006d74:	682b      	ldr	r3, [r5, #0]
 8006d76:	b103      	cbz	r3, 8006d7a <_lseek_r+0x1e>
 8006d78:	6023      	str	r3, [r4, #0]
 8006d7a:	bd38      	pop	{r3, r4, r5, pc}
 8006d7c:	20000374 	.word	0x20000374

08006d80 <_read_r>:
 8006d80:	b538      	push	{r3, r4, r5, lr}
 8006d82:	4604      	mov	r4, r0
 8006d84:	4608      	mov	r0, r1
 8006d86:	4611      	mov	r1, r2
 8006d88:	2200      	movs	r2, #0
 8006d8a:	4d05      	ldr	r5, [pc, #20]	; (8006da0 <_read_r+0x20>)
 8006d8c:	602a      	str	r2, [r5, #0]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	f7fa fd3f 	bl	8001812 <_read>
 8006d94:	1c43      	adds	r3, r0, #1
 8006d96:	d102      	bne.n	8006d9e <_read_r+0x1e>
 8006d98:	682b      	ldr	r3, [r5, #0]
 8006d9a:	b103      	cbz	r3, 8006d9e <_read_r+0x1e>
 8006d9c:	6023      	str	r3, [r4, #0]
 8006d9e:	bd38      	pop	{r3, r4, r5, pc}
 8006da0:	20000374 	.word	0x20000374

08006da4 <_init>:
 8006da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da6:	bf00      	nop
 8006da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006daa:	bc08      	pop	{r3}
 8006dac:	469e      	mov	lr, r3
 8006dae:	4770      	bx	lr

08006db0 <_fini>:
 8006db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db2:	bf00      	nop
 8006db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006db6:	bc08      	pop	{r3}
 8006db8:	469e      	mov	lr, r3
 8006dba:	4770      	bx	lr
